{"/home/travis/build/npmtest/node-npmtest-pkgcloud/test.js":"/* istanbul instrument in package npmtest_pkgcloud */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/lib.npmtest_pkgcloud.js":"/* istanbul instrument in package npmtest_pkgcloud */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_pkgcloud = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_pkgcloud = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-pkgcloud && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_pkgcloud */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_pkgcloud\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_pkgcloud.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_pkgcloud.rollup.js'] =\n            local.assetsDict['/assets.npmtest_pkgcloud.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_pkgcloud.__dirname + '/lib.npmtest_pkgcloud.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud.js":"/*\n * pkgcloud.js: Top-level include for the pkgcloud module\n *\n * (C) 2011 Charlie Robbins, Ken Perkins, Ross Kukulinski & the Contributors.\n *\n */\n\nvar path = require('path');\n\nvar pkgcloud = exports;\n\npkgcloud.version = require('../package.json').version;\n\nvar components = [\n  './pkgcloud/core/base',\n  './pkgcloud/common',\n  './pkgcloud/core/compute',\n  './pkgcloud/core/storage'\n];\n\nvar providers = [\n  'amazon',\n  'azure',\n  'digitalocean',\n  'google',\n  'iriscouch',\n  'joyent',\n  'mongohq',\n  'mongolab',\n  'openstack',\n  'rackspace',\n  'redistogo',\n  'telefonica',\n  'hp'\n];\n\nvar services = [\n  'blockstorage',\n  'compute',\n  'cdn',\n  'database',\n  'dns',\n  'loadbalancer',\n  'orchestration',\n  'network',\n  'storage'\n];\n\n//\n// Setup lazy-loaded exports for faster loading\n//\ncomponents.forEach(function (component) {\n  var name = path.basename(component),\n      hidden = '_' + name;\n\n  pkgcloud.__defineGetter__(name, function () {\n    if (!pkgcloud[hidden]) {\n      pkgcloud[hidden] = require(component);\n    }\n\n    return pkgcloud[hidden];\n  });\n});\n\n//\n// Initialize our providers\n//\npkgcloud.providers = {};\n\n//\n// Setup empty exports to be populated later\n//\nservices.forEach(function (key) {\n  pkgcloud[key] = {};\n});\n\n//\n// Setup core `pkgcloud.*.createClient` methods for all\n// provider functionality.\n//\nservices.forEach(function (service) {\n  pkgcloud[service].createClient = function (options) {\n    if (!options.provider) {\n      throw new Error('options.provider is required to create a new pkgcloud client.');\n    }\n\n    var provider = pkgcloud.providers[options.provider];\n\n    if (!provider) {\n      throw new Error(options.provider + ' is not a supported provider');\n    }\n\n    if (!provider[service]) {\n      throw new Error(options.provider + ' does not expose a ' + service + ' service');\n    }\n\n    return new provider[service].createClient(options);\n  };\n});\n\n//\n// Setup all providers as lazy-loaded getters\n//\nproviders.forEach(function (provider) {\n  pkgcloud.providers.__defineGetter__(provider, function () {\n    return require('./pkgcloud/' + provider);\n  });\n});\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/core/compute/index.js":"/*\n * index.js: Top-level include from which all pkgcloud compute models inherit.\n *\n * (C) 2011 Charlie Robbins, Ken Perkins, Ross Kukulinski & the Contributors.\n *\n */\n\nvar ip = require('ip');\n\nexports.Flavor       = require('./flavor').Flavor;\nexports.Image        = require('./image').Image;\nexports.Server       = require('./server').Server;\n\n//\n// ### function isPrivate (addr)\n// Determines if an IP address is private.\n//\nexports.isPrivate = ip.isPrivate;\n\n//\n// ### function isPublic (addr)\n// Determines if an IP address is public.\n//\nexports.isPublic = ip.isPublic;\n\n//\n// ### function serverPass (server)\n// #### @server {Object} Server to extract the serverPass from.\n//\n// Returns the server password (if it exists).\n//\nexports.serverPass = function (server) {\n  if (server.adminPass) {\n    return server.adminPass;\n  }\n  else if (server.metadata) {\n    return server.metadata['root'];\n  }\n\n  return '';\n};\n\n//\n// ### function serverIp (server)\n// #### @server {Object} Server to extract the IP from.\n//\n// Attempts to return the `server` IP.\n//\nexports.serverIp = function (server, options) {\n  if (!server && !server.ips && !server.addresses) {\n    return null;\n  }\n\n  options = options || {};\n\n  var isPublic  = options.isPublic  || exports.isPublic,\n      isPrivate = options.isPrivate || exports.isPrivate,\n      interfaces,\n      addresses,\n      pub;\n\n  if (server.ips) {\n    //\n    // Joyent uses the format:\n    // * { ips: ['23.23.23.23', '10.0.0.1'] }\n    // OR\n    // * { ips: ['10.0.0.1', '23.23.23.23'] }\n    //\n    pub = server.ips.filter(function (addr) {\n      return isPublic(addr);\n    });\n\n    return !pub.length\n      ? server.ips[0]\n      : pub[0];\n  }\n  else if (server.addresses.public || server.addresses.private) {\n    //\n    // Rackspace and most sane providers use:\n    //\n    // addresses: {\n    //   public: ['23.23.23.23'],\n    //   private: ['10.0.0.1']\n    // }\n    //\n    // OR\n    //\n    // addresses: {\n    //   public: [],\n    //   private: ['10.0.0.1']\n    // }\n    //\n    return server.addresses.public.length\n      ? server.addresses.public[0]\n      : server.addresses.private[0];\n  }\n  else if (server.addresses) {\n    //\n    // OpenStack uses a non-standard set of names\n    //\n    // addresses: {\n    //   vlan01: [\n    //     { version: 4, addr: '10.0.0.1' }\n    //     { version: 4, addr: '23.23.23.23' }\n    //   ]\n    // }\n    //\n    interfaces = Object.keys(server.addresses);\n    if (!interfaces.length) {\n      return null;\n    }\n\n    addresses = interfaces.reduce(function (all, iface) {\n      server.addresses[iface]\n        .map(function (info) { return info.addr })\n        .filter(Boolean)\n        .forEach(function (addr) {\n          if (isPublic(addr)) {\n            all['public'].push(addr);\n          }\n          else if (isPrivate(addr)) {\n            all['private'].push(addr);\n          }\n        });\n\n      return all;\n    }, { public: [], private: [] });\n\n    return addresses['public'][0]\n      || addresses['private'][0]\n      || null;\n  }\n\n  return null;\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/core/compute/flavor.js":"/*\n * flavor.js: Base flavor from which all pkgcloud flavors inherit from\n *\n * (C) 2011 Charlie Robbins, Ken Perkins, Ross Kukulinski & the Contributors.\n *\n */\n\nvar util = require('util'),\n    model = require('../base/model');\n\nvar Flavor = exports.Flavor = function (client, details) {\n  model.Model.call(this, client, details);\n};\n\nutil.inherits(Flavor, model.Model);\n\nFlavor.prototype.refresh = function (callback) {\n  return this.client.getFlavor(this, callback);\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/core/base/model.js":"/*\n * model.js: Base model from which all pkgcloud models inherit from\n *\n * (C) 2011 Charlie Robbins, Ken Perkins, Ross Kukulinski & the Contributors.\n *\n */\n\nvar events = require('eventemitter2'),\n    util = require('util');\n\nvar Model = exports.Model = function (client, details) {\n  events.EventEmitter2.call(this, { delimiter: '::', wildcard: true });\n  this.client = client;\n\n  if (details) {\n    this._setProperties(details);\n  }\n};\n\nutil.inherits(Model, events.EventEmitter2);\n\n// ### function setWait (attributes, interval, callback)\n//\n// Continually polls resource and checks the\n// results against the attributes parameter.\n// When the attributes match the callback will be fired\n//\n// e.g. server.setWait({ status: 'RUNNING' }, 5000, function (err, resource) {\n//        console.log('status is now running');\n//      });\n//\n// #### @attributes  {Object|Function}  Attributes to match. Optionally provide a matching function\n// ####    @*        {*}       **Optional** Key and expected value\n// #### @interval    {Integer} Time between pools in ms.\n// #### @timeLimit   {Integer} **Optional** Max time to spend executing\n// #### @callback {Function} f(err, resource).\nfunction setWait(attributes, interval, timeLimit, callback) {\n  if (typeof timeLimit === 'function') {\n    callback  = timeLimit;\n    timeLimit = null;\n  }\n\n  var self  = this,\n      start = Date.now(),\n      fired = false,\n      equalCheckId,\n      current;\n\n  equalCheckId = setInterval(function () {\n    self.refresh(function (err, resource) {\n\n      if (timeLimit) {\n        current = Date.now();\n        if (current - start > timeLimit) {\n          clearInterval(equalCheckId);\n          if (!fired) {\n            fired = true;\n            callback(err, resource);\n            return;\n          }\n        }\n      }\n\n      if (err) {\n        return;\n      } // Ignore errors\n\n      var equal = true,\n          keys  = Object.keys(attributes);\n\n      if (typeof attributes === 'function') {\n        equal = attributes(resource);\n      }\n      else {\n        for (var i = 0; i < keys.length; i++) {\n          if (attributes[keys[i]] !== resource[keys[i]]) {\n            equal = false;\n            break;\n          }\n        }\n      }\n\n      if (equal) {\n        clearInterval(equalCheckId);\n        callback(null, resource);\n      }\n    });\n  }, interval);\n\n  return equalCheckId;\n}\n\n// clear the interval\nfunction clear(intervalId) {\n  clearInterval(intervalId);\n}\n\nModel.prototype.until     = setWait;\nModel.prototype.setWait   = setWait;\nModel.prototype.clearWait = clear;","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/core/compute/image.js":"/*\n * image.js: Base image from which all pkgcloud images inherit from\n *\n * (C) 2011 Charlie Robbins, Ken Perkins, Ross Kukulinski & the Contributors.\n *\n */\n\nvar util = require('util'),\n    model = require('../base/model');\n\nvar Image = exports.Image = function (client, details) {\n  model.Model.call(this, client, details);\n};\n\nutil.inherits(Image, model.Model);\n\nImage.prototype.refresh = function (callback) {\n  return this.client.getImage(this, callback);\n};\n\nImage.prototype.create = function (callback) {\n  return this.client.createImage(this, callback);\n};\n\nImage.prototype.destroy = function (callback) {\n  return this.client.destroyImage(this, callback);\n};","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/core/compute/server.js":"/*\n * server.js: Base server from which all pkgcloud servers inherit from\n *\n * (C) 2011 Charlie Robbins, Ken Perkins, Ross Kukulinski & the Contributors.\n *\n */\n\nvar util = require('util'),\n    model = require('../base/model'),\n    computeStatus = require('../../common/status').compute;\n\nvar Server = exports.Server = function (client, details) {\n  model.Model.call(this, client, details);\n};\n\nutil.inherits(Server, model.Model);\n\nServer.prototype.refresh = function (callback) {\n  var self = this;\n  return self.client.getServer(this, function (err, server) {\n    if (!err) {\n      self._setProperties(server.original);\n    }\n\n    return callback.apply(this, arguments);\n  });\n};\n\nServer.prototype.create = function (callback) {\n  return this.client.createServer(this, callback);\n};\n\nServer.prototype.destroy = function (callback) {\n  return this.client.destroyServer(this, callback);\n};\n\nServer.prototype.reboot = function (callback) {\n  return this.client.rebootServer(this, callback);\n};\n\nServer.prototype.resize = function () {\n  var args = [this].concat(Array.prototype.slice.call(arguments));\n  this.client.resizeServer.apply(this.client, args);\n};\n\nServer.prototype.STATUS = computeStatus;","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/common/status.js":"/*\n * status.js: Standardized statuses for different services\n *\n * (C) 2011-2012 Charlie Robbins, Ken Perkins, Ross Kukulinski & the Contributors.\n *\n */\n\nexports.compute = {\n  error: 'ERROR',\n  provisioning: 'PROVISIONING',\n  reboot: 'REBOOT',\n  running: 'RUNNING',\n  stopped: 'STOPPED',\n  terminated: 'TERMINATED',\n  unknown: 'UNKNOWN',\n  updating: 'UPDATING'\n};","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/core/storage/index.js":"/*\n * index.js: Top-level include from which all pkgcloud storage models inherit.\n *\n * (C) 2011 Charlie Robbins, Ken Perkins, Ross Kukulinski & the Contributors.\n *\n */\n\nexports.File      = require('./file').File;\nexports.Container = require('./container').Container;","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/core/storage/file.js":"/*\n * file.js: Base container from which all pkgcloud files inherit from\n *\n * (C) 2010 Charlie Robbins, Ken Perkins, Ross Kukulinski & the Contributors.\n *\n */\n\nvar util = require('util'),\n    model = require('../base/model'),\n    storage = require('../storage');\n\nvar File = exports.File = function (client, details) {\n  model.Model.call(this, client, details);\n};\n\nutil.inherits(File, model.Model);\n\nFile.prototype.remove = function (callback) {\n  this.client.removeFile(this.containerName, this.name, callback);\n};\n\nFile.prototype.download = function (options, callback) {\n  this.client.download(options, callback);\n};\n\nFile.prototype.__defineGetter__('fullPath', function () {\n  return this.client._getUrl({\n    container: this.containerName,\n    path: this.name\n  });\n});\n\nFile.prototype.__defineGetter__('containerName', function () {\n  return this.container instanceof storage.Container ? this.container.name : this.container;\n});\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/core/storage/container.js":"/*\n * container.js: Base container from which all pkgcloud containers inherit from\n *\n * (C) 2010 Charlie Robbins, Ken Perkins, Ross Kukulinski & the Contributors.\n *\n */\n\nvar util = require('util'),\n    model = require('../base/model');\n\nvar Container = exports.Container = function (client, details) {\n  this.files = [];\n\n  model.Model.call(this, client, details);\n};\n\nutil.inherits(Container, model.Model);\n\nContainer.prototype.create = function (callback) {\n  this.client.createContainer(this.name, callback);\n};\n\nContainer.prototype.refresh = function (callback) {\n  this.client.getContainer(this, callback);\n};\n\nContainer.prototype.destroy = function (callback) {\n  this.client.destroyContainer(this.name, callback);\n};\n\nContainer.prototype.upload = function (file, local, options, callback) {\n  this.client.upload(this.name, file, local, options, callback);\n};\n\nContainer.prototype.getFiles = function (download, callback) {\n  var self = this;\n\n  // download can be omitted: (...).getFiles(callback);\n  // In this case first argument will be a function\n  if (typeof download === 'function' && !(download instanceof RegExp)) {\n    callback = download;\n    download = false;\n  }\n\n  this.client.getFiles(this.name, download, function (err, files) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.files = files;\n    callback(null, files);\n  });\n};\n\nContainer.prototype.removeFile = function (file, callback) {\n  this.client.removeFile(this.name, file, callback);\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/core/base/index.js":"/*\n * index.js: Top-level include for pkgcloud `base` module from which all pkgcloud objects inherit.\n *\n * (C) 2011 Charlie Robbins, Ken Perkins, Ross Kukulinski & the Contributors.\n *\n */\n\nexports.Client = require('./client').Client;\nexports.Model  = require('./model').Model;","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/core/base/client.js":"/*\n * client.js: Base client from which all pkgcloud clients inherit from\n *\n * (C) 2013 Charlie Robbins, Ken Perkins, Ross Kukulinski & the Contributors.\n *\n */\n\nvar events = require('eventemitter2'),\n    request = require('request'),\n    util = require('util'),\n    qs = require('qs'),\n    pkgcloud = require('../../../pkgcloud'),\n    errs = require('errs');\n\n/**\n * Client\n *\n * @description base Client from which all pkgcloud clients inherit\n *\n * @param {object}    options   options are stored as client.config\n * @type {Function}\n */\nvar Client = exports.Client = function (options) {\n  events.EventEmitter2.call(this, { delimiter: '::', wildcard: true });\n  this.config = options || {};\n};\n\nutil.inherits(Client, events.EventEmitter2);\n\n/**\n * Client.setCustomUserAgent\n *\n * @description allows the caller to specify a custom prefix for the HTTP UserAgent\n * for all queries generated during the lifetime of the client.\n *\n * Valid user agents should come in the form of app-name/version, for example:\n *\n * client.setCustomUserAgent(\"my-app/1.2.3\");\n *\n * @param {String}          userAgent   the new userAgent to be prefixed\n */\nClient.prototype.setCustomUserAgent = function (userAgent) {\n  this._customUserAgent = userAgent;\n};\n\n/**\n * Client.getUserAgent\n *\n * @description gets the full UserAgent for the current client\n *\n * @returns {string}\n */\nClient.prototype.getUserAgent = function() {\n  return util.format('%snodejs-pkgcloud/%s', this._customUserAgent ?\n    this._customUserAgent + ' ' : '', pkgcloud.version);\n};\n\n/**\n * Client._request\n *\n * @description is the global request handler for a pkgcloud client request.\n * Some clients can override this function, for example\n * rackspace and openstack providers implement an inline authentication mechanism.\n *\n * @param {object}          options     options for this client request\n * @param {Function}        callback    the callback for the client request\n * @private\n */\nClient.prototype._request = function (options, callback) {\n  var self = this;\n  var requestOptions = {};\n\n  requestOptions.method = options.method || 'GET';\n  requestOptions.headers = options.headers || {};\n  requestOptions.path = options.path;\n  requestOptions.strictSSL = typeof self.config.strictSSL === 'boolean'\n    ? self.config.strictSSL : true;\n\n  if (options.qs) {\n    requestOptions.qs = options.qs;\n  }\n\n  if (options.body) {\n    requestOptions.body = options.body;\n  }\n\n  if (options.container) {\n    requestOptions.signingUrl = '/' + options.container + '/';\n\n    if (options.path) {\n      requestOptions.signingUrl += options.path;\n    }\n\n    if (options.qs) {\n      requestOptions.signingUrl += '?' + qs.stringify(options.qs);\n    }\n  }\n\n  function sendRequest(opts) {\n\n    //\n    // Setup any specific request options before\n    // making the request\n    //\n    if (self.before) {\n      var errors = false;\n      for (var i = 0; i < self.before.length; i++) {\n        var fn = self.before[i];\n        try {\n          opts = fn.call(self, opts) || opts;\n          // on errors do error handling, break.\n        } catch (exc) {\n          errs.handle(exc, callback);\n          errors = true;\n          break;\n        }\n      }\n      if (errors) {\n        return;\n      }\n    }\n\n    opts.uri = options.uri || self._getUrl(options);\n\n    // Clean up our polluted options\n    //\n    // TODO refactor the options used in Before methods\n    // to not require polluting request options\n    //\n    delete opts.path;\n    delete opts.signingUrl;\n\n    // Set our User Agent\n    opts.headers['User-Agent'] = self.getUserAgent();\n\n    // If we are missing callback\n    if (!callback) {\n      try {\n        self.emit('log::trace', 'Sending (non-callback) client request', opts);\n        return request(opts);\n      } // if request throws still return an EE\n      catch (exc1) {\n        self.emit('log::trace', 'Unable to create (non-callback) request', opts);\n        return errs.handle(exc1);\n      }\n    } else {\n      try {\n        self.emit('log::trace', 'Sending client request', opts);\n        self.emit('log::debug', opts.method + ': ' + opts.uri);\n        return request(opts, self._defaultRequestHandler(callback));\n      } catch (exc2) {\n        self.emit('log::error', 'Unable to create request', opts);\n        return errs.handle(exc2, callback);\n      }\n    }\n  }\n\n  return sendRequest(requestOptions);\n};\n\n/**\n * Client._defaultRequestHandler\n *\n * @description handles requests for all calls\n *\n * @param callback\n * @returns {Function}\n * @private\n */\nClient.prototype._defaultRequestHandler = function (callback) {\n\n  var self = this;\n\n  return function (err, res, body) {\n    if (err) {\n      return callback(err);\n    }\n\n    var err2 = self._parseError(res, body);\n\n    if (err2) {\n      self.emit('log::error', 'Error during provider response', err2);\n      return callback(errs.create(err2));\n    }\n\n    self.emit('log::trace', 'Provider Response', {\n      href: res.request.uri.href,\n      method: res.request.method,\n      headers: res.headers,\n      statusCode: res.statusCode\n    });\n\n    callback(err, body, res);\n  };\n};\n\nClient.prototype._parseError = function(response, body) {\n  var self = this,\n    statusCode = response.statusCode.toString(),\n    err;\n\n  if (Object.keys(self.failCodes).indexOf(statusCode) !== -1) {\n    //\n    // TODO: Support more than JSON errors here\n    //\n    err = {\n      provider: self.provider,\n      failCode: self.failCodes[statusCode],\n      statusCode: response.statusCode,\n      message: self.provider + ' Error (' +\n        statusCode + '): ' + self.failCodes[statusCode],\n      href: response.request.uri.href,\n      method: response.request.method,\n      headers: response.headers\n    };\n\n    if (body) {\n      try {\n        err.result = typeof body === 'string' ? JSON.parse(body) : body;\n      } catch (e) {\n        err.result = { err: body };\n      }\n    }\n  }\n\n  return err;\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/common/index.js":"/*\n * index.js: Top-level include for the pkgcloud common module.\n *\n * (C) 2011 Charlie Robbins, Ken Perkins, Ross Kukulinski & the Contributors.\n *\n */\n\nexports.auth = require('./auth');","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/common/auth.js":"/*\n * auth.js: Utilities for authenticating with multiple cloud providers\n *\n * (C) 2011-2012 Charlie Robbins, Ken Perkins, Ross Kukulinski & the Contributors.\n *\n */\n\nvar httpSignature = require('./http-signature'),\n    azureSignature = require('./azure-signature');\n\nvar auth = exports;\n\nauth.basic = function basicAuth(req) {\n  var credentials = this.credentials\n    || this.config.username + ':' + this.config.password;\n\n  req.headers = req.headers || {};\n  req.headers.authorization = [\n    'Basic',\n    new Buffer(credentials).toString('base64')\n  ].join(' ');\n};\n\n// Add Account number for requests to rackspace API\nauth.accountId = function (req) {\n  req.headers = req.headers || {};\n  if (this.config.accountNumber) {\n    req.headers['x-auth-project-id'] = this.config.accountNumber;\n  }\n};\n\nfunction signatureGenerator(sign) {\n  return function signatureAuth(req, keys) {\n    keys = keys || this.config;\n    sign.call(this, req, {\n      key: keys.key,\n      keyId: keys.keyId\n    });\n  };\n}\n\nfunction azureSignatureGenerator(sign) {\n  return function azureSignatureGenerator(req, keys) {\n    keys = keys || this.azureKeys;\n    sign.call(this, req, keys);\n  };\n}\n\nauth.httpSignature = signatureGenerator(httpSignature.sign);\n\nauth.azure = {\n  managementSignature: azureSignatureGenerator(azureSignature.managementSignature),\n  storageSignature: azureSignatureGenerator(azureSignature.storageSignature),\n  tablesSignature: azureSignatureGenerator(azureSignature.tablesSignature)\n};\n\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/common/http-signature.js":"/*\n * http-signature.js: Implmentation of `http-signature` authentication.\n *\n * Copyright (C) 2011 Joyent, Inc.  All rights reserved.\n * MIT License\n *\n * Modified under MIT\n *\n */\n\nvar crypto = require('crypto');\n\n//\n// ## Globals\n//\nvar Algorithms = {\n  'rsa-sha1': true,\n  'rsa-sha256': true,\n  'rsa-sha512': true,\n  'dsa-sha1': true,\n  'hmac-sha1': true,\n  'hmac-sha256': true,\n  'hmac-sha512': true\n};\n\n//\n// ## Specific Errors\n//\nfunction MissingHeaderError(message) {\n  this.name = 'MissingHeaderError';\n  this.message = message;\n  this.stack = (new Error()).stack;\n}\n\nMissingHeaderError.prototype = new Error();\n\nfunction InvalidAlgorithmError(message) {\n  this.name = 'InvalidAlgorithmError';\n  this.message = message;\n  this.stack = (new Error()).stack;\n}\n\nInvalidAlgorithmError.prototype = new Error();\n\n//\n// ## Internal Functions\n//\nfunction _pad(val) {\n  return parseInt(val, 10) < 10\n    ? val = '0' + val\n    : val;\n}\n\nfunction _rfc1123() {\n  var date = new Date(),\n      months,\n      days;\n\n  days   = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n  months = [\n    'Jan', 'Feb', 'Mar',\n    'Apr', 'May', 'Jun',\n    'Jul', 'Aug', 'Sep',\n    'Oct', 'Nov', 'Dec'\n  ];\n\n  return days[date.getUTCDay()] + ', ' +\n    _pad(date.getUTCDate())     + ' '  +\n    months[date.getUTCMonth()]  + ' '  +\n    date.getUTCFullYear()       + ' '  +\n    _pad(date.getUTCHours())    + ':'  +\n    _pad(date.getUTCMinutes())  + ':'  +\n    _pad(date.getUTCSeconds())  + ' GMT';\n}\n\n//\n// ## Exported API methods\n//\nmodule.exports = {\n  sign: function (req, options) {\n    if (!options || !(options instanceof Object)) {\n      throw new TypeError('options must be an Object');\n    }\n\n    if (!options.keyId || typeof options.keyId !== 'string') {\n      throw new TypeError('options.keyId must be a String');\n    }\n\n    if (options.algorithm && typeof options.algorithm !== 'string') {\n      throw new TypeError('options.algorithm must be a String');\n    }\n\n    if (!options.algorithm) {\n      options.algorithm = 'rsa-sha256';\n    }\n\n    options.algorithm = options.algorithm.toLowerCase();\n    if (!Algorithms[options.algorithm]) {\n      throw new InvalidAlgorithmError(options.algorithm + ' is not supported');\n    }\n\n    var stringToSign = _rfc1123(),\n        alg = options.algorithm.match(/(hmac|rsa)-(\\w+)/),\n        signature,\n        signer,\n        hmac;\n\n    if (alg[1] === 'hmac') {\n      hmac = crypto.createHmac(alg[2].toUpperCase(), options.key);\n      hmac.update(stringToSign);\n      signature = hmac.digest('base64');\n    } else {\n      signer = crypto.createSign(options.algorithm.toUpperCase());\n      signer.update(stringToSign);\n      signature = signer.sign(options.key, 'base64');\n    }\n\n    req.headers = req.headers || {};\n    req.headers.date = stringToSign;\n    req.headers.Authorization =\n      'Signature keyId=\"' + options.keyId + '\",algorithm=\"' +\n      options.algorithm + '\",headers=\"date\" ' + signature;\n\n    return req;\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/common/azure-signature.js":"/*\n * azure-signature.js: Implementation of authentication for Azure APIs.\n *\n * (C) 2012 Charlie Robbins, Ken Perkins, Ross Kukulinski & the Contributors.\n *\n */\n\nvar azureApi = require('../azure/utils/azureApi'),\n  SharedKey = require('../azure/utils/sharedkey'),\n  SharedTableKey = require('../azure/utils/sharedkeytable');\n\nexports.managementSignature = function managementSignature(req, options) {\n\n  req.headers = req.headers || {};\n  options = options || {};\n\n  if (!options.key) {\n    throw new TypeError('`key` is a required argument for azure-signature');\n  }\n\n  if (!options.cert) {\n    throw new TypeError('`cert` is a required argument for azure-signature');\n  }\n\n  if (typeof options.subscriptionId !== 'string') {\n    throw new TypeError('`subscriptionId` is a required argument for azure-signature');\n  }\n\n  req.headers['x-ms-version'] =  azureApi.MANAGEMENT_API_VERSION;\n  req.headers['accept'] = 'application/xml';\n  req.headers['content-type'] = 'application/xml';\n};\n\nexports.storageSignature = function storageSignature(req, options) {\n\n  options = options || {};\n\n  if (typeof options.storageAccount !== 'string') {\n    throw new TypeError('`storageAccount` is a required argument for azure-signature');\n  }\n\n  if (typeof options.storageAccessKey !== 'string') {\n    throw new TypeError('`storageAccessKey` is a required argument for azure-signature');\n  }\n\n  var sharedKey = new SharedKey(options.storageAccount, options.storageAccessKey);\n  sharedKey.signRequest(req);\n};\n\nexports.tablesSignature = function tablesSignature(req, options) {\n\n  options = options || {};\n\n  if (typeof options.storageAccount !== 'string') {\n    throw new TypeError('`storageAccount` is a required argument for azure-signature');\n  }\n\n  if (typeof options.storageAccessKey !== 'string') {\n    throw new TypeError('`storageAccessKey` is a required argument for azure-signature');\n  }\n\n  var sharedKey = new SharedTableKey(options.storageAccount, options.storageAccessKey);\n  sharedKey.signRequest(req);\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/azure/utils/azureApi.js":"/**\n *  (C) Microsoft Open Technologies, Inc.   All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar HeaderConstants = require('./constants').HeaderConstants;\nvar async = require('async');\nvar templates = require('../compute/templates/templates');\nvar _ = require('lodash');\nvar errs = require('errs');\nvar URL = require('url');\nvar cert = require('../utils/cert');\nvar pkgcloud = require('../../../../../pkgcloud');\n\nexports.MANAGEMENT_API_VERSION = '2012-03-01';\nexports.MANAGEMENT_ENDPOINT = 'management.core.windows.net';\nvar STORAGE_ENDPOINT = exports.STORAGE_ENDPOINT = 'blob.core.windows.net';\nexports.STORAGE_API_VERSION = HeaderConstants.TARGET_STORAGE_VERSION;\nexports.TABLES_ENDPOINT = 'table.core.windows.net';\nexports.TABLES_API_VERSION = '2012-02-12';\nvar MINIMUM_POLL_INTERVAL = exports.MINIMUM_POLL_INTERVAL = 3000;\n\n// Declaring variables for helper functions defined later\nvar createVM, createLinuxVM, createWindowsVM, validateCreateOptions, getServer,\n    getServers, rebootServer, stopServer, deleteHostedService, destroyServer, createImage,\n    captureServer, deleteImage, destroyImage, getMediaLinkUrl, createEndpoints,\n    makeTemplateRequest, createHostedService, addCertificate, getHostedServices,\n    deleteServer, getOSImage, deleteOSDisk, deleteOSBlob, getServersFromServices,\n    getServersFromService, isVM, getHostedServiceProperties, pollRequestStatus,\n    getStorageInfoFromUri;\n\n/**\n * createServer()\n *\n * In order to deploy a vm, Azure requires us to do the following\n * before we can actually try to create the vm.\n * 1. get or create a Hosted Service (we use the same name as the vm)\n * 2. resolve the OSImage url to a container on the user's account\n * 3. upload SSH certificate (if necessary)\n * 4. create the VM\n *\n * Note: creating a VM on Azure will fail if one of the following is true\n * 1. The VM (with the same name) already exists\n * 2. The blob storage (with the same name) for the OSImage already exists\n * 3. The VM disk (with the same name) for the OSImage already exists\n * 4. The storage account is in a different azure location than the vm\n *    (East US, West US...)\n *\n * Note: createServer() must wait for Azure to respond if the createDeployment (vm)\n * request succeeded. createServer() asynchronously polls Azure to get\n * the result. Once the result is received, the callback function will be called\n * with the server information or error. The state of returned server will most likely\n * be PROVISIONING or STOPPED. Use server.setWait() to continue polling the server until\n * its status is RUNNING. This entire process may take several minutes.\n */\n\nexports.createServer = function (client, options, callback) {\n  var vmOptions = {},\n    ssh;\n\n  // async execute the following tasks one by one and bail if there is an error\n  async.waterfall([\n    function (next) {\n      // validate createServer options\n      validateCreateOptions(options, client.config, next);\n    },\n    function (next) {\n      getHostedServiceProperties(client, options.name, next);\n    },\n    function (service, next) {\n      // if the HostedService does not exist, create it\n      vmOptions.hostedService = service;\n      if (vmOptions.hostedService === null) {\n        createHostedService(client, options, function (err, service) {\n          if (err) {\n            next(err);\n          } else {\n            vmOptions.hostedService = service;\n            next(null);\n          }\n        });\n      } else {\n        next(null);\n      }\n    },\n    function (next) {\n      // get the server's OSImage info\n      getOSImage(client, options.image, function (err, res) {\n        if (err) {\n          next(err);\n        } else {\n          vmOptions.image = res;\n          next(null);\n        }\n      });\n    },\n    function (next) {\n      ssh = options.ssh;\n      if (ssh) {\n        vmOptions.sshCertInfo = cert.getAzureCertInfo(ssh.cert);\n      }\n      next();\n    },\n    function (next) {\n      // add the ssh certificate to the service\n      if (vmOptions.sshCertInfo) {\n        addCertificate(client, options.name, vmOptions.sshCertInfo.cert, ssh.pemPassword, function (err) {\n          next(err);\n        });\n      } else {\n        next(null);\n      }\n    },\n    function (next) {\n      // create the VM and wait for response\n      createVM(client, options, vmOptions, next);\n    },\n    function (next) {\n      // now get the actual server info\n      getServer(client, options.name, next);\n    }],\n    function (err, result) {\n      if (err) {\n        callback(err);\n      } else {\n        // return the server info\n        callback(null, result);\n      }\n    }\n  );\n};\n\n/**\n * getServer\n */\ngetServer = exports.getServer = function (client, serverName, callback) {\n  getServersFromService(client, serverName, function (err, servers) {\n    return !err\n      ? callback(err, servers[0] ? servers[0] : null)\n      : callback(err);\n  });\n};\n\ngetServers = exports.getServers = function (client, callback) {\n  // async execute the following tasks one by one and bail if there is an error\n  async.waterfall([\n    function (next) {\n      // get the list of Hosted Services\n      getHostedServices(client, next);\n    },\n    function (hostedServices, next) {\n      // get the list of Servers from the Hosted Services\n      getServersFromServices(client, hostedServices, next);\n    }],\n    function (err, servers) {\n      callback(err, servers);\n    }\n  );\n};\n\nmakeTemplateRequest = function (client, path, templateName, params, callback) {\n  var headers = {},\n    body;\n\n  // async execute the following tasks one by one and bail if there is an error\n  async.waterfall([\n    function (next) {\n      templates.load(templateName, next);\n    },\n    function (template, next) {\n      // compile template with params\n      var compiled = _.template(template);\n      body = compiled(params);\n      headers['content-length'] = body.length;\n      headers['content-type'] = 'application/xml';\n      headers['accept'] = 'application/xml';\n      client._request({\n        method: 'POST',\n        path: path,\n        body: body,\n        headers: headers\n      }, function (err, body, res) {\n        if (err) {\n          return next(err);\n        }\n        // poll azure for result of request\n        pollRequestStatus(client, res.headers['x-ms-request-id'], MINIMUM_POLL_INTERVAL, next);\n      });\n    }],\n    function (err) {\n      callback(err);\n    }\n  );\n};\n\ncreateHostedService = exports.createHostedService = function (client, options, callback) {\n  var path = client.subscriptionId + '/services/hostedservices';\n  var params = {\n    NAME: options.name,\n    LABEL_BASE64: new Buffer(options.name).toString('base64'),\n    LOCATION: options.location\n  };\n\n  makeTemplateRequest(client, path, 'createHostedService.xml', params, callback);\n};\n\n/**\n * rebootServer\n * uses Restart Role\n * POST https://management.core.windows.net/<subscription-id>/services/hostedservices/<service-name>/deployments/<deployment-name>/roleinstances/<role-name>/operations\n * A successful operation returns status code 201 (Created). Need to poll for success?\n */\nrebootServer = exports.rebootServer = function (client, serviceName, callback) {\n  var path = client.subscriptionId + '/services/hostedservices/' +\n    serviceName + '/deployments/' +\n    serviceName + '/roleInstances/' +\n    serviceName + '/Operations';\n\n  makeTemplateRequest(client, path, 'restartRole.xml', {}, callback);\n};\n\n/**\n * stopServer\n * uses Shutdown Role\n * POST https://management.core.windows.net/<subscription-id>/services/hostedservices/<service-name>/deployments/<deployment-name>/roleinstances/<role-name>/operations\n * A successful operation returns status code 201 (Created). Need to poll for success?\n */\nstopServer = exports.stopServer = function (client, serviceName, callback) {\n  var path = client.subscriptionId + '/services/hostedservices/' +\n    serviceName + '/deployments/' +\n    serviceName + '/roleInstances/' +\n    serviceName + '/Operations';\n\n  makeTemplateRequest(client, path, 'shutdownRole.xml', {}, callback);\n};\n\naddCertificate = function (client, serviceName, cert, password, callback) {\n  var path = client.subscriptionId + '/services/hostedservices/' +\n    serviceName + '/certificates';\n\n  var params = {\n    CERT_BASE64: new Buffer(cert, 'utf8').toString('base64'),\n    PASSWORD: password\n  };\n\n  makeTemplateRequest(client, path, 'addCertificate.xml', params, callback);\n};\n\ndeleteHostedService = exports.deleteHostedService = function (client, serviceName, callback) {\n  // DELETE https://management.core.windows.net/<subscription-id>/services/hostedservices/<service-name>\n  var path = client.subscriptionId + '/services/hostedservices/' + serviceName;\n\n  client._request({\n    method: 'DELETE',\n    path: path\n  }, function (err, body, res) {\n    if (err) {\n      return callback(err);\n    }\n    // poll azure for result of request\n    pollRequestStatus(client, res.headers['x-ms-request-id'], MINIMUM_POLL_INTERVAL, callback);\n  });\n};\n\ngetHostedServices = exports.getHostedServices = function (client, callback) {\n  var path = client.subscriptionId + '/services/hostedservices',\n    services = [];\n\n  client.get(path, function (err, body) {\n    if (err) {\n      return callback(err);\n    }\n    if (body.HostedService) {\n      // need to check if azure returned an array or single object\n      if (Array.isArray(body.HostedService)) {\n        body.HostedService.forEach(function (service) {\n          services.push(service);\n        });\n      } else {\n        services.push(body.HostedService);\n      }\n    }\n\n    callback(null, services);\n  });\n};\n\n/**\n * destroyServer\n * uses Delete Deployment\n * DELETE https://management.core.windows.net/<subscription-id>/services/hostedservices/<service-name>/deployments/<deployment-name>\n *   Because Delete Deployment is an asynchronous operation, it always returns status code 202 (Accept).\n *   To determine the status code for the operation once it is complete, call Get Operation Status.\n * Because Delete Deployment is an asynchronous operation, it always returns status code 202 (Accept).\n */\ndestroyServer = exports.destroyServer = function (client, serverName, callback) {\n  var server = null;\n\n  // async execute the following tasks one by one and bail if there is an error\n  async.waterfall([\n    function (next) {\n      // get the list of Hosted Services\n      getServer(client, serverName, next);\n    },\n    function (result, next) {\n      server = result;\n      // get the list of Hosted Services\n      stopServer(client, serverName, next);\n    },\n    function (next) {\n      deleteServer(client, serverName, next);\n    },\n    function (next) {\n      deleteOSDisk(client, server, next);\n    },\n    function (next) {\n      deleteOSBlob(client, server, next);\n    },\n    function (next) {\n      deleteHostedService(client, serverName, next);\n    }],\n    function (err) {\n      callback(err, true);\n    }\n  );\n};\n\ndeleteServer = function (client, serverName, callback) {\n  var path = client.subscriptionId + '/services/hostedservices/' + serverName;\n  path +=  '/deployments/' + serverName;\n\n  client._request({\n    method: 'DELETE',\n    path: path\n  }, function (err, body, res) {\n    if (err) {\n      return callback(err);\n    }\n    // poll azure for result of request\n    pollRequestStatus(client, res.headers['x-ms-request-id'], MINIMUM_POLL_INTERVAL, callback);\n  });\n};\n\ngetOSImage = exports.getOSImage = function (client, imageName, callback) {\n  var path = '/' + client.subscriptionId + '/services/images/' + imageName;\n\n  var onError = function (err) {\n    if (err.failCode === 'Item not found') {\n      callback(null, null);\n\n    } else {\n      callback(err);\n    }\n  };\n\n  client.get(path, function (err, body) {\n    return err\n      ? onError(err)\n      : callback(null, body);\n  });\n};\n\ndeleteOSDisk = function (client, server, callback) {\n  var diskName = null,\n    path;\n\n  if (server && server.RoleList && server.RoleList.Role) {\n    if (server.RoleList.Role.OSVirtualHardDisk) {\n      diskName = server.RoleList.Role.OSVirtualHardDisk.DiskName;\n    }\n  }\n\n  if (diskName === null) {\n    callback(null);\n    return;\n  }\n\n  // https://management.core.windows.net/<subscription-id>/services/disks/<disk-name>\n  path = client.subscriptionId + '/services/disks/' + diskName;\n\n  client._request({\n    method: 'DELETE',\n    path: path\n  }, function (err, body, res) {\n    if (err) {\n      return callback(err);\n    }\n    // poll azure for result of request\n    pollRequestStatus(client, res.headers['x-ms-request-id'], MINIMUM_POLL_INTERVAL, callback);\n  });\n};\n\ndeleteOSBlob = function (client, server, callback) {\n  var blob = null;\n\n  if (server && server.RoleList && server.RoleList.Role) {\n    if (server.RoleList.Role.OSVirtualHardDisk) {\n      blob = server.RoleList.Role.OSVirtualHardDisk.MediaLink;\n    }\n  }\n\n  if (blob === null) {\n    callback(null);\n    return;\n  }\n\n  getStorageInfoFromUri(blob, function (err, info) {\n    if (err) {\n      callback(err);\n    } else {\n      var storage = pkgcloud.storage.createClient(client.config);\n      storage.removeFile(info.container, info.file, function (err) {\n        callback(err);\n      });\n    }\n  });\n};\n\n/**\n * getServersFromServices\n * Retrieves all servers (VMs) from the list of services\n */\ngetServersFromServices = function (client, services, callback) {\n  var task = function (service, next) {\n    getServersFromService(client, service.ServiceName, function (err, servers) {\n      next(err, servers);\n    });\n  };\n\n  // Check each service for deployed VMs.\n  async.concat(services, task, function (err, servers) {\n    callback(err, servers);\n  });\n};\n\n/**\n * getServersFromServices\n * Retrieves all servers (VMs) from a Hosted Service\n */\ngetServersFromService = function (client, serviceName, callback) {\n  var servers = [];\n  getHostedServiceProperties(client, serviceName, function (err, result) {\n    if (err) {\n      return callback(err);\n    }\n\n    if (result && result.Deployments && result.Deployments.Deployment) {\n      if (isVM(result.Deployments.Deployment)) {\n        servers.push(result.Deployments.Deployment);\n      }\n    }\n\n    callback(null, servers);\n  });\n};\n\nisVM = function (deployment) {\n  if (deployment.RoleList && deployment.RoleList.Role) {\n    if (deployment.RoleList.Role.RoleType === 'PersistentVMRole') {\n      return true;\n    }\n  }\n\n  return false;\n};\n\n/**\n Get Hosted Service Properties\n GET https://management.core.windows.net/<subscription-id>/services/hostedservices/<service-name>?embed-detail=true\n A successful operation returns status code 200 (OK).\n */\ngetHostedServiceProperties = function (client, serviceName, callback) {\n  var path = client.subscriptionId + '/services/hostedservices/' + serviceName + '?embed-detail=true';\n\n  var onError = function (err) {\n    return err.failCode === 'Item not found'\n      ? callback(null, null)\n      : callback(err);\n  };\n\n  client.get(path, function (err, body) {\n    return err\n      ? onError(err)\n      : callback(null, body);\n  });\n};\n\n/**\n * pollRequestStatus\n * uses Get Operation Status\n * GET https://management.core.windows.net/<subscription-id>/operations/<request-id>\n */\n\npollRequestStatus = function (client, requestId, interval, callback) {\n  var checkStatus = function () {\n    var path = client.subscriptionId + '/operations/' + requestId;\n    client.get(path, function (err, body) {\n      if (err) {\n        return callback(err);\n      }\n      switch (body.Status) {\n        case 'InProgress':\n          setTimeout(checkStatus, interval);\n          break;\n        case 'Failed':\n          callback(body.Error);\n          break;\n        case 'Succeeded':\n          callback(null);\n          break;\n      }\n    });\n  };\n\n  checkStatus();\n};\n\ngetStorageInfoFromUri = exports.getStorageInfoFromUri = function (uri, callback) {\n  var u, tokens, path,\n    info = {};\n\n  u = URL.parse(uri);\n  if (!u.host || !u.path) {\n    return callback(errs.create({message: 'invalid Azure container or blob uri'}));\n  }\n\n  tokens = u.host.split('.');\n  info.storage = tokens[0];\n\n  path = u.path;\n  // if necessary, remove leading '/' from path\n  if (path.charAt(0) === '/') {\n    path = path.substr(1);\n  }\n  tokens = path.split('/');\n  info.container = tokens.shift();\n  info.file = tokens.join('/');\n\n  callback(null, info);\n};\n\n/**\n * createImage()\n * 1. Check if the server exists\n * 2. stop server if it is running\n * 3. capture server image\n */\ncreateImage = exports.createImage = function (client, serverName, targetImageName, callback) {\n  async.waterfall([\n    function (next) {\n      // stop the server\n      stopServer(client, serverName, next);\n    },\n    function (next) {\n      // capture the server image\n      captureServer(client, serverName, targetImageName, next);\n    }],\n    function (err) {\n      callback(err, targetImageName);\n    }\n  );\n};\n\ndeleteImage = function (client, image, callback) {\n  // https://management.core.windows.net/<subscription-id>/services/images/<image-name>\n  var path = client.subscriptionId + '/services/images/' + image.Name;\n\n  var configParams = {\n    LABEL: image.LABEL\n  };\n\n  makeTemplateRequest(client, path, 'deleteImage.xml', configParams, callback);\n};\n\n/**\n * destroyImage()\n * 1. get the requested image\n * 2. delete the image using its label\n */\ndestroyImage = exports.destroyImage = function (client, imageName, callback) {\n  async.waterfall([\n    function (next) {\n      // stop the server\n      client.getImage(client, imageName, next);\n    },\n    function (image, next) {\n      deleteImage(client, image, next);\n    }],\n    function (err) {\n      callback(err, imageName);\n    }\n  );\n};\n\ncreateVM = function (client, options, vmOptions, callback) {\n  // check OS type of image to determine if we are creating a linux or windows VM\n  switch (vmOptions.image.OS.toLowerCase()) {\n    case 'linux':\n      createLinuxVM(client, options, vmOptions, callback);\n      break;\n    case 'windows':\n      createWindowsVM(client, options, vmOptions, callback);\n      break;\n    default:\n      callback(errs.create({message: 'Unknown Image OS: ' + vmOptions.image.OS}));\n      break;\n  }\n};\n\ngetMediaLinkUrl = function (storageAccount, fileName) {\n  return 'http://' + storageAccount + '.' + STORAGE_ENDPOINT + '/vhd/' + fileName;\n};\n\ncreateEndpoints = function (ports) {\n  var endPoints = '',\n    template = templates.loadSync('endpoint.xml');\n\n  (ports || []).forEach(function (port) {\n    endPoints += templates.compileSync(template, port);\n  });\n  return endPoints;\n};\n\ncreateLinuxVM = function (client, options, vmOptions, callback) {\n  var path = client.subscriptionId + '/services/hostedservices/' + options.name + '/deployments';\n  var mediaLink = getMediaLinkUrl(client.config.storageAccount, options.name + '.vhd');\n  var label = new Buffer(options.name).toString('base64');\n\n  var configParams = {\n    NAME: options.name,\n    LABEL_BASE64: label,\n    USERNAME: options.username,\n    PASSWORD: options.password,\n    SSH_CERTIFICATE_FINGERPRINT: vmOptions.sshCertInfo.fingerprint,\n    PORT: options.ssh.port || '22',\n    LOCAL_PORT: options.ssh.localPort || '22',\n    ROLESIZE: options.flavor,\n    ENDPOINTS: createEndpoints(options.ports),\n    OS_SOURCE_IMAGE_NAME: vmOptions.image.Name,\n    OS_IMAGE_MEDIALINK: mediaLink\n  };\n\n  makeTemplateRequest(client, path, 'linuxDeployment.xml', configParams, callback);\n};\n\ncreateWindowsVM = function (client, options, vmOptions, callback) {\n  var path = client.subscriptionId + '/services/hostedservices/' + options.name + '/deployments';\n  var mediaLink = getMediaLinkUrl(client.config.storageAccount, options.name + '.vhd');\n  var label = new Buffer(options.name).toString('base64');\n\n  var configParams = {\n    NAME: options.name,\n    COMPUTER_NAME: options.computerName || options.name.slice(0, 15),\n    LABEL_BASE64: label,\n    PASSWORD: options.password,\n    ROLESIZE: options.flavor,\n    ENDPOINTS: createEndpoints(options.ports),\n    OS_SOURCE_IMAGE_NAME: vmOptions.image.Name,\n    OS_IMAGE_MEDIALINK: mediaLink\n  };\n\n  makeTemplateRequest(client, path, 'windowsDeployment.xml', configParams, callback);\n};\n\ncaptureServer = function (client, serverName, targetImageName, callback) {\n  // <subscription-id>/services/hostedservices/<service-name>/deployments/<deployment-name>/roleinstances/<role-name>/operations\n  var path = client.subscriptionId + '/services/hostedservices/' +\n    serverName + '/deployments/' +\n    serverName + '/roleInstances/' +\n    serverName + '/Operations';\n\n  var configParams = {\n    NAME: targetImageName\n  };\n\n  makeTemplateRequest(client, path, 'captureRole.xml', configParams, callback);\n};\n\nvalidateCreateOptions = function (options, config, callback) {\n  if (typeof options === 'function') {\n    options  = {};\n  }\n  options = options || {}; // no args\n\n  // check required options values\n  ['flavor', 'image', 'name', 'username', 'password', 'location'].forEach(function (member) {\n    if (!options[member]) {\n      errs.handle(\n        errs.create({ message: 'options.' + member + ' is a required argument.' }),\n        callback\n      );\n    }\n  });\n  callback();\n};\n\nexports._updateMinimumPollInterval = function(interval) {\n  MINIMUM_POLL_INTERVAL = interval;\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/azure/utils/constants.js":"﻿/**\n* Copyright (c) Microsoft.  All rights reserved.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n// Expose 'HeaderConstants'.\nexports = module.exports;\n\nvar Constants = {\n  /**\n  * Constant representing a kilobyte (Non-SI version).\n  *\n  * @const\n  * @type {string}\n  */\n  KB: 1024,\n\n  /**\n  * Constant representing a megabyte (Non-SI version).\n  *\n  * @const\n  * @type {string}\n  */\n  MB: 1024 * 1024,\n\n  /**\n  * Constant representing a gigabyte (Non-SI version).\n  *\n  * @const\n  * @type {string}\n  */\n  GB: 1024 * 1024 * 1024,\n\n  /**\n  * Buffer width used to copy data to output streams.\n  *\n  * @const\n  * @type {string}\n  */\n  BUFFER_COPY_LENGTH: 8 * 1024,\n\n  /**\n  * XML element for an access policy.\n  *\n  * @const\n  * @type {string}\n  */\n  ACCESS_POLICY: 'AccessPolicy',\n\n  /**\n  * XML element for authentication error details.\n  *\n  * @const\n  * @type {string}\n  */\n  AUTHENTICATION_ERROR_DETAIL: 'AuthenticationErrorDetail',\n\n  /**\n  * The changeset response delimiter.\n  *\n  * @const\n  * @type {string}\n  */\n  CHANGESET_DELIMITER: '--changesetresponse_',\n\n  /**\n  * XML element for a blob.\n  *\n  * @const\n  * @type {string}\n  */\n  BLOB_ELEMENT: 'Blob',\n\n  /**\n  * XML element for blob prefixes.\n  *\n  * @const\n  * @type {string}\n  */\n  BLOB_PREFIX_ELEMENT: 'BlobPrefix',\n\n  /**\n  * XML element for blobs.\n  *\n  * @const\n  * @type {string}\n  */\n  BLOBS_ELEMENT: 'Blobs',\n\n  /**\n  * XML element for a blob type.\n  *\n  * @const\n  * @type {string}\n  */\n  BLOB_TYPE_ELEMENT: 'BlobType',\n\n  /**\n  * Constant signaling a block blob.\n  *\n  * @const\n  * @type {string}\n  */\n  BLOCK_BLOB_VALUE: 'BlockBlob',\n\n  /**\n  * XML element for blocks.\n  *\n  * @const\n  * @type {string}\n  */\n  BLOCK_ELEMENT: 'Block',\n\n  /**\n  * XML element for a block list.\n  *\n  * @const\n  * @type {string}\n  */\n  BLOCK_LIST_ELEMENT: 'BlockList',\n\n  /**\n  * XML element for committed blocks.\n  *\n  * @const\n  * @type {string}\n  */\n  COMMITTED_BLOCKS_ELEMENT: 'CommittedBlocks',\n\n  /**\n  * XML element for committed blocks.\n  *\n  * @const\n  * @type {string}\n  */\n  COMMITTED_ELEMENT: 'Committed',\n\n  /**\n  * XML element for a container.\n  *\n  * @const\n  * @type {string}\n  */\n  CONTAINER_ELEMENT: 'Container',\n\n  /**\n  * XML element for containers.\n  *\n  * @const\n  * @type {string}\n  */\n  CONTAINERS_ELEMENT: 'Containers',\n\n  /**\n  * XML element for a queue.\n  *\n  * @const\n  * @type {string}\n  */\n  QUEUE_ELEMENT: 'Queue',\n\n  /**\n  * XML element for queues.\n  *\n  * @const\n  * @type {string}\n  */\n  QUEUES_ELEMENT: 'Queues',\n\n  /**\n  * XML element for QueueMessagesList.\n  *\n  * @const\n  * @type {string}\n  */\n  QUEUE_MESSAGES_LIST_ELEMENT: 'QueueMessagesList',\n\n  /**\n  * XML element for QueueMessage.\n  *\n  * @const\n  * @type {string}\n  */\n  QUEUE_MESSAGE_ELEMENT: 'QueueMessage',\n\n  /**\n  * The Uri path component to access the messages in a queue.\n  *\n  * @const\n  * @type {string}\n  */\n  Messages: 'messages',\n\n  /**\n  * XML element for a block list.\n  *\n  * @const\n  * @type {string}\n  */\n  MessageText_ELEMENT: 'MessageText',\n\n  /**\n  * XML element for a block list.\n  *\n  * @const\n  * @type {string}\n  */\n  QueueMessage_ELEMENT: 'QueueMessage',\n\n  /**\n  * XML element for MessageId.\n  *\n  * @const\n  * @type {string}\n  */\n  MESSAGE_ID_ELEMENT: 'MessageId',\n\n  /**\n  * XML element for InsertionTime.\n  *\n  * @const\n  * @type {string}\n  */\n  INSERTION_TIME_ELEMENT: 'InsertionTime',\n\n  /**\n  * XML element for ExpirationTime.\n  *\n  * @const\n  * @type {string}\n  */\n  EXPIRATION_TIME_ELEMENT: 'ExpirationTime',\n\n  /**\n  * XML element for PopReceipt.\n  *\n  * @const\n  * @type {string}\n  */\n  POP_RECEIPT_ELEMENT: 'PopReceipt',\n\n  /**\n  * XML element for TimeNextVisible.\n  *\n  * @const\n  * @type {string}\n  */\n  TIME_NEXT_VISIBLE_ELEMENT: 'TimeNextVisible',\n\n  /**\n  * XML element for DequeueCount.\n  *\n  * @const\n  * @type {string}\n  */\n  DEQUEUE_COUNT_ELEMENT: 'DequeueCount',\n\n  /**\n  * XML element for MessageText.\n  *\n  * @const\n  * @type {string}\n  */\n  MESSAGE_TEXT_ELEMENT: 'MessageText',\n\n  /**\n  * Default client side timeout, in milliseconds, for all service clients.\n  *\n  * @const\n  * @type {int}\n  */\n  DEFAULT_TIMEOUT_IN_MS: 90 * 1000,\n\n  /**\n  * XML element for delimiters.\n  *\n  * @const\n  * @type {string}\n  */\n  DELIMITER_ELEMENT: 'Delimiter',\n\n  /**\n  * An empty <code>String</code> to use for comparison.\n  *\n  * @const\n  * @type {string}\n  */\n  EMPTY_STRING: '',\n\n  /**\n  * XML element for page range end elements.\n  *\n  * @const\n  * @type {string}\n  */\n  END_ELEMENT: 'End',\n\n  /**\n  * XML element for error codes.\n  *\n  * @const\n  * @type {string}\n  */\n  ERROR_CODE: 'Code',\n\n  /**\n  * XML element for exception details.\n  *\n  * @const\n  * @type {string}\n  */\n  ERROR_EXCEPTION: 'ExceptionDetails',\n\n  /**\n  * XML element for exception messages.\n  *\n  * @const\n  * @type {string}\n  */\n  ERROR_EXCEPTION_MESSAGE: 'ExceptionMessage',\n\n  /**\n  * XML element for stack traces.\n  *\n  * @const\n  * @type {string}\n  */\n  ERROR_EXCEPTION_STACK_TRACE: 'StackTrace',\n\n  /**\n  * XML element for error messages.\n  *\n  * @const\n  * @type {string}\n  */\n  ERROR_MESSAGE: 'Message',\n\n  /**\n  * XML root element for errors.\n  *\n  * @const\n  * @type {string}\n  */\n  ERROR_ROOT_ELEMENT: 'Error',\n\n  /**\n  * XML element for the ETag.\n  *\n  * @const\n  * @type {string}\n  */\n  ETAG_ELEMENT: 'Etag',\n\n  /**\n  * XML element for the end time of an access policy.\n  *\n  * @const\n  * @type {string}\n  */\n  EXPIRY: 'Expiry',\n\n  /**\n  * Specifies HTTP.\n  *\n  * @const\n  * @type {string}\n  */\n  HTTP: 'http',\n\n  /**\n  * Specifies HTTPS.\n  *\n  * @const\n  * @type {string}\n  */\n  HTTPS: 'https',\n\n  /**\n  * XML attribute for IDs.\n  *\n  * @const\n  * @type {string}\n  */\n  ID: 'Id',\n\n  /**\n  * XML element for an invalid metadata name.\n  *\n  * @const\n  * @type {string}\n  */\n  INVALID_METADATA_NAME: 'x-ms-invalid-name',\n\n  /**\n  * XML element for the last modified date.\n  *\n  * @const\n  * @type {string}\n  */\n  LAST_MODIFIED_ELEMENT: 'Last-Modified',\n\n  /**\n  * XML element for the laassert.\n  *\n  * @const\n  * @type {string}\n  */\n  LATEST_ELEMENT: 'Latest',\n\n  /**\n  * XML element for the lease status.\n  *\n  * @const\n  * @type {string}\n  */\n  LEASE_STATUS_ELEMENT: 'LeaseStatus',\n\n  /**\n  * Constant signaling the blob is locked.\n  *\n  * @const\n  * @type {string}\n  */\n  LOCKED_VALUE: 'Locked',\n\n  /**\n  * XML element for a marker.\n  *\n  * @const\n  * @type {string}\n  */\n  MARKER_ELEMENT: 'Marker',\n\n  /**\n  * Number of default concurrent requests for parallel operation.\n  *\n  * @const\n  * @type {int}\n  */\n  MAXIMUM_SEGMENTED_RESULTS: 5000,\n\n  /**\n  * XML element for maximum results.\n  *\n  * @const\n  * @type {string}\n  */\n  MAX_RESULTS_ELEMENT: 'MaxResults',\n\n  /**\n  * Maximum number of shared access policy identifiers supported by server.\n  *\n  * @const\n  * @type {string}\n  */\n  MAX_SHARED_ACCESS_POLICY_IDENTIFIERS: 5,\n\n  /**\n  * The URI path part to access the messages in a queue.\n  *\n  * @const\n  * @type {string}\n  */\n  MESSAGES: 'messages',\n\n  /**\n  * XML element for the metadata.\n  *\n  * @const\n  * @type {string}\n  */\n  METADATA_ELEMENT: 'Metadata',\n\n  /**\n  * XML element for names.\n  *\n  * @const\n  * @type {string}\n  */\n  NAME_ELEMENT: 'Name',\n\n  /**\n  * XML element for the next marker.\n  *\n  * @const\n  * @type {string}\n  */\n  NEXT_MARKER_ELEMENT: 'NextMarker',\n\n  /**\n  * Constant signaling a page blob.\n  *\n  * @const\n  * @type {string}\n  */\n  PAGE_BLOB_VALUE: 'PageBlob',\n\n  /**\n  * XML element for page list elements.\n  *\n  * @const\n  * @type {string}\n  */\n  PAGE_LIST_ELEMENT: 'PageList',\n\n  /**\n  * XML element for a page range.\n  *\n  * @const\n  * @type {string}\n  */\n  PAGE_RANGE_ELEMENT: 'PageRange',\n\n  /**\n  * XML element for the permission of an access policy.\n  *\n  * @const\n  * @type {string}\n  */\n  PERMISSION: 'Permission',\n\n  /**\n  * XML element for a prefix.\n  *\n  * @const\n  * @type {string}\n  */\n  PREFIX_ELEMENT: 'Prefix',\n\n  /**\n  * XML element for properties.\n  *\n  * @const\n  * @type {string}\n  */\n  PROPERTIES: 'Properties',\n\n  /**\n  * XML element for a signed identifier.\n  *\n  * @const\n  * @type {string}\n  */\n  SIGNED_IDENTIFIER_ELEMENT: 'SignedIdentifier',\n\n  /**\n  * XML element for signed identifiers.\n  *\n  * @const\n  * @type {string}\n  */\n  SIGNED_IDENTIFIERS_ELEMENT: 'SignedIdentifiers',\n\n  /**\n  * XML element for storage service properties.\n  *\n  * @const\n  * @type {string}\n  */\n  STORAGE_SERVICE_PROPERTIES_ELEMENT: 'StorageServiceProperties',\n\n  /**\n  * XML element for logging.\n  *\n  * @const\n  * @type {string}\n  */\n  LOGGING_ELEMENT: 'Logging',\n\n  /**\n  * XML element for version.\n  *\n  * @const\n  * @type {string}\n  */\n  VERSION_ELEMENT: 'Version',\n\n  /**\n  * XML element for delete.\n  *\n  * @const\n  * @type {string}\n  */\n  DELETE_ELEMENT: 'Delete',\n\n  /**\n  * XML element for read.\n  *\n  * @const\n  * @type {string}\n  */\n  READ_ELEMENT: 'Read',\n\n  /**\n  * XML element for write.\n  *\n  * @const\n  * @type {string}\n  */\n  WRITE_ELEMENT: 'Write',\n\n  /**\n  * XML element for retention policy.\n  *\n  * @const\n  * @type {string}\n  */\n  RETENTION_POLICY_ELEMENT: 'RetentionPolicy',\n\n  /**\n  * XML element for enabled.\n  *\n  * @const\n  * @type {string}\n  */\n  ENABLED_ELEMENT: 'Enabled',\n\n  /**\n  * XML element for days.\n  *\n  * @const\n  * @type {string}\n  */\n  DAYS_ELEMENT: 'Days',\n\n  /**\n  * XML element for Metrics.\n  *\n  * @const\n  * @type {string}\n  */\n  METRICS_ELEMENT: 'Metrics',\n\n  /**\n  * XML element for IncludeAPIs.\n  *\n  * @const\n  * @type {string}\n  */\n  INCLUDE_APIS_ELEMENT: 'IncudeAPIs',\n\n  /**\n  * XML element for DefaultServiceVersion.\n  *\n  * @const\n  * @type {string}\n  */\n  DEFAULT_SERVICE_VERSION_ELEMENT: 'DefaultServiceVersion',\n\n  /**\n  * XML element for the block length.\n  *\n  * @const\n  * @type {string}\n  */\n  SIZE_ELEMENT: 'Size',\n\n  /**\n  * XML element for a snapshot.\n  *\n  * @const\n  * @type {string}\n  */\n  SNAPSHOT_ELEMENT: 'Snapshot',\n\n  /**\n  * XML element for the start time of an access policy.\n  *\n  * @const\n  * @type {string}\n  */\n  START: 'Start',\n\n  /**\n  * XML element for page range start elements.\n  *\n  * @const\n  * @type {string}\n  */\n  START_ELEMENT: 'Start',\n\n  /**\n  * XML element for uncommitted blocks.\n  *\n  * @const\n  * @type {string}\n  */\n  UNCOMMITTED_BLOCKS_ELEMENT: 'UncommittedBlocks',\n\n  /**\n  * XML element for uncommitted blocks.\n  *\n  * @const\n  * @type {string}\n  */\n  UNCOMMITTED_ELEMENT: 'Uncommitted',\n\n  /**\n  * Constant signaling the blob is unlocked.\n  *\n  * @const\n  * @type {string}\n  */\n  UNLOCKED_VALUE: 'Unlocked',\n\n  /**\n  * XML element for the URL.\n  *\n  * @const\n  * @type {string}\n  */\n  URL_ELEMENT: 'Url',\n\n  /**\n  * Marker for atom metadata.\n  *\n  * @const\n  * @type {string}\n  */\n  XML_METADATA_MARKER: '@',\n\n  /**\n  * Marker for atom value.\n  *\n  * @const\n  * @type {string}\n  */\n  XML_VALUE_MARKER: '#',\n\n  /**\n  * Marker for atom title tag.\n  *\n  * @const\n  * @type {string}\n  */\n  ATOM_TITLE_MARKER: 'title',\n\n  /**\n  * Marker for atom updated tag.\n  *\n  * @const\n  * @type {string}\n  */\n  ATOM_UPDATED_MARKER: 'updated',\n\n  /**\n  * Marker for atom author tag.\n  *\n  * @const\n  * @type {string}\n  */\n  ATOM_AUTHOR_MARKER: 'author',\n\n  /**\n  * Marker for atom id tag.\n  *\n  * @const\n  * @type {string}\n  */\n  ATOM_ID_MARKER: 'id',\n\n  /**\n  * Marker for atom content tag.\n  *\n  * @const\n  * @type {string}\n  */\n  ATOM_CONTENT_MARKER: 'content',\n\n  /**\n  * Marker for atom properties tag.\n  *\n  * @const\n  * @type {string}\n  */\n  ATOM_PROPERTIES_MARKER: 'properties',\n\n  /**\n  * Marker for atom queue description.\n  *\n  * @const\n  * @type {string}\n  */\n  ATOM_QUEUE_DESCRIPTION_MARKER: 'QueueDescription',\n\n  /**\n  * Marker for atom topic description.\n  *\n  * @const\n  * @type {string}\n  */\n  ATOM_TOPIC_DESCRIPTION_MARKER: 'TopicDescription',\n\n  /**\n  * Marker for atom rule description.\n  *\n  * @const\n  * @type {string}\n  */\n  ATOM_RULE_DESCRIPTION_MARKER: 'RuleDescription',\n\n  /**\n  * Marker for atom subscription description.\n  *\n  * @const\n  * @type {string}\n  */\n  ATOM_SUBSCRIPTION_DESCRIPTION_MARKER: 'SubscriptionDescription',\n\n  /**\n  * Defines constants for use with blob operations.\n  */\n  BlobConstants: {\n    /**\n    * The number of default concurrent requests for parallel operation.\n    *\n    * @const\n    * @type {string}\n    */\n    DEFAULT_CONCURRENT_REQUEST_COUNT: 1,\n\n    /**\n    * The default delimiter used to create a virtual directory structure of blobs.\n    *\n    * @const\n    * @type {string}\n    */\n    DEFAULT_DELIMITER: '/',\n\n    /**\n    * The default write pages size, in bytes, used by blob stream for page blobs.\n    *\n    * @const\n    * @type {string}\n    */\n    DEFAULT_MINIMUM_PAGE_STREAM_WRITE_IN_BYTES: 4 * 1024 * 1024,\n\n    /**\n    * The default minimum read size, in bytes, for streams.\n    *\n    * @const\n    * @type {string}\n    */\n    DEFAULT_MINIMUM_READ_SIZE_IN_BYTES: 4 * 1024 * 1024,\n\n    /**\n    * The default maximum size, in bytes, of a blob before it must be separated into blocks.\n    *\n    * @const\n    * @type {string}\n    */\n    DEFAULT_SINGLE_BLOB_PUT_THRESHOLD_IN_BYTES: 32 * 1024 * 1024,\n\n    /**\n    * The default write block size, in bytes, used by blob streams.\n    *\n    * @const\n    * @type {string}\n    */\n    DEFAULT_WRITE_BLOCK_SIZE_IN_BYTES: 4 * 1024 * 1024,\n\n    /**\n    * The maximum size, in bytes, of a blob before it must be separated into blocks.\n    *\n    * @const\n    * @type {string}\n    */\n    MAX_SINGLE_UPLOAD_BLOB_SIZE_IN_BYTES: 64 * 1024 * 1024,\n\n    /**\n    * The size of a page, in bytes, in a page blob.\n    *\n    * @const\n    * @type {string}\n    */\n    PAGE_SIZE: 512,\n\n    /**\n    * The service runtime major number for the minimum version requirement.\n    *\n    * @const\n    * @type {int}\n    */\n    SERVICERUNTIME_MIN_VERSION_MAJOR: 6,\n\n    /**\n    * The service runtime minor number for the minimum version requirement.\n    *\n    * @const\n    * @type {int}\n    */\n    SERVICERUNTIME_MIN_VERSION_MINOR: 11,\n\n    /**\n    * Blobs and container public access types.\n    *\n    * @const\n    * @enum {string}\n    */\n    BlobContainerPublicAccessType: {\n      OFF: null,\n      CONTAINER: 'container',\n      BLOB: 'blob'\n    },\n\n    ResourceTypeProperty: 'ResourceTypeProperty',\n\n    /**\n    * Resource types.\n    *\n    * @const\n    * @enum {string}\n    */\n    ResourceTypes: {\n      CONTAINER: 'c',\n      BLOB: 'b'\n    },\n\n    SharedAccessPermissionProperty: 'SharedAccessPermissionProperty',\n\n    /**\n    * Permission types\n    *\n    * @const\n    * @enum {string}\n    */\n    SharedAccessPermissions: {\n      READ: 'r',\n      WRITE: 'w',\n      DELETE: 'd',\n      LIST: 'l'\n    },\n\n    DEFAULT_PARALLEL_OPERATION_COUNT: 1,\n\n    /**\n    * Blobs listing details.\n    *\n    * @const\n    * @enum {string}\n    */\n    BlobListingDetails: {\n      SNAPSHOTS: 'snapshots',\n      METADATA: 'metadata',\n      UNCOMMITTEDBLOBS: 'uncommittedblobs'\n    },\n\n    /**\n    * Blob types\n    *\n    * @const\n    * @enum {string}\n    */\n    BlobTypes: {\n      BLOCK: 'BlockBlob',\n      PAGE: 'PageBlob'\n    },\n\n    /**\n    * Type of block list to retrieve\n    *\n    * @const\n    * @enum {string}\n    */\n    BlockListFilter: {\n      ALL: 'all',\n      COMMITTED: 'committed',\n      UNCOMMITTED: 'uncommitted'\n    },\n\n    /**\n    * Blob lease constants\n    *\n    * @const\n    * @enum {string}\n    */\n    LeaseOperation: {\n      ACQUIRE: 'acquire',\n      RENEW: 'renew',\n      RELEASE: 'release',\n      BREAK: 'break'\n    },\n\n    /**\n    * Put page write options\n    *\n    * @const\n    * @enum {string}\n    */\n    PageWriteOptions: {\n      UPDATE: 'update',\n      CLEAR: 'clear'\n    }\n  },\n\n  /**\n  * Defines constants for use with table storage.\n  *\n  * @const\n  * @type {string}\n  */\n  TableConstants: {\n    /**\n    * The next continuation row key token.\n    *\n    * @const\n    * @type {string}\n    */\n    CONTINUATION_NEXT_ROW_KEY: 'x-ms-continuation-nextrowkey',\n\n    /**\n    * The next continuation partition key token.\n    *\n    * @const\n    * @type {string}\n    */\n    CONTINUATION_NEXT_PARTITION: 'x-ms-continuation-nextpartitionkey',\n\n    /**\n    * The next continuation table name token.\n    *\n    * @const\n    * @type {string}\n    */\n    CONTINUATION_NEXT_TABLE_NAME: 'x-ms-continuation-nexttablename',\n\n    /**\n    * The next table name query string argument.\n    *\n    * @const\n    * @type {string}\n    */\n    NEXT_TABLE_NAME: 'NextTableName'\n  },\n\n  /**\n  * Defines constants for use with service bus.\n  *\n  * @const\n  * @type {string}\n  */\n  ServiceBusConstants: {\n    /**\n    * The maximum size in megabytes.\n    *\n    * @const\n    * @type {string}\n    */\n    MAX_SIZE_IN_MEGABYTES: 'MaxSizeInMegabytes',\n\n    /**\n    * The default message time to live.\n    *\n    * @const\n    * @type {string}\n    */\n    DEFAULT_MESSAGE_TIME_TO_LIVE: 'DefaultMessageTimeToLive',\n\n    /**\n    * The lock duration.\n    *\n    * @const\n    * @type {string}\n    */\n    LOCK_DURATION: 'LockDuration',\n\n    /**\n    * The indication if session is required or not.\n    *\n    * @const\n    * @type {string}\n    */\n    REQUIRES_SESSION: 'RequiresSession',\n\n    /**\n    * The indication if duplicate detection is required or not.\n    *\n    * @const\n    * @type {string}\n    */\n    REQUIRES_DUPLICATE_DETECTION: 'RequiresDuplicateDetection',\n\n    /**\n    * The indication if dead lettering on message expiration.\n    *\n    * @const\n    * @type {string}\n    */\n    DEAD_LETTERING_ON_MESSAGE_EXPIRATION: 'DeadLetteringOnMessageExpiration',\n\n    /**\n    * The indication if dead lettering on filter evaluation exceptions.\n    *\n    * @const\n    * @type {string}\n    */\n    DEAD_LETTERING_ON_FILTER_EVALUATION_EXCEPTIONS: 'DeadLetteringOnFilterEvaluationExceptions',\n\n    /**\n    * The history time window for duplicate detection.\n    *\n    * @const\n    * @type {string}\n    */\n    DUPLICATE_DETECTION_HISTORY_TIME_WINDOW: 'DuplicateDetectionHistoryTimeWindow',\n\n    /**\n    * The maximum number of subscriptions per topic.\n    *\n    * @const\n    * @type {string}\n    */\n    MAX_SUBSCRIPTIONS_PER_TOPIC: 'MaxSubscriptionsPerTopic',\n\n    /**\n    * The maximum amount of sql filters per topic.\n    *\n    * @const\n    * @type {string}\n    */\n    MAX_SQL_FILTERS_PER_TOPIC: 'MaxSqlFiltersPerTopic',\n\n    /**\n    * The maximum amount of correlation filters per topic.\n    *\n    * @const\n    * @type {string}\n    */\n    MAX_CORRELATION_FILTERS_PER_TOPIC: 'MaxCorrelationFiltersPerTopic',\n\n    /**\n    * The maximum delivery count.\n    *\n    * @const\n    * @type {string}\n    */\n    MAX_DELIVERY_COUNT: 'MaxDeliveryCount',\n\n    /**\n    * Indicates if the queue has enabled batch operations.\n    *\n    * @const\n    * @type {string}\n    */\n    ENABLE_BATCHED_OPERATIONS: 'EnableBatchedOperations',\n\n    /**\n    * Indicates the default rule description.\n    *\n    * @const\n    * @type {string}\n    */\n    DEFAULT_RULE_DESCRIPTION: 'DefaultRuleDescription',\n\n    /**\n    * The queue's size in bytes.\n    *\n    * @const\n    * @type {string}\n    */\n    SIZE_IN_BYTES: 'SizeInBytes',\n\n    /**\n    * The queue's message count.\n    *\n    * @const\n    * @type {string}\n    */\n    MESSAGE_COUNT: 'MessageCount',\n\n    /**\n    * The default rule name.\n    *\n    * @const\n    * @type {string}\n    */\n    DEFAULT_RULE_NAME: '$Default',\n\n    /**\n    * The wrap access token.\n    *\n    * @const\n    * @type {string}\n    */\n    WRAP_ACCESS_TOKEN: 'wrap_access_token',\n\n    /**\n    * The wrap access token expires utc.\n    *\n    * @const\n    * @type {string}\n    */\n    WRAP_ACCESS_TOKEN_EXPIRES_UTC: 'wrap_access_token_expires_utc',\n\n    /**\n    * The wrap access token expires in.\n    *\n    * @const\n    * @type {string}\n    */\n    WRAP_ACCESS_TOKEN_EXPIRES_IN: 'wrap_access_token_expires_in'\n  },\n\n  /**\n  * Defines constants for use with Service Runtime.\n  *\n    * @const\n    * @type {string}\n    */\n  ServiceRuntimeConstants: {\n    /**\n    * The fault domain property.\n    *\n    * @const\n    * @type {string}\n    */\n    FAULT_DOMAIN: 'faultDomain',\n\n    /**\n    * The update domain property.\n    *\n    * @const\n    * @type {string}\n    */\n    UPDATE_DOMAIN: 'updateDomain',\n\n    /**\n    * The runtime server endpoint element.\n    *\n    * @const\n    * @type {string}\n    */\n    RUNTIME_SERVER_ENDPOINT: 'RuntimeServerEndpoint',\n\n    /**\n    * The runtime server endpoints element.\n    *\n    * @const\n    * @type {string}\n    */\n    RUNTIME_SERVER_ENDPOINTS: 'RuntimeServerEndpoints',\n\n    /**\n    * The current instance element.\n    *\n    * @const\n    * @type {string}\n    */\n    CURRENT_INSTANCE: 'CurrentInstance',\n\n    /**\n    * The configuration settings element.\n    *\n    * @const\n    * @type {string}\n    */\n    CONFIGURATION_SETTINGS: 'ConfigurationSettings',\n\n    /**\n    * The configuration setting element.\n    *\n    * @const\n    * @type {string}\n    */\n    CONFIGURATION_SETTING: 'ConfigurationSetting',\n\n    /**\n    * The local resources element.\n    *\n    * @const\n    * @type {string}\n    */\n    LOCAL_RESOURCES: 'LocalResources',\n\n    /**\n    * The local resource element.\n    *\n    * @const\n    * @type {string}\n    */\n    LOCAL_RESOURCE: 'LocalResource',\n\n    /**\n    * The deployment element.\n    *\n    * @const\n    * @type {string}\n    */\n    DEPLOYMENT: 'Deployment',\n\n    /**\n    * The emulated element.\n    *\n    * @const\n    * @type {string}\n    */\n    EMULATED: 'emulated',\n\n    /**\n    * The id element.\n    *\n    * @const\n    * @type {string}\n    */\n    DEPLOYMENT_ID: 'id',\n\n    /**\n    * The endpoints element.\n    *\n    * @const\n    * @type {string}\n    */\n    ENDPOINTS: 'Endpoints',\n\n    /**\n    * The endpoint element.\n    *\n    * @const\n    * @type {string}\n    */\n    ENDPOINT: 'Endpoint',\n\n    /**\n    * The roles element.\n    *\n    * @const\n    * @type {string}\n    */\n    ROLES: 'Roles',\n\n    /**\n    * The role element.\n    *\n    * @const\n    * @type {string}\n    */\n    ROLE: 'Role',\n\n    /**\n    * The instances element.\n    *\n    * @const\n    * @type {string}\n    */\n    INSTANCES: 'Instances',\n\n    /**\n    * The instance element.\n    *\n    * @const\n    * @type {string}\n    */\n    INSTANCE: 'Instance',\n\n    /**\n    * The role environment path element.\n    *\n    * @const\n    * @type {string}\n    */\n    ROLE_ENVIRONMENT_PATH: 'RoleEnvironmentPath',\n\n    /**\n    * The role environment changed event.\n    *\n    * @const\n    * @type {string}\n    */\n    CHANGED: 'changed',\n\n    /**\n    * The role environment changing event.\n    *\n    * @const\n    * @type {string}\n    */\n    CHANGING: 'changing',\n\n    /**\n    * The role environment stopping event.\n    *\n    * @const\n    * @type {string}\n    */\n    STOPPING: 'stopping',\n\n    /**\n    * The ready event.\n    *\n    * @const\n    * @type {string}\n    */\n    READY: 'ready',\n\n    /**\n    * The expected state element.\n    *\n    * @const\n    * @type {string}\n    */\n    EXPECTED_STATE: 'ExpectedState',\n\n    /**\n    * The incarnation element.\n    *\n    * @const\n    * @type {string}\n    */\n    INCARNATION: 'Incarnation',\n\n    /**\n    * The current state endpoint element.\n    *\n    * @const\n    * @type {string}\n    */\n    CURRENT_STATE_ENDPOINT: 'CurrentStateEndpoint',\n\n    /**\n    * The deadline element.\n    *\n    * @const\n    * @type {string}\n    */\n    DEADLINE: 'Deadline',\n\n    /**\n    * The current state element.\n    *\n    * @const\n    * @type {string}\n    */\n    CURRENT_STATE: 'CurrentState',\n\n    /**\n    * The status lease element.\n    *\n    * @const\n    * @type {string}\n    */\n    STATUS_LEASE: 'StatusLease',\n\n    /**\n    * The status lease element.\n    *\n    * @const\n    * @type {string}\n    */\n    STATUS: 'Status',\n\n    /**\n    * The status detail element.\n    *\n    * @const\n    * @type {string}\n    */\n    STATUS_DETAIL: 'StatusDetail',\n\n    /**\n    * The expiration element.\n    *\n    * @const\n    * @type {string}\n    */\n    EXPIRATION: 'Expiration',\n\n    /**\n    * The client identifier element.\n    *\n    * @const\n    * @type {string}\n    */\n    CLIENT_ID: 'ClientId',\n\n    /**\n    * The acquire element.\n    *\n    * @const\n    * @type {string}\n    */\n    ACQUIRE: 'Acquire',\n\n    /**\n    * The release element.\n    *\n    * @const\n    * @type {string}\n    */\n    RELEASE: 'Release',\n\n    /**\n    * The different role instance target statuses.\n    *\n    * @const\n    * @type {string}\n    */\n    RoleInstanceStatus: {\n      /**\n      * The ready status.\n      *\n      * @const\n      * @type {string}\n      */\n      READY: 'Ready',\n\n      /**\n      * The busy status.\n      *\n      * @const\n      * @type {string}\n      */\n      BUSY: 'Busy'\n    },\n\n    /**\n    * The different role statuses.\n    *\n    * @const\n    * @type {string}\n    */\n    RoleStatus: {\n      /**\n      * The started event.\n      *\n      * @const\n      * @type {string}\n      */\n      STARTED: 'Started',\n\n      /**\n      * The stopped event.\n      *\n      * @const\n      * @type {string}\n      */\n      STOPPED: 'Stopped',\n\n      /**\n      * The busy event.\n      *\n      * @const\n      * @type {string}\n      */\n      BUSY: 'Busy',\n\n      /**\n      * The recycle event.\n      *\n      * @const\n      * @type {string}\n      */\n      RECYCLE: 'Recycle'\n    }\n  },\n\n  /**\n  * Defines constants for use with HTTP headers.\n  */\n  HeaderConstants: {\n    /**\n    * The accept ranges header.\n    *\n    * @const\n    * @type {string}\n    */\n    ACCEPT_RANGES: 'accept_ranges',\n\n    /**\n    * The content transfer encoding header.\n    *\n    * @const\n    * @type {string}\n    */\n    CONTENT_TRANSFER_ENCODING_HEADER: 'content-transfer-encoding',\n\n    /**\n    * The transfer encoding header.\n    *\n    * @const\n    * @type {string}\n    */\n    TRANSFER_ENCODING_HEADER: 'transfer-encoding',\n\n    /**\n    * The server header.\n    *\n    * @const\n    * @type {string}\n    */\n    SERVER_HEADER: 'server',\n\n    /**\n    * The location header.\n    *\n    * @const\n    * @type {string}\n    */\n    LOCATION_HEADER: 'location',\n\n    /**\n    * The data service version.\n    *\n    * @const\n    * @type {string}\n    */\n    DATA_SERVICE_VERSION: 'dataserviceversion',\n\n    /**\n    * The maximum data service version.\n    *\n    * @const\n    * @type {string}\n    */\n    MAX_DATA_SERVICE_VERSION: 'maxdataserviceversion',\n\n    /**\n    * The master Windows Azure Storage header prefix.\n    *\n    * @const\n    * @type {string}\n    */\n    PREFIX_FOR_STORAGE_HEADER: 'x-ms-',\n\n    /**\n    * The header that specifies the approximate message count of a queue.\n    *\n    * @const\n    * @type {string}\n    */\n    APPROXIMATE_MESSAGES_COUNT: 'x-ms-approximate-messages-count',\n\n    /**\n    * The Authorization header.\n    *\n    * @const\n    * @type {string}\n    */\n    AUTHORIZATION: 'authorization',\n\n    /**\n    * The header that specifies blob content MD5.\n    *\n    * @const\n    * @type {string}\n    */\n    BLOB_CONTENT_MD5_HEADER: 'x-ms-blob-content-md5',\n\n    /**\n    * The header that specifies public access to blobs.\n    *\n    * @const\n    * @type {string}\n    */\n    BLOB_PUBLIC_ACCESS_HEADER: 'x-ms-blob-public-access',\n\n    /**\n    * The header for the blob type.\n    *\n    * @const\n    * @type {string}\n    */\n    BLOB_TYPE_HEADER: 'x-ms-blob-type',\n\n    /**\n    * Specifies the block blob type.\n    *\n    * @const\n    * @type {string}\n    */\n    BLOCK_BLOB: 'blockblob',\n\n    /**\n    * The CacheControl header.\n    *\n    * @const\n    * @type {string}\n    */\n    CACHE_CONTROL: 'cache-control',\n\n    /**\n    * The header that specifies blob caching control.\n    *\n    * @const\n    * @type {string}\n    */\n    CACHE_CONTROL_HEADER: 'x-ms-blob-cache-control',\n\n    /**\n    * The ContentID header.\n    *\n    * @const\n    * @type {string}\n    */\n    CONTENT_ID: 'content-id',\n\n    /**\n    * The ContentEncoding header.\n    *\n    * @const\n    * @type {string}\n    */\n    CONTENT_ENCODING: 'content-encoding',\n\n    /**\n    * The header that specifies blob content encoding.\n    *\n    * @const\n    * @type {string}\n    */\n    CONTENT_ENCODING_HEADER: 'x-ms-blob-content-encoding',\n\n    /**\n    * The ContentLangauge header.\n    *\n    * @const\n    * @type {string}\n    */\n    CONTENT_LANGUAGE: 'content-language',\n\n    /**\n    * The header that specifies blob content language.\n    *\n    * @const\n    * @type {string}\n    */\n    CONTENT_LANGUAGE_HEADER: 'x-ms-blob-content-language',\n\n    /**\n    * The ContentLength header.\n    *\n    * @const\n    * @type {string}\n    */\n    CONTENT_LENGTH: 'content-length',\n\n    /**\n    * The header that specifies blob content length.\n    *\n    * @const\n    * @type {string}\n    */\n    CONTENT_LENGTH_HEADER: 'x-ms-blob-content-length',\n\n    /**\n    * The ContentMD5 header.\n    *\n    * @const\n    * @type {string}\n    */\n    CONTENT_MD5: 'content-md5',\n\n    /**\n    * The ContentRange header.\n    *\n    * @const\n    * @type {string}\n    */\n    CONTENT_RANGE: 'cache-range',\n\n    /**\n    * The ContentType header.\n    *\n    * @const\n    * @type {string}\n    */\n    CONTENT_TYPE: 'content-type',\n\n    /**\n    * The header that specifies blob content type.\n    *\n    * @const\n    * @type {string}\n    */\n    CONTENT_TYPE_HEADER: 'x-ms-blob-content-type',\n\n    /**\n    * The header for copy source.\n    *\n    * @const\n    * @type {string}\n    */\n    COPY_SOURCE_HEADER: 'x-ms-copy-source',\n\n    /**\n    * The header that specifies the date.\n    *\n    * @const\n    * @type {string}\n    */\n    DATE: 'date',\n\n    /**\n    * The header that specifies the date.\n    *\n    * @const\n    * @type {string}\n    */\n    DATE_HEADER: 'x-ms-date',\n\n    /**\n    * The header to delete snapshots.\n    *\n    * @const\n    * @type {string}\n    */\n    DELETE_SNAPSHOT_HEADER: 'x-ms-delete-snapshots',\n\n    /**\n    * The ETag header.\n    *\n    * @const\n    * @type {string}\n    */\n    ETAG: 'etag',\n\n    /**\n    * The IfMatch header.\n    *\n    * @const\n    * @type {string}\n    */\n    IF_MATCH: 'if-match',\n\n    /**\n    * The IfModifiedSince header.\n    *\n    * @const\n    * @type {string}\n    */\n    IF_MODIFIED_SINCE: 'if-modified-since',\n\n    /**\n    * The IfNoneMatch header.\n    *\n    * @const\n    * @type {string}\n    */\n    IF_NONE_MATCH: 'if-none-match',\n\n    /**\n    * The IfUnmodifiedSince header.\n    *\n    * @const\n    * @type {string}\n    */\n    IF_UNMODIFIED_SINCE: 'if-unmodified-since',\n\n    /**\n    * Specifies snapshots are to be included.\n    *\n    * @const\n    * @type {string}\n    */\n    INCLUDE_SNAPSHOTS_VALUE: 'include',\n\n    /**\n    * The header that specifies lease ID.\n    *\n    * @const\n    * @type {string}\n    */\n    LEASE_ID_HEADER: 'x-ms-lease-id',\n\n    /**\n    * The header that specifies the source lease ID.\n    *\n    * @const\n    * @type {string}\n    */\n    SOURCE_LEASE_ID_HEADER: 'x-ms-source-lease-id',\n\n    /**\n    * The header that specifies lease time.\n    *\n    * @const\n    * @type {string}\n    */\n    LEASE_TIME_HEADER: 'x-ms-lease-time',\n\n    /**\n    * The header that specifies lease status.\n    *\n    * @const\n    * @type {string}\n    */\n    LEASE_STATUS: 'x-ms-lease-status',\n\n    /**\n    * Specifies the page blob type.\n    *\n    * @const\n    * @type {string}\n    */\n    PAGE_BLOB: 'PageBlob',\n\n    /**\n    * The header that specifies page write mode.\n    *\n    * @const\n    * @type {string}\n    */\n    PAGE_WRITE: 'x-ms-page-write',\n\n    /**\n    * The header prefix for metadata.\n    *\n    * @const\n    * @type {string}\n    */\n    PREFIX_FOR_STORAGE_METADATA: 'x-ms-meta-',\n\n    /**\n    * The header prefix for properties.\n    *\n    * @const\n    * @type {string}\n    */\n    PREFIX_FOR_STORAGE_PROPERTIES: 'x-ms-prop-',\n\n    /**\n    * The Range header.\n    *\n    * @const\n    * @type {string}\n    */\n    RANGE: 'Range',\n\n    /**\n    * The header that specifies if the request will populate the ContentMD5 header for range gets.\n    *\n    * @const\n    * @type {string}\n    */\n    RANGE_GET_CONTENT_MD5: 'x-ms-range-get-content-md5',\n\n    /**\n    * The format string for specifying ranges.\n    *\n    * @const\n    * @type {string}\n    */\n    RANGE_HEADER_FORMAT: 'bytes:%d-%d',\n\n    /**\n    * The header that indicates the request ID.\n    *\n    * @const\n    * @type {string}\n    */\n    REQUEST_ID_HEADER: 'x-ms-request-id',\n\n    /**\n    * The header for specifying the sequence number.\n    *\n    * @const\n    * @type {string}\n    */\n    SEQUENCE_NUMBER: 'x-ms-blob-sequence-number',\n\n    /**\n    * The header for the blob content length.\n    *\n    * @const\n    * @type {string}\n    */\n    SIZE: 'x-ms-blob-content-length',\n\n    /**\n    * The header for snapshots.\n    *\n    * @const\n    * @type {string}\n    */\n    SNAPSHOT_HEADER: 'x-ms-snapshot',\n\n    /**\n    * Specifies only snapshots are to be included.\n    *\n    * @const\n    * @type {string}\n    */\n    SNAPSHOTS_ONLY_VALUE: 'only',\n\n    /**\n    * The header for the If-Match condition.\n    *\n    * @const\n    * @type {string}\n    */\n    SOURCE_IF_MATCH_HEADER: 'x-ms-source-if-match',\n\n    /**\n    * The header for the If-Modified-Since condition.\n    *\n    * @const\n    * @type {string}\n    */\n    SOURCE_IF_MODIFIED_SINCE_HEADER: 'x-ms-source-if-modified-since',\n\n    /**\n    * The header for the If-None-Match condition.\n    *\n    * @const\n    * @type {string}\n    */\n    SOURCE_IF_NONE_MATCH_HEADER: 'x-ms-source-if-none-match',\n\n    /**\n    * The header for the If-Unmodified-Since condition.\n    *\n    * @const\n    * @type {string}\n    */\n    SOURCE_IF_UNMODIFIED_SINCE_HEADER: 'x-ms-source-if-unmodified-since',\n\n    /**\n    * The header for data ranges.\n    *\n    * @const\n    * @type {string}\n    */\n    STORAGE_RANGE_HEADER: 'x-ms-range',\n\n    /**\n    * The header for storage version.\n    *\n    * @const\n    * @type {string}\n    */\n    STORAGE_VERSION_HEADER: 'x-ms-version',\n\n    /**\n    * The current storage version header value.\n    *\n    * @const\n    * @type {string}\n    */\n    TARGET_STORAGE_VERSION: '2011-08-18',\n\n    /**\n    * The UserAgent header.\n    *\n    * @const\n    * @type {string}\n    */\n    USER_AGENT: 'user-agent',\n\n    /**\n    * Specifies the value to use for UserAgent header.\n    *\n    * @const\n    * @type {string}\n    */\n    USER_AGENT_PREFIX: 'WA-Storage',\n\n    /**\n    * The pop receipt header.\n    *\n    * @const\n    * @type {string}\n    */\n    POP_RECEIPT_HEADER: 'x-ms-popreceipt',\n\n    /**\n    * The time next visibile header.\n    *\n    * @const\n    * @type {string}\n    */\n    TIME_NEXT_VISIBLE_HEADER: 'x-ms-time-next-visible',\n\n    /**\n    * The approximate message counter header.\n    *\n    * @const\n    * @type {string}\n    */\n    APPROXIMATE_MESSAGE_COUNT_HEADER: 'x-ms-approximate-message-count',\n\n    /**\n    * The lease action header.\n    *\n    * @const\n    * @type {string}\n    */\n    LEASE_ACTION_HEADER: 'x-ms-lease-action',\n\n    /**\n    * The accept header.\n    *\n    * @const\n    * @type {string}\n    */\n    ACCEPT_HEADER: 'accept',\n\n    /**\n    * The accept charset header.\n    *\n    * @const\n    * @type {string}\n    */\n    ACCEPT_CHARSET_HEADER: 'Accept-Charset',\n\n    /**\n    * The host header.\n    *\n    * @const\n    * @type {string}\n    */\n    HOST_HEADER: 'host',\n\n    /**\n    * The correlation identifier header.\n    *\n    * @const\n    * @type {string}\n    */\n    CORRELATION_ID_HEADER: 'x-ms-correlation-id',\n\n    /**\n    * The group identifier header.\n    *\n    * @const\n    * @type {string}\n    */\n    GROUP_ID_HEADER: 'x-ms-group-id',\n\n    /**\n    * The label header.\n    *\n    * @const\n    * @type {string}\n    */\n    LABEL_HEADER: 'x-ms-label',\n\n    /**\n    * The reply to header.\n    *\n    * @const\n    * @type {string}\n    */\n    REPLY_TO_HEADER: 'x-ms-reply_to',\n\n    /**\n    * The ttl header.\n    *\n    * @const\n    * @type {string}\n    */\n    TTL_HEADER: 'x-ms-ttl',\n\n    /**\n    * The to header.\n    *\n    * @const\n    * @type {string}\n    */\n    TO_HEADER: 'x-ms-to',\n\n    /**\n    * The scheduled enqueue time header.\n    *\n    * @const\n    * @type {string}\n    */\n    SCHEDULED_ENQUEUE_TIME_HEADER: 'x-ms-scheduled-enqueue-time',\n\n    /**\n    * The broker properties for service bus queue messages.\n    *\n    * @const\n    * @type {string}\n    */\n    BROKER_PROPERTIES_HEADER: 'brokerproperties'\n  },\n\n  QueryStringConstants: {\n    /**\n    * The Comp value.\n    *\n    * @const\n    * @type {string}\n    */\n    COMP: 'comp',\n\n    /**\n    * The Res Type.\n    *\n    * @const\n    * @type {string}\n    */\n    RESTYPE: 'restype',\n\n    /**\n    * The Snapshot value.\n    *\n    * @const\n    * @type {string}\n    */\n    SNAPSHOT: 'snapshot',\n\n    /**\n    * The timeout value.\n    *\n    * @const\n    * @type {string}\n    */\n    TIMEOUT: 'timeout',\n\n    /**\n    * The signed start time query string argument for shared access signature.\n    *\n    * @const\n    * @type {string}\n    */\n    SIGNED_START: 'st',\n\n    /**\n    * The signed expiry time query string argument for shared access signature.\n    *\n    * @const\n    * @type {string}\n    */\n    SIGNED_EXPIRY: 'se',\n\n    /**\n    * The signed resource query string argument for shared access signature.\n    *\n    * @const\n    * @type {string}\n    */\n    SIGNED_RESOURCE: 'sr',\n\n    /**\n    * The signed permissions query string argument for shared access signature.\n    *\n    * @const\n    * @type {string}\n    */\n    SIGNED_PERMISSIONS: 'sp',\n\n    /**\n    * The signed identifier query string argument for shared access signature.\n    *\n    * @const\n    * @type {string}\n    */\n    SIGNED_IDENTIFIER: 'si',\n\n    /**\n    * The signature query string argument for shared access signature.\n    *\n    * @const\n    * @type {string}\n    */\n    SIGNATURE: 'sig',\n\n    /**\n    * The block identifier query string argument for blob service.\n    *\n    * @const\n    * @type {string}\n    */\n    BLOCK_ID: 'blockid',\n\n    /**\n    * The block list type query string argument for blob service.\n    *\n    * @const\n    * @type {string}\n    */\n    BLOCK_LIST_TYPE: 'blocklisttype',\n\n    /**\n    * The prefix query string argument for listing operations.\n    *\n    * @const\n    * @type {string}\n    */\n    PREFIX: 'prefix',\n\n    /**\n    * The marker query string argument for listing operations.\n    *\n    * @const\n    * @type {string}\n    */\n    MARKER: 'marker',\n\n    /**\n    * The maxresults query string argument for listing operations.\n    *\n    * @const\n    * @type {string}\n    */\n    MAX_RESULTS: 'maxresults',\n\n    /**\n    * The delimiter query string argument for listing operations.\n    *\n    * @const\n    * @type {string}\n    */\n    DELIMITER: 'delimiter',\n\n    /**\n    * The include query string argument for listing operations.\n    *\n    * @const\n    * @type {string}\n    */\n    INCLUDE: 'include',\n\n    /**\n    * The peekonly query string argument for queue service.\n    *\n    * @const\n    * @type {string}\n    */\n    PEEK_ONLY: 'peekonly',\n\n    /**\n    * The numofmessages query string argument for queue service.\n    *\n    * @const\n    * @type {string}\n    */\n    NUM_OF_MESSAGES: 'numofmessages',\n\n    /**\n    * The popreceipt query string argument for queue service.\n    *\n    * @const\n    * @type {string}\n    */\n    POP_RECEIPT: 'popreceipt',\n\n    /**\n    * The visibilitytimeout query string argument for queue service.\n    *\n    * @const\n    * @type {string}\n    */\n    VISIBILITY_TIMEOUT: 'visibilitytimeout',\n\n    /**\n    * The messagettl query string argument for queue service.\n    *\n    * @const\n    * @type {string}\n    */\n    MESSAGE_TTL: 'messagettl',\n\n    /**\n    * The select query string argument.\n    *\n    * @const\n    * @type {string}\n    */\n    SELECT: '$select',\n\n    /**\n    * The filter query string argument.\n    *\n    * @const\n    * @type {string}\n    */\n    FILTER: '$filter',\n\n    /**\n    * The top query string argument.\n    *\n    * @const\n    * @type {string}\n    */\n    TOP: '$top',\n\n    /**\n    * The skip query string argument.\n    *\n    * @const\n    * @type {string}\n    */\n    SKIP: '$skip',\n\n    /**\n    * The next partition key query string argument for table service.\n    *\n    * @const\n    * @type {string}\n    */\n    NEXT_PARTITION_KEY: 'NextPartitionKey',\n\n    /**\n    * The next row key query string argument for table service.\n    *\n    * @const\n    * @type {string}\n    */\n    NEXT_ROW_KEY: 'NextRowKey',\n\n    /**\n    * The lock identifier for service bus messages.\n    *\n    * @const\n    * @type {string}\n    */\n    LOCK_ID: 'lockid'\n  },\n\n  HttpConstants: {\n    /**\n    * Http Verbs\n    *\n    * @const\n    * @enum {string}\n    */\n    HttpVerbs: {\n      PUT: 'PUT',\n      GET: 'GET',\n      DELETE: 'DELETE',\n      POST: 'POST',\n      MERGE: 'MERGE',\n      HEAD: 'HEAD'\n    },\n\n    /**\n    * Response codes.\n    *\n    * @const\n    * @enum {int}\n    */\n    HttpResponseCodes: {\n      OK_CODE: 200,\n      CREATED_CODE: 201,\n      ACCEPTED_CODE: 202,\n      NO_CONTENT_CODE: 204,\n      PARTIAL_CONTENT: 206,\n      BAD_REQUEST_CODE: 400,\n      FORBIDDEN_CODE: 403,\n      NOT_FOUND_CODE: 404,\n      CONFLICT_CODE: 409,\n      LENGTH_REQUIRED_CODE: 411,\n      PRECONDITION_FAILED_CODE: 412\n    }\n  },\n\n  BlobErrorCodeStrings: {\n    INVALID_BLOCK_ID: 'InvalidBlockId',\n    BLOB_NOT_FOUND: 'BlobNotFound',\n    BLOB_ALREADY_EXISTS: 'BlobAlreadyExists',\n    CONTAINER_ALREADY_EXISTS: 'ContainerAlreadyExists',\n    INVALID_BLOB_OR_BLOCK: 'InvalidBlobOrBlock',\n    INVALID_BLOCK_LIST: 'InvalidBlockList'\n  },\n\n  ServiceBusErrorCodeStrings: {\n    QUEUE_NOT_FOUND: 'QueueNotFound',\n    TOPIC_NOT_FOUND: 'TopicNotFound',\n    SUBSCRIPTION_NOT_FOUND: 'SubscriptionNotFound',\n    RULE_NOT_FOUND: 'RuleNotFound'\n  },\n\n  QueueErrorCodeStrings: {\n    QUEUE_NOT_FOUND: 'QueueNotFound',\n    QUEUE_DISABLED: 'QueueDisabled',\n    QUEUE_ALREADY_EXISTS: 'QueueAlreadyExists',\n    QUEUE_NOT_EMPTY: 'QueueNotEmpty',\n    QUEUE_BEING_DELETED: 'QueueBeingDeleted',\n    POP_RECEIPT_MISMATCH: 'PopReceiptMismatch',\n    INVALID_PARAMETER: 'InvalidParameter',\n    MESSAGE_NOT_FOUND: 'MessageNotFound',\n    MESSAGE_TOO_LARGE: 'MessageTooLarge',\n    INVALID_MARKER: 'InvalidMarker'\n  },\n\n  StorageErrorCodeStrings: {\n    UNSUPPORTED_HTTP_VERB: 'UnsupportedHttpVerb',\n    MISSING_CONTENT_LENGTH_HEADER: 'MissingContentLengthHeader',\n    MISSING_REQUIRED_HEADER: 'MissingRequiredHeader',\n    MISSING_REQUIRED_XML_NODE: 'MissingRequiredXmlNode',\n    UNSUPPORTED_HEADER: 'UnsupportedHeader',\n    UNSUPPORTED_XML_NODE: 'UnsupportedXmlNode',\n    INVALID_HEADER_VALUE: 'InvalidHeaderValue',\n    INVALID_XML_NODE_VALUE: 'InvalidXmlNodeValue',\n    MISSING_REQUIRED_QUERY_PARAMETER: 'MissingRequiredQueryParameter',\n    UNSUPPORTED_QUERY_PARAMETER: 'UnsupportedQueryParameter',\n    INVALID_QUERY_PARAMETER_VALUE: 'InvalidQueryParameterValue',\n    OUT_OF_RANGE_QUERY_PARAMETER_VALUE: 'OutOfRangeQueryParameterValue',\n    INVALID_URI: 'InvalidUri',\n    INVALID_HTTP_VERB: 'InvalidHttpVerb',\n    EMPTY_METADATA_KEY: 'EmptyMetadataKey',\n    REQUEST_BODY_TOO_LARGE: 'RequestBodyTooLarge',\n    INVALID_XML_DOCUMENT: 'InvalidXmlDocument',\n    INTERNAL_ERROR: 'InternalError',\n    AUTHENTICATION_FAILED: 'AuthenticationFailed',\n    MD5_MISMATCH: 'Md5Mismatch',\n    INVALID_MD5: 'InvalidMd5',\n    OUT_OF_RANGE_INPUT: 'OutOfRangeInput',\n    INVALID_INPUT: 'InvalidInput',\n    OPERATION_TIMED_OUT: 'OperationTimedOut',\n    RESOURCE_NOT_FOUND: 'ResourceNotFound',\n    INVALID_METADATA: 'InvalidMetadata',\n    METADATA_TOO_LARGE: 'MetadataTooLarge',\n    CONDITION_NOT_MET: 'ConditionNotMet',\n    UPDATE_CONDITION_NOT_SATISFIED: 'UpdateConditionNotSatisfied',\n    INVALID_RANGE: 'InvalidRange',\n    CONTAINER_NOT_FOUND: 'ContainerNotFound',\n    CONTAINER_ALREADY_EXISTS: 'ContainerAlreadyExists',\n    CONTAINER_DISABLED: 'ContainerDisabled',\n    CONTAINER_BEING_DELETED: 'ContainerBeingDeleted',\n    SERVER_BUSY: 'ServerBusy'\n  },\n\n  TableErrorCodeStrings: {\n    XMETHOD_NOT_USING_POST: 'XMethodNotUsingPost',\n    XMETHOD_INCORRECT_VALUE: 'XMethodIncorrectValue',\n    XMETHOD_INCORRECT_COUNT: 'XMethodIncorrectCount',\n    TABLE_HAS_NO_PROPERTIES: 'TableHasNoProperties',\n    DUPLICATE_PROPERTIES_SPECIFIED: 'DuplicatePropertiesSpecified',\n    TABLE_HAS_NO_SUCH_PROPERTY: 'TableHasNoSuchProperty',\n    DUPLICATE_KEY_PROPERTY_SPECIFIED: 'DuplicateKeyPropertySpecified',\n    TABLE_ALREADY_EXISTS: 'TableAlreadyExists',\n    TABLE_NOT_FOUND: 'TableNotFound',\n    ENTITY_NOT_FOUND: 'EntityNotFound',\n    ENTITY_ALREADY_EXISTS: 'EntityAlreadyExists',\n    PARTITION_KEY_NOT_SPECIFIED: 'PartitionKeyNotSpecified',\n    OPERATOR_INVALID: 'OperatorInvalid',\n    UPDATE_CONDITION_NOT_SATISFIED: 'UpdateConditionNotSatisfied',\n    PROPERTIES_NEED_VALUE: 'PropertiesNeedValue',\n    PARTITION_KEY_PROPERTY_CANNOT_BE_UPDATED: 'PartitionKeyPropertyCannotBeUpdated',\n    TOO_MANY_PROPERTIES: 'TooManyProperties',\n    ENTITY_TOO_LARGE: 'EntityTooLarge',\n    PROPERTY_VALUE_TOO_LARGE: 'PropertyValueTooLarge',\n    INVALID_VALUE_TYPE: 'InvalidValueType',\n    TABLE_BEING_DELETED: 'TableBeingDeleted',\n    TABLE_SERVER_OUT_OF_MEMORY: 'TableServerOutOfMemory',\n    PRIMARY_KEY_PROPERTY_IS_INVALID_TYPE: 'PrimaryKeyPropertyIsInvalidType',\n    PROPERTY_NAME_TOO_LONG: 'PropertyNameTooLong',\n    PROPERTY_NAME_INVALID: 'PropertyNameInvalid',\n    BATCH_OPERATION_NOT_SUPPORTED: 'BatchOperationNotSupported',\n    JSON_FORMAT_NOT_SUPPORTED: 'JsonFormatNotSupported',\n    METHOD_NOT_ALLOWED: 'MethodNotAllowed',\n    NOT_IMPLEMENTED: 'NotImplemented'\n  },\n\n  GeneralErrorCodeStrings: {\n    INVALID_CONTENT_TYPE: 'The response content type is invalid'\n  }\n};\n\nmodule.exports = Constants;","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/azure/compute/templates/templates.js":"/*\n * templates.js: Implementation template loader\n *\n * (C) Microsoft Open Technologies, Inc.\n *\n */\n\nvar fs = require('fs');\nvar PATH = require('path');\nvar _ = require('lodash');\n\nexports.loadSync = function (name) {\n  var path = PATH.join(__dirname, name);\n  return fs.readFileSync(path, 'utf8');\n};\n\nexports.compileSync = function (template, params) {\n  var compiled = _.template(template);\n  return compiled(params);\n};\n\nexports.load = function (name, callback) {\n  var path = PATH.join(__dirname, name);\n  fs.readFile(path, 'utf8', function (err, data) {\n    callback(err, data);\n  });\n};\n\nexports.compile = function (name, params, callback) {\n  var path = PATH.join(__dirname, name);\n  fs.readFile(path, 'utf8', function (err, data) {\n    var compiled = _.template(data);\n    callback(err, compiled(params));\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/azure/utils/cert.js":"/**\n* Copyright (c) Microsoft.  All rights reserved.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/*\nHow to create SSH cert on linux/mac\n\n// create pem file and key file\nopenssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout myPrivateKey.key -out mycert.pem\n\n//Change the permissions on the private key to secure it.\nchmod 600 mycert.pem\nchmod 600 myPrivateKey.key\n\n// convert pem to pfx\nopenssl pkcs12 -export -out mycert.pfx -in mycert.pem -inkey myPrivateKey.key -name \"My Certificate\"\n\n// how to create a .cer file\nopenssl x509 -inform pem -in mycert.pem -outform der -out mycert.cer\n\n*/\n\n/*\n\nHow to create Service Management  cert on linux/mac\n\n// create rsa private key\nopenssl genrsa -out management.key 2048\n\n// create self signed certificate\nopenssl req -new -key management.key -out management.csr\n\n// create temp pem file from rsa key and self signed certificate\nopenssl x509 -req -days 3650 -in management.csr -signkey management.key -out temp.pem\n\n// create management pem from temp pem file and rsa key file\ncat management.key temp.pem > management.pem\n\n// create management pfx\nopenssl pkcs12 -export -out management.pfx -in temp.pem -inkey management.key -name \"My Certificate\"\n\n// create management cer\nopenssl x509 -inform pem -in management.pem -outform der -out management.cer\n\n// secure files\nchmod 600 *.*\n */\n\nvar crypto = require('crypto');\n\nvar BEGIN_CERT = '-----BEGIN CERTIFICATE-----';\nvar END_CERT   = '-----END CERTIFICATE-----';\n\nvar getFingerPrint = function (pem) {\n  // Extract the base64 encoded cert out of pem file\n  var beginCert = pem.indexOf(BEGIN_CERT) + BEGIN_CERT.length;\n  if (pem[beginCert] === '\\n') {\n    beginCert = beginCert + 1;\n  } else if (pem[beginCert] === '\\r' && pem[beginCert + 1] === '\\n') {\n    beginCert = beginCert + 2;\n  }\n\n  var endCert = '\\n' + pem.indexOf(END_CERT);\n  if (endCert === -1) {\n    endCert = '\\r\\n' + pem.indexOf(END_CERT);\n  }\n\n  var certBase64 = pem.substring(beginCert, endCert);\n\n  // Calculate sha1 hash of the cert\n  var cert = new Buffer(certBase64, 'base64');\n  var sha1 = crypto.createHash('sha1');\n  sha1.update(cert);\n  return sha1.digest('hex').toUpperCase();\n};\n\nexports.getAzureCertInfo = function (cert) {\n  return {\n    cert: cert,\n    fingerprint: getFingerPrint(cert.toString())\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/azure/utils/sharedkey.js":"﻿/**\n * Copyright (c) Microsoft.  All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * derived from azure-sdk-for-node/lib/services/blob/sharedkey.js\n *\n * Modified to sign an Azure request using node request parameters instead of a WebResource\n */\n\n// Module dependencies.\nvar HeaderConstants = require('./constants').HeaderConstants;\nvar HmacSha256Sign = require('./hmacsha256sign');\n\n/**\n * Creates a new SharedKey object.\n *\n * @constructor\n * @param {string} storageAccount    The storage account.\n * @param {string} storageAccessKey  The storage account's access key.\n */\nfunction SharedKey(storageAccount, storageAccessKey) {\n  this.storageAccount = storageAccount;\n  this.storageAccessKey = storageAccessKey;\n  this.signer = new HmacSha256Sign(storageAccessKey);\n}\n\nvar getvalueToAppend = function (value) {\n  return value ? value + '\\n' : '\\n';\n};\n\n/**\n * Signs a request with the Authentication header.\n *\n * @param {req} The request request object.\n * @return {undefined}\n */\nSharedKey.prototype.signRequest = function (req) {\n\n  var httpVerb = req.method || 'GET';\n\n  req.headers = req.headers || {};\n  req.headers['x-ms-date'] = new Date().toUTCString();\n  req.headers['x-ms-version'] = HeaderConstants.TARGET_STORAGE_VERSION;\n\n  if (!req.headers[HeaderConstants.CONTENT_LENGTH]) {\n    req.headers[HeaderConstants.CONTENT_LENGTH] = '0';\n  }\n\n  var stringToSign =\n    httpVerb + '\\n' +\n      getvalueToAppend(req.headers[HeaderConstants.CONTENT_ENCODING]) +\n      getvalueToAppend(req.headers[HeaderConstants.CONTENT_LANGUAGE]) +\n      getvalueToAppend(req.headers[HeaderConstants.CONTENT_LENGTH]) +\n      getvalueToAppend(req.headers[HeaderConstants.CONTENT_MD5]) +\n      getvalueToAppend(req.headers[HeaderConstants.CONTENT_TYPE]) +\n      getvalueToAppend(req.headers[HeaderConstants.DATE]) +\n      getvalueToAppend(req.headers[HeaderConstants.IF_MODIFIED_SINCE]) +\n      getvalueToAppend(req.headers[HeaderConstants.IF_MATCH]) +\n      getvalueToAppend(req.headers[HeaderConstants.IF_NONE_MATCH]) +\n      getvalueToAppend(req.headers[HeaderConstants.IF_UNMODIFIED_SINCE]) +\n      getvalueToAppend(req.headers[HeaderConstants.RANGE]) +\n      this._getCanonicalizedHeaders(req) +\n      this._getCanonicalizedResource(req);\n\n  var signature = this.signer.sign(stringToSign);\n\n  req.headers[HeaderConstants.AUTHORIZATION] = 'SharedKey ' + this.storageAccount + ':' + signature;\n};\n\n/*\n * Retrieves the requests's canonicalized resource string.\n * @param {req} request The request to get the canonicalized resource string from.\n * @return {string} The canonicalized resource string.\n */\nSharedKey.prototype._getCanonicalizedResource = function (req) {\n  var path = '/';\n  if (req.path) {\n    path = '/' + req.path;\n  }\n\n  var canonicalizedResource = '/' + this.storageAccount;\n\n  if (path) {\n    canonicalizedResource += path;\n  }\n\n  // Get the raw query string values for signing\n\n  if (req.qs) {\n    var queryStringValues = req.qs;\n\n    // Build the canonicalized resource by sorting the values by name.\n    if (queryStringValues) {\n      var paramNames = [];\n      for (var n in queryStringValues) {\n        paramNames.push(n);\n      }\n\n      paramNames = paramNames.sort();\n      for (var name in paramNames) {\n        canonicalizedResource += '\\n' + paramNames[name] + ':' + queryStringValues[paramNames[name]];\n      }\n    }\n  }\n\n  return canonicalizedResource;\n};\n\n/*\n * Constructs the Canonicalized Headers string.\n *\n * To construct the CanonicalizedHeaders portion of the signature string,\n * follow these steps: 1. Retrieve all headers for the resource that begin\n * with x-ms-, including the x-ms-date header. 2. Convert each HTTP header\n * name to lowercase. 3. Sort the headers lexicographically by header name,\n * in ascending order. Each header may appear only once in the\n * string. 4. Unfold the string by replacing any breaking white space with a\n * single space. 5. Trim any white space around the colon in the header. 6.\n * Finally, append a new line character to each canonicalized header in the\n * resulting list. Construct the CanonicalizedHeaders string by\n * concatenating all headers in this list into a single string.\n *\n * @param {object} The request object.\n * @return {string} The canonicalized headers.\n */\nSharedKey.prototype._getCanonicalizedHeaders = function (req) {\n  // Build canonicalized headers\n  var canonicalizedHeaders = '';\n  if (req.headers) {\n    var canonicalizedHeadersArray = [];\n    for (var header in req.headers) {\n      if (header.indexOf(HeaderConstants.PREFIX_FOR_STORAGE_HEADER) === 0) {\n        canonicalizedHeadersArray.push(header);\n      }\n    }\n\n    canonicalizedHeadersArray.sort();\n    for (var headerName in canonicalizedHeadersArray) {\n      canonicalizedHeaders += canonicalizedHeadersArray[headerName].toLowerCase() + ':' + req.headers[canonicalizedHeadersArray[headerName]] + '\\n';\n    }\n  }\n\n  return canonicalizedHeaders;\n};\n\n// Expose 'SharedKey'.\nexports = module.exports = SharedKey;\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/azure/utils/hmacsha256sign.js":"﻿/**\n* Copyright (c) Microsoft.  All rights reserved.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n// Module dependencies.\nvar crypto = require('crypto');\n\n/**\n* Creates a new HmacSHA256Sign object.\n*\n* @constructor\n*/\nfunction HmacSha256Sign(accessKey) {\n  this._accessKey = accessKey;\n  this._decodedAccessKey = new Buffer(this._accessKey, 'base64');\n}\n\n/**\n* Computes a signature for the specified string using the HMAC-SHA256 algorithm.\n*\n* @param {string} stringToSign The UTF-8-encoded string to sign.\n* @return A String that contains the HMAC-SHA256-encoded signature.\n*/\nHmacSha256Sign.prototype.sign = function (stringToSign) {\n  // Encoding the Signature\n  // Signature=Base64(HMAC-SHA256(UTF8(StringToSign)))\n\n  return crypto.createHmac('sha256', this._decodedAccessKey).update(stringToSign).digest('base64');\n};\n\n// Expose 'HmacSHA256Sign'.\nexports = module.exports = HmacSha256Sign;\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/azure/utils/sharedkeytable.js":"/**\n * Copyright (c) Microsoft.  All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Module dependencies.\nvar HmacSha256Sign = require('./hmacsha256sign'),\n    HeaderConstants = require('./constants').HeaderConstants,\n    azureApi = require('../utils/azureApi'),\n    URL = require('url');\n\n/**\n * Creates a new SharedKeyTable object.\n *\n * @constructor\n * @param {string} storageAccount    The storage account.\n * @param {string} storageAccessKey  The storage account's access key.\n */\nfunction SharedKeyTable(storageAccount, storageAccessKey) {\n  this.storageAccount = storageAccount;\n  this.storageAccessKey = storageAccessKey;\n  this.signer = new HmacSha256Sign(storageAccessKey);\n}\n\nvar getvalueToAppend = function (value) {\n  return value ? value + '\\n' : '\\n';\n};\n\n/**\n * Signs a request with the Authentication header.\n *\n * @param {req} req The request to be signed.\n * @return {undefined}\n */\nSharedKeyTable.prototype.signRequest = function (req) {\n\n  var httpVerb = req.method || 'GET',\n    signature;\n\n  req.headers['x-ms-date'] = new Date().toUTCString();\n  req.headers['x-ms-version'] = azureApi.TABLES_API_VERSION;\n  req.headers['content-type'] = 'application/atom+xml;charset=\"utf-8\"';\n  req.headers['accept'] = 'application/atom+xml;charset=\"utf-8\"';\n\n  if (!req.headers[HeaderConstants.CONTENT_LENGTH]) {\n    req.headers[HeaderConstants.CONTENT_LENGTH] = '0';\n  }\n\n  var stringToSign =\n    httpVerb + '\\n' +\n      getvalueToAppend(req.headers[HeaderConstants.CONTENT_MD5]) +\n      getvalueToAppend(req.headers[HeaderConstants.CONTENT_TYPE]) +\n      getvalueToAppend(req.headers[HeaderConstants.DATE_HEADER]) +\n      this._getCanonicalizedResource(req);\n\n  req.headers['DataServiceVersion'] = '1.0;NetFx';\n  req.headers['MaxDataServiceVersion'] = '2.0;NetFx';\n  signature = this.signer.sign(stringToSign);\n\n  req.headers[HeaderConstants.AUTHORIZATION] = 'SharedKey ' + this.storageAccount + ':' + signature;\n};\n\n/*\n * Retrieves the requests's canonicalized resource string.\n * @param {req} req The request to get the canonicalized resource string from.\n * @return {string} The canonicalized resource string.\n */\nSharedKeyTable.prototype._getCanonicalizedResource = function (req) {\n  var path = '/';\n  if (req.path[0]) {\n    path = '/' + req.path[0];\n  }\n\n  var canonicalizedResource = '/' + this.storageAccount;\n\n  if (path) {\n    canonicalizedResource += path;\n  }\n\n  if (req.path.length > 1) {\n    var u = URL.parse(req.path[1], true);\n    var queryStringValues = u.query;\n\n    if (queryStringValues) {\n      if (queryStringValues['comp']) {\n        canonicalizedResource += '?comp=' + queryStringValues['comp'];\n      }\n    }\n  }\n  return canonicalizedResource;\n};\n\n// Expose 'SharedKeyTable'.\nexports = module.exports = SharedKeyTable;\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/amazon/index.js":"/*\n * index.js: Top-level include for the AWS module.\n *\n * (C) 2012 Charlie Robbins, Ken Perkins, Ross Kukulinski & the Contributors.\n *\n */\n\nexports.compute = require('./compute');\nexports.storage = require('./storage');\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/amazon/compute/index.js":"/*\n * index.js: Top-level include for the AWS compute module\n *\n * (C) 2012 Charlie Robbins, Ken Perkins, Ross Kukulinski & the Contributors.\n *\n */\n\nexports.Client = require('./client').Client;\nexports.Flavor = require('./flavor').Flavor;\nexports.Image  = require('./image').Image;\nexports.Server = require('./server').Server;\n\nexports.createClient = function (options) {\n  return new exports.Client(options);\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/amazon/compute/client/index.js":"/*\n * index.js: Compute client for AWS CloudAPI\n *\n * (C) 2012 Charlie Robbins, Ken Perkins, Ross Kukulinski & the Contributors.\n *\n */\n\nvar AWS    = require('aws-sdk'),\n    util   = require('util'),\n    amazon = require('../../client'),\n    _      = require('lodash');\n\nvar Client = exports.Client = function (options) {\n  amazon.Client.call(this, options);\n\n  this.securityGroup = options.securityGroup;\n\n  _.extend(this, require('./flavors'));\n  _.extend(this, require('./images'));\n  _.extend(this, require('./servers'));\n  _.extend(this, require('./keys'));\n  _.extend(this, require('./groups'));\n\n  this.ec2 = new AWS.EC2(this._awsConfig);\n};\n\nutil.inherits(Client, amazon.Client);\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/amazon/client.js":"/*\n * client.js: Base client from which all AWS clients inherit from\n *\n * (C) 2012 Charlie Robbins, Ken Perkins, Ross Kukulinski & the Contributors.\n *\n */\n\nvar util = require('util'),\n    AWS = require('aws-sdk'),\n    base = require('../core/base');\n\nvar userAgent = AWS.util.userAgent();\nvar Client = exports.Client = function (options) {\n  var self = this;\n\n  base.Client.call(this, options);\n\n  options = options || {};\n\n  // Allow overriding serversUrl in child classes\n  this.provider   = 'amazon';\n  this.endpoint = options.endpoint;\n  this.securityGroup = options.securityGroup;\n  this.securityGroupId = options.securityGroupId;\n  this.version = options.version || '2014-06-15';\n  this.protocol = options.protocol || 'https://';\n\n  // support either key/accessKey syntax\n  this.config.key = this.config.key || options.accessKey;\n  this.config.keyId = this.config.keyId || options.accessKeyId;\n\n  this._awsConfig = {\n    accessKeyId: this.config.keyId,\n    secretAccessKey: this.config.key,\n    region: options.region,\n    s3ForcePathStyle: options.forcePathBucket\n  };\n\n  // TODO think about a proxy option for pkgcloud\n  // enable forwarding to mock test server\n  if (options.serversUrl) {\n    this._awsConfig.httpOptions = {\n      proxy: this.protocol + options.serversUrl\n    };\n  }\n\n  if (options.endpoint) {\n    this._awsConfig.endpoint = new AWS.Endpoint(options.endpoint);\n  }\n\n  this.userAgent = util.format('%s %s', self.getUserAgent(), userAgent);\n\n  // Setup a custom user agent for pkgcloud\n  AWS.util.userAgent = function () {\n    return self.userAgent;\n  };\n\n  if (!this.before) {\n    this.before = [];\n  }\n};\n\nutil.inherits(Client, base.Client);\n\nClient.prototype._toArray = function toArray(obj) {\n  if (typeof obj === 'undefined') {\n    return [];\n  }\n\n  return Array.isArray(obj) ? obj : [obj];\n};\n\nClient.prototype.failCodes = {\n  400: 'Bad Request',\n  401: 'Unauthorized',\n  403: 'Resize not allowed',\n  404: 'Item not found',\n  409: 'Build in progress',\n  413: 'Over Limit',\n  415: 'Bad Media Type',\n  500: 'Fault',\n  503: 'Service Unavailable'\n};\n\nClient.prototype.successCodes = {\n  200: 'OK',\n  201: 'Created',\n  202: 'Accepted',\n  203: 'Non-authoritative information',\n  204: 'No content'\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/amazon/compute/flavor.js":"/*\n * flavor.js: AWS Cloud Package\n *\n * (C) 2012 Charlie Robbins, Ken Perkins, Ross Kukulinski & the Contributors.\n *\n */\n\nvar util  = require('util'),\n    base  = require('../../core/compute/flavor'),\n    _     = require('lodash');\n\nvar Flavor = exports.Flavor = function Flavor(client, details) {\n  base.Flavor.call(this, client, details);\n};\n\nutil.inherits(Flavor, base.Flavor);\n\nFlavor.options = {\n\n  // Previous Generation Instance Types\n  'm1.small': { id: 'm1.small', ram: 1.7 * 1024, disk: 160 },\n  'm1.medium': { id: 'm1.medium', ram: 3.75 * 1024, disk: 410 },\n  'm1.large': { id: 'm1.large', ram: 7.5 * 1024, disk: 2 * 420 },\n  'm1.xlarge': { id: 'm1.xlarge', ram: 15 * 1024, disk: 4 * 420 },\n  'c1.medium': { id: 'c1.medium', ram: 1.7 * 1024, disk: 350 },\n  'c1.xlarge': { id: 'c1.xlarge', ram: 7 * 1024, disk: 4 * 420 },\n  'cc2.8xlarge': { id: 'cc2.8xlarge', ram: 60.5 * 1024, disk: 4 * 840 },\n  'm2.xlarge': { id: 'm2.xlarge', ram: 17.1 * 1024, disk: 420 },\n  'm2.2xlarge': { id: 'm2.2xlarge', ram: 34.2 * 1024, disk: 850 },\n  'm2.4xlarge': { id: 'm2.4xlarge', ram: 68.4 * 1024, disk: 2 * 840 },\n  'cr1.8xlarge': { id: 'cr1.8xlarge', ram: 244 * 1024, disk: 2 * 120 },\n  'hi1.4xlarge': { id: 'hi1.4xlarge', ram: 60.5 * 1024, disk: 2 * 1024 },\n  'cg1.4xlarge': { id: 'cg1.4xlarge', ram: 22.5 * 1024, disk: 2 * 840 },\n  't1.micro': { id: 't1.micro', ram: 613, disk: 0},\n\n  // Current Generation Instance Types\n  't2.micro': { id: 't2.micro', ram: 1024, disk: 0 },\n  't2.small': { id: 't2.small', ram: 2 * 1024, disk: 0 },\n  't2.medium': { id: 't2.medium', ram: 4 * 1024, disk: 0 },\n  'm3.medium': { id: 'm3.medium', ram: 3.75 * 1024, disk: 4 },\n  'm3.large': { id: 'm3.large', ram: 7.5 * 1024, disk: 32 },\n  'm3.xlarge': { id: 'm3.xlarge', ram: 15 * 1024, disk: 2 * 40 },\n  'm3.2xlarge': { id: 'm3.2xlarge', ram: 30 * 1024, disk: 2 * 80 },\n  'c3.large': { id: 'c3.large', ram: 3.75 * 1024, disk: 2 * 16 },\n  'c3.xlarge': { id: 'c3.xlarge', ram: 7.5 * 1024, disk: 2 * 40 },\n  'c3.2xlarge': { id: 'c3.2xlarge', ram: 15 * 1024, disk: 2 * 80 },\n  'c3.4xlarge': { id: 'c3.4xlarge', ram: 30 * 1024, disk: 2 * 160 },\n  'c3.8xlarge': { id: 'c3.8xlarge', ram: 60 * 1024, disk: 2 * 320 },\n  'g2.2xlarge': { id: 'g2.2xlarge', ram: 15 * 1024, disk: 60 },\n  'r3.large': { id: 'r3.large', ram: 15.25 * 1024, disk: 32 },\n  'r3.xlarge': { id: 'r3.xlarge', ram: 30.5 * 1024, disk: 80 },\n  'r3.2xlarge': { id: 'r3.2xlarge', ram: 61 * 1024, disk: 160 },\n  'r3.4xlarge': { id: 'r3.4xlarge', ram: 122 * 1024, disk: 320 },\n  'r3.8xlarge': { id: 'r3.8xlarge', ram: 244 * 1024, disk: 2 * 320 },\n  'i2.xlarge': { id: 'i2.xlarge', ram: 30.5 * 1024, disk: 800 },\n  'i2.2xlarge': { id: 'i2.2xlarge', ram: 61 * 1024, disk: 2 * 800 },\n  'i2.4xlarge': { id: 'i2.4xlarge', ram: 122 * 1024, disk: 4 * 800 },\n  'i2.8xlarge': { id: 'i2.8xlarge', ram: 244 * 1024, disk: 8 * 800 },\n  'hs1.8xlarge': { id: 'hs1.8xlarge', ram: 117 * 1024, disk: 24 * 2000 }\n\n};\n\nFlavor.prototype._setProperties = function (details) {\n  var id = details.name || 'm1.small';\n\n  if (!Flavor.options[id]) {\n    throw new TypeError('No such AWS Flavor: ' + id);\n  }\n\n  this.id   = id;\n  this.name = id;\n  this.ram  = Flavor.options[id].ram;\n  this.disk = Flavor.options[id].disk;\n};\n\nFlavor.prototype.toJSON = function () {\n  return _.pick(this, ['id', 'name', 'ram', 'disk' ]);\n};","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/amazon/compute/image.js":"/*\n * image.js: AWS Cloud\n *\n * (C) 2012 Charlie Robbins, Ken Perkins, Ross Kukulinski & the Contributors.\n *\n */\n\nvar util  = require('util'),\n    base  = require('../../core/compute/image'),\n    _     = require('lodash');\n\nvar Image = exports.Image = function Image(client, details) {\n  base.Image.call(this, client, details);\n};\n\nutil.inherits(Image, base.Image);\n\nImage.prototype._setProperties = function (details) {\n  this.id      = details.imageId || details.ImageId;\n  this.name    = details.Name || details.ImageLocation.split('/')[1];\n  this.created = new Date(0);\n  this.blockDeviceMappings = details.BlockDeviceMappings;\n  this.details = this.amazon = details;\n};\n\nImage.prototype.toJSON = function () {\n  return _.pick(this, ['id', 'name', 'created', 'blockDeviceMappings']);\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/amazon/compute/server.js":"/*\n * server.js: AWS Server\n *\n * (C) 2012 Charlie Robbins, Ken Perkins, Ross Kukulinski & the Contributors.\n *\n */\n\nvar util  = require('util'),\n    base  = require('../../core/compute/server'),\n    _     = require('lodash');\n\nvar Server = exports.Server = function Server(client, details) {\n  base.Server.call(this, client, details);\n};\n\nutil.inherits(Server, base.Server);\n\nServer.prototype._setProperties = function (details) {\n  this.id   = details.InstanceId || details.instanceId;\n  this.name = details.name || (details.meta || {}).name;\n\n  if (details.State) {\n    switch (details.State.Name.toUpperCase()) {\n      case 'PENDING':\n        this.status = this.STATUS.provisioning;\n        break;\n      case 'RUNNING':\n        this.status = this.STATUS.running;\n        break;\n      case 'STOPPING':\n      case 'STOPPED':\n        this.status = this.STATUS.stopped;\n        break;\n      case 'TERMINATED':\n        this.status = this.STATUS.terminated;\n        break;\n      default:\n        this.status = this.STATUS.unknown;\n        break;\n    }\n  }\n\n  var addresses = { private: [], public: [] };\n\n  ['PublicIpAddress', 'PublicDnsName'].forEach(function (prop) {\n    if (typeof details[prop] === 'string') {\n      addresses.public.push(details[prop]);\n    }\n  });\n\n  ['PrivateIpAddress', 'PrivateDnsName'].forEach(function (prop) {\n    if (typeof details[prop] === 'string') {\n      addresses.private.push(details[prop]);\n    }\n  });\n\n  //\n  // AWS specific\n  //\n  this.imageId    = details.ImageId;\n  this.addresses  = details.Addresses = addresses;\n  this.launchTime = details.LaunchTime;\n  this.flavorId   = details.InstanceType;\n  this.original   = this.amazon = details;\n};\n\nServer.prototype.toJSON = function () {\n  return _.pick(this, ['id', 'name', 'status', 'image', 'addresses', 'launchTime', 'flavor' ]);\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/amazon/storage/index.js":"/*\n * index.js: Top-level include for the AWS S3 module\n *\n * (C) 2012 Charlie Robbins, Ken Perkins, Ross Kukulinski & the Contributors.\n *\n */\n\nexports.Client = require('./client').Client;\nexports.Container = require('./container').Container;\nexports.File  = require('./file').File;\n\nexports.createClient = function (options) {\n  return new exports.Client(options);\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/amazon/storage/client/index.js":"/*\n * client.js: Storage client for AWS S3\n *\n * (C) 2011 Charlie Robbins, Ken Perkins, Ross Kukulinski & the Contributors.\n *\n */\n\nvar util = require('util'),\n    AWS = require('aws-sdk'),\n    s3Stream = require('s3-upload-stream'),\n    amazon = require('../../client'),\n    _ = require('lodash');\n\nvar Client = exports.Client = function (options) {\n  amazon.Client.call(this, options);\n\n  _.extend(this, require('./containers'));\n  _.extend(this, require('./files'));\n\n  this.s3 = new AWS.S3(this._awsConfig);\n\n  // configure the s3Stream\n  this.s3Stream = s3Stream(this.s3);\n};\n\nutil.inherits(Client, amazon.Client);\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/amazon/storage/container.js":"/*\n * container.js: AWS S3 Bucket\n *\n * (C) 2012 Charlie Robbins, Ken Perkins, Ross Kukulinski & the Contributors.\n *\n */\n\nvar util = require('util'),\n    storage   = require('../storage'),\n    base  = require('../../core/storage/container'),\n    _ = require('lodash');\n\nvar Container = exports.Container = function Container(client, details) {\n  base.Container.call(this, client, details);\n};\n\nutil.inherits(Container, base.Container);\n\nContainer.prototype._setProperties = function (details) {\n  var self = this;\n\n  if (typeof details === 'string') {\n    this.name = details;\n    return;\n  }\n\n  this.name = details.Name;\n\n  //\n  // AWS specific\n  //\n\n  this.maxKeys = details.MaxKeys;\n  this.isTruncated = details.IsTruncated === 'true';\n\n  if (details.Contents) {\n    details.Contents.forEach(function (file) {\n      file.container = self;\n      self.files.push(new storage.File(self.client, file));\n    });\n  }\n};\n\nContainer.prototype.toJSON = function () {\n  return _.pick(this, ['name', 'maxKeys', 'isTruncated' ]);\n};\n\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/amazon/storage/file.js":"/*\n * container.js: AWS S3 File\n *\n * (C) 2012 Charlie Robbins, Ken Perkins, Ross Kukulinski & the Contributors.\n *\n */\n\nvar util  = require('util'),\n    base  = require('../../core/storage/file'),\n    _ = require('lodash');\n\nvar File = exports.File = function File(client, details) {\n  base.File.call(this, client, details);\n};\n\nutil.inherits(File, base.File);\n\nFile.prototype._setProperties = function (details) {\n  this.name = details.name || details.Key;\n  this.etag = details.ETag || details.etag || null;\n  this.lastModified = details.LastModified || details.lastModified || null;\n  this.size = +(details.Size || details['content-length'] || details.ContentLength) || 0;\n  this.container = details.container || details.Bucket;\n  this.location = details.location || details.Location;\n\n  // amazon appears to send the etag double enquoted\n  this.etag = this.etag ? this.etag.replace(/\"/g,'') : this.etag;\n  // AWS Specific\n  this.storageClass = details.StorageClass || this.StorageClass;\n};\n\nFile.prototype.toJSON = function () {\n  return _.pick(this, ['name', 'etag', 'size', 'storageClass', 'lastModified', 'container', 'location' ]);\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/azure/index.js":"/*\n * index.js: Top-level include for the Azure module.\n *\n *  (C) Microsoft Open Technologies, Inc.   All rights reserved.\n *\n */\n\nexports.compute = require('./compute');\nexports.storage = require('./storage');\nexports.database = require('./database');\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/azure/compute/index.js":"/*\n * index.js: Top-level include for the Azure compute module\n *\n * (C) Microsoft Open Technologies, Inc.\n *\n */\n\nexports.Client = require('./client').Client;\nexports.Flavor = require('./flavor').Flavor;\nexports.Image  = require('./image').Image;\nexports.Server = require('./server').Server;\n\nexports.createClient = function (options) {\n  return new exports.Client(options);\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/azure/compute/client/index.js":"/*\n * index.js: Compute client for Azure\n *\n * (C) Microsoft Open Technologies, Inc.\n *\n */\n\nvar util = require('util'),\n    urlJoin = require('url-join'),\n    https = require('https'),\n    auth = require('../../../common/auth'),\n    azureApi = require('../../utils/azureApi.js'),\n    xml2JSON = require('../../utils/xml2json.js').xml2JSON,\n    azure = require('../../client'),\n    _ = require('lodash');\n\nvar Client = exports.Client = function (options) {\n  azure.Client.call(this, options);\n\n  _.extend(this, require('./flavors'));\n  _.extend(this, require('./images'));\n  _.extend(this, require('./servers'));\n  _.extend(this, require('./keys'));\n\n  this.serversUrl = options.serversUrl || azureApi.MANAGEMENT_ENDPOINT;\n  this.version = azureApi.MANAGEMENT_API_VERSION;\n  this.subscriptionId = this.config.subscriptionId;\n\n  this.azureKeys = {\n    key: this.config.key,\n    cert: this.config.cert\n  };\n\n  this.azureKeys.subscriptionId = this.config.subscriptionId;\n\n  this.before.push(auth.azure.managementSignature);\n\n  // The https agent is used by request for authenticating TLS/SSL https calls\n  if (this.protocol === 'https://') {\n    this.before.push(function (req) {\n      req.agent = new https.Agent({\n        host: this.serversUrl,\n        key: options.key,\n        cert: options.cert\n      });\n    });\n  }\n};\n\nutil.inherits(Client, azure.Client);\n\nClient.prototype._query = function query(action, query, callback) {\n  return this._request({\n    method: 'POST',\n    headers: { },\n    body: _.extend({ Action: action }, query)\n  }, function (err, body, res) {\n    if (err) { return callback(err); }\n    xml2JSON(body, function (err, data) {\n      return err\n        ? callback(err)\n        : callback(data, res);\n    });\n  });\n};\n\nClient.prototype.get = function get(action, callback) {\n  return this._request({ path: action }, function (err, body, res) {\n    if (err) {\n      return callback(err);\n    }\n    xml2JSON(body, function (err, data) {\n      return err\n        ? callback(err)\n        : callback(null, data, res);\n    });\n  });\n};\n\nClient.prototype._xmlRequest = function query(options, callback) {\n\n  return this._request(options, function (err, body, res) {\n    if (err) {\n      return callback(err);\n    }\n    xml2JSON(body, function (err, data) {\n      return err ?\n        callback(err) :\n        callback(null, data, res);\n    });\n  });\n};\n\nClient.prototype._getUrl = function (options) {\n  options = options || {};\n\n  return urlJoin(this.protocol + this.serversUrl + '/',\n    (typeof options === 'string'\n      ? options\n      : options.path));\n};\n\n\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/azure/utils/xml2json.js":"/**\n *  (C) Microsoft Open Technologies, Inc.   All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar xml2js = require('xml2js');\n\nexports.xml2JSON = function (xml, callback) {\n  // Remove utf-8 BOM if it is at the start of the string\n  // utf-8 BOM (EF BB BF) at start of string causes xml2js to blow up\n  // azure sometimes includes it in a response\n  xml = xml || '';\n  var index = xml.indexOf('<');\n  if (index > 0) {\n    xml = xml.slice(index);\n  }\n\n  var parser = new xml2js.Parser({normalize: false, trim: false});\n  parser.parseString(xml, function (err, data) {\n    if (err) {\n      callback(err);\n    } else {\n      callback(null, data);\n    }\n  });\n};","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/azure/client.js":"/*\n * client.js: Base client from which all Azure clients inherit from\n *\n *  (C) Microsoft Open Technologies, Inc.   All rights reserved.\n *\n */\n\nvar util = require('util'),\n    base = require('../core/base');\n\nvar Client = exports.Client = function (options) {\n  base.Client.call(this, options);\n\n  options = options || {};\n\n  // Allow overriding serversUrl in child classes\n  this.provider   = 'azure';\n  this.protocol   = options.protocol || 'https://';\n\n  if (!this.before) {\n    this.before = [];\n  }\n};\n\nutil.inherits(Client, base.Client);\n\nClient.prototype._toArray = function toArray(obj) {\n  if (typeof obj === 'undefined') {\n    return [];\n  }\n\n  return Array.isArray(obj) ? obj : [obj];\n};\n\nClient.prototype.failCodes = {\n  400: 'Bad Request',\n  401: 'Unauthorized',\n  403: 'Forbidden',\n  404: 'Item not found',\n  409: 'Already exists or in progress',\n  412: 'Lease error',\n  413: 'Request Entity Too Large',\n  415: 'Bad Media Type',\n  500: 'Fault',\n  503: 'Service Unavailable'\n};\n\nClient.prototype.successCodes = {\n  200: 'OK',\n  201: 'Created',\n  202: 'Accepted',\n  203: 'Non-authoritative information',\n  204: 'No content'\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/azure/compute/flavor.js":"/*\n * flavor.js: Azure Cloud Package flavors\n *\n * (C) Microsoft Open Technologies, Inc.\n *\n */\n\nvar util = require('util'),\n    base  = require('../../core/compute/flavor');\n\nvar Flavor = exports.Flavor = function Flavor(client, details) {\n  base.Flavor.call(this, client, details);\n};\n\nutil.inherits(Flavor, base.Flavor);\n\nFlavor.options = {\n  'ExtraSmall': { ram: 0.768 * 1024, disk: 20 },\n  'Small': { ram: 1.75 * 1024, disk: 50 },\n  'Medium': { ram: 3.5 * 1024, disk: 100 },\n  'Large': { ram: 7 * 1024, disk: 200 },\n  'ExtraLarge': { ram: 14 * 1024, disk: 400 }\n};\n\nFlavor.prototype._setProperties = function (details) {\n  var id = details.name || details.id || 'ExtraSmall';\n\n  if (!Flavor.options[id]) {\n    throw new TypeError('No such Azure Flavor: ' + id);\n  }\n\n  this.id   = id;\n  this.name = id;\n  this.ram  = Flavor.options[id].ram;\n  this.disk = Flavor.options[id].disk;\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/azure/compute/image.js":"/*\n * image.js: Azure OS Images\n *\n * (C) Microsoft Open Technologies, Inc.\n *\n */\n\nvar util = require('util'),\n    base  = require('../../core/compute/image');\n\nvar Image = exports.Image = function Image(client, details) {\n  base.Image.call(this, client, details);\n};\n\nutil.inherits(Image, base.Image);\n\nImage.prototype._setProperties = function (details) {\n  this.id      = details.Name;\n  this.name    = details.Name;\n  this.created = new Date(0);\n  this.details = this.azure = details;\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/azure/compute/server.js":"/*\n * server.js: Azure Server\n *\n * (C) Microsoft Open Technologies, Inc.\n *\n */\n\nvar util = require('util'),\n    base  = require('../../core/compute/server');\n\nvar Server = exports.Server = function Server(client, details) {\n  base.Server.call(this, client, details);\n  this.requestPending = false;\n};\n\nutil.inherits(Server, base.Server);\n\nServer.prototype._setProperties = function (details) {\n  var roleInstance = null;\n\n  details = details || {};\n  this.id   = details.Name || '';\n  this.name   = details.Name || '';\n\n  if (details.RoleInstanceList && details.RoleInstanceList.RoleInstance) {\n    roleInstance = details.RoleInstanceList.RoleInstance;\n  }\n\n  //console.log('Status: ' + details.Status + ' RoleInstanceList: ' + roleInstance ? roleInstance.InstanceStatus : 'UNKNOWN');\n\n  // azure can return an inconsistent RoleInstance status (not in azure rest api docs) so we check everything.\n  // an azure vm has a complicated state machine. We need to check the status of both the deployment and the role.\n  // azure first starts a deployment and then starts a role. The role seems to go through STOPPEDVM, PROVISIONING and then\n  // READYROLE.\n  // Note: since azureAPI has to wait until azure responds to our createServer request, we most likely will miss all of the\n  // deployment states unless something goes wrong\n  // TODO: there doesn't seem to be an ERROR or FAIL status in pkgcloud\n\n  if (roleInstance) {\n    switch (roleInstance.InstanceStatus.toUpperCase()) {\n      case 'PROVISIONING':\n      case 'CREATINGVM':\n      case 'STARTINGVM':\n      case 'CREATINGROLE':\n      case 'STARTINGROLE':\n      case 'RESTARTINGROLE':\n      case 'BUSYROLE':\n      case 'INITIALIZING':\n      case 'BUSY':\n        this.status = this.STATUS.provisioning;\n        break;\n      case 'READYROLE':\n      case 'READY':\n        this.status = this.STATUS.running;\n        break;\n      case 'STOPPING':\n      case 'STOPPED':\n      case 'STOPPINGROLE':\n      case 'STOPPINGVM':\n      case 'STOPPEDVM':\n        this.status = this.STATUS.stopped;\n        break;\n      case 'DELETINGVM':\n        this.status = this.STATUS.terminated;\n        break;\n      case 'ROLESTATEUNKNOWN':\n      case 'UNKNOWN':\n      default:\n        this.status = this.STATUS.unknown;\n        break;\n    }\n\n  } else if (details.Status) {\n    switch (details.Status.toUpperCase()) {\n      case 'STARTING':\n      case 'DEPLOYING':\n      case 'PROVISIONING':\n      case 'RUNNINGTRANSITIONING':\n        this.status = this.STATUS.provisioning;\n        break;\n      case 'RUNNING':\n        this.status = this.STATUS.running;\n        break;\n      case 'SUSPENDING':\n      case 'SUSPENDED':\n      case 'SUSPENDEDTRANSITIONING':\n        this.status = this.STATUS.stopped;\n        break;\n      case 'DELETING':\n        this.status = this.STATUS.terminated;\n        break;\n      default:\n        this.status = this.STATUS.unknown;\n        break;\n    }\n  } else {\n    this.status = this.STATUS.unknown;\n  }\n\n  var addresses = { private: [], public: [] };\n\n  // TODO: Need to clean up once I understand what is private ip?\n  if (roleInstance) {\n    addresses.public.push(roleInstance.InstanceEndpoints.InstanceEndpoint.Vip);\n    addresses.private.push(roleInstance.IpAddress);\n  } else {\n    addresses.public.push('');\n    addresses.private.push('');\n  }\n  this.addresses = details.addresses = addresses;\n\n  if (details.RoleList && details.RoleList.Role) {\n    if (details.RoleList.Role.OSVirtualHardDisk) {\n      this.imageId = details.RoleList.Role.OSVirtualHardDisk.SourceImageName;\n    }\n  }\n\n  this.serviceName = details.serviceName || details.Name;\n\n  this.original = this.azure = details;\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/azure/storage/index.js":"/*\n * index.js: Top-level include for the Azure module\n *\n * (C) Microsoft Open Technologies, Inc.\n *\n */\n\nexports.Client = require('./client').Client;\nexports.Container = require('./container').Container;\nexports.File  = require('./file').File;\nexports.ChunkedStream  = require('./utils').ChunkedStream;\n\nexports.createClient = function (options) {\n  return new exports.Client(options);\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/azure/storage/client/index.js":"/*\n * client.js: Storage client for Azure\n *\n * (C) Microsoft Open Technologies, Inc.\n *\n */\n\nvar util = require('util'),\n    urlJoin = require('url-join'),\n    auth = require('../../../common/auth'),\n    azureApi = require('../../utils/azureApi.js'),\n    xml2JSON = require('../../utils/xml2json.js').xml2JSON,\n    azure = require('../../client'),\n    _ = require('lodash');\n\nvar Client = exports.Client = function (options) {\n  this.serversUrl = options.serversUrl || azureApi.STORAGE_ENDPOINT;\n\n  azure.Client.call(this, options);\n\n  _.extend(this, require('./containers'));\n  _.extend(this, require('./files'));\n\n  // add the auth keys for request authorization\n  this.azureKeys = {};\n  this.azureKeys.storageAccount = this.config.storageAccount;\n  this.azureKeys.storageAccessKey = this.config.storageAccessKey;\n\n  this.before.push(auth.azure.storageSignature);\n};\n\nutil.inherits(Client, azure.Client);\n\nClient.prototype._xmlRequest = function query(options, callback) {\n  return this._request(options, function (err, body, res) {\n    if (err) {\n      return callback(err);\n    }\n    xml2JSON(body, function (err, data) {\n      return err\n        ? callback(err)\n        : callback(null, data, res);\n    });\n  });\n};\n\nClient.prototype._getUrl = function (options) {\n  options = options || {};\n\n  var fragment = '';\n\n  if (options.container) {\n    fragment = options.container;\n  }\n\n  if (options.path) {\n    fragment = urlJoin(fragment, options.path);\n  }\n\n\n  return urlJoin('http://' + this.azureKeys.storageAccount + '.' + this.serversUrl + '/',\n    fragment);\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/azure/storage/container.js":"/*\n * container.js: Azure container\n *\n * (C) Microsoft Open Technologies, Inc.\n *\n */\n\nvar util = require('util'),\n    _ = require('lodash'),\n    base  = require('../../core/storage/container');\n\nvar Container = exports.Container = function Container(client, details) {\n  base.Container.call(this, client, details);\n};\n\nutil.inherits(Container, base.Container);\n\nContainer.prototype._setProperties = function (details) {\n  if (typeof details === 'string') {\n    this.name = details;\n    return;\n  }\n\n  this.name = details.Name;\n\n  //\n  // Azure specific\n  //\n  this.original = this.azure = details;\n\n};\n\nContainer.prototype.toJSON = function () {\n  return _.pick(this, ['name']);\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/azure/storage/file.js":"/*\n * container.js: Azure File (Blob)\n *\n * (C) Microsoft Open Technologies, Inc.\n *\n */\n\nvar util = require('util'),\n    _ = require('lodash'),\n    base  = require('../../core/storage/file');\n\nvar File = exports.File = function File(client, details) {\n  base.File.call(this, client, details);\n};\n\nutil.inherits(File, base.File);\n\nFile.prototype._setProperties = function (details) {\n  this.container = details.container;\n\n  if (details.Properties) {\n    var properties = details.Properties;\n    this.name = details.Name;\n    this.size = (properties && properties['Content-Length']) ? parseInt(properties['Content-Length'], 10) : 0;\n  } else {\n    this.name = details.name;\n    this.size = (details['content-length']) ? parseInt(details['content-length'], 10) : 0;\n  }\n};\n\nFile.prototype.toJSON = function () {\n  return _.pick(this, ['name', 'size', 'container' ]);\n};","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/azure/storage/utils.js":"var util = require('util'),\n    Stream = require('stream').Stream;\n\nvar ChunkedStream = exports.ChunkedStream = function ChunkedStream(chunk) {\n  Stream.call(this);\n\n  this.writable = true;\n  this.readable = true;\n\n  this.ended = false;\n  this.paused = false;\n  this.size = 0;\n  this.chunk = chunk;\n  this.buffer = [];\n  this.chunkBuffer = [];\n};\n\nutil.inherits(ChunkedStream, Stream);\n\nChunkedStream.prototype.write = function write(data, encoding) {\n  if (!Buffer.isBuffer(data)) {\n    data = new Buffer(data, encoding);\n  }\n  this.buffer.push(data);\n  this.size += data.length;\n\n  // Split data in chunks\n  while (this.size >= this.chunk) {\n    var total = 0,\n        parts = [];\n\n    this.buffer = this.buffer.filter(function (part) {\n      if (total >= this.chunk) {\n        return true;\n      }\n\n      parts.push(part);\n      total += part.length;\n      return false;\n    }, this);\n\n    // Last chunk is bigger than we need\n    if (total > this.chunk) {\n      var last = parts[parts.length - 1],\n          splitPos = last.length - total + this.chunk,\n          head = last.slice(0, splitPos),\n          tail = last.slice(splitPos);\n\n      parts[parts.length - 1] = head;\n\n      // Return tail back to main buffer\n      this.buffer.unshift(tail);\n    }\n\n    this.emitChunk(Buffer.concat(parts, this.chunk));\n    this.size -= this.chunk;\n  }\n\n  if (this.paused) {\n    return false;\n  }\n};\n\nChunkedStream.prototype.end = function end() {\n  if (this.ended) {\n    return;\n  }\n\n  // Emit all left data\n  this.ended = true;\n  this.emitChunk(Buffer.concat(this.buffer, this.size));\n  this.buffer = [];\n  this.size = 0;\n\n  this.emit('end');\n};\nChunkedStream.prototype.close = ChunkedStream.prototype.end;\n\nChunkedStream.prototype.emitChunk = function emitChunk(chunk) {\n  if (this.paused) {\n    this.chunkBuffer.push(chunk);\n    return;\n  }\n  this.emit('data', chunk);\n};\n\nChunkedStream.prototype.pause = function pause() {\n  if (this.paused) {\n    return;\n  }\n\n  this.paused = true;\n};\n\nChunkedStream.prototype.resume = function resume() {\n  if (!this.paused) {\n    return;\n  }\n\n  this.paused = false;\n\n  // Emit all accumulated data\n  this.chunkBuffer.forEach(function (chunk) {\n    this.emit('data', chunk);\n  }, this);\n  this.chunkBuffer = [];\n\n  this.emit('drain');\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/azure/database/index.js":"/*\n * index.js: Top-level include for the Azure Tables database module\n *\n * (C) Microsoft Open Technologies, Inc.\n *\n */\n\nexports.Client    = require('./client').Client;\n\nexports.createClient = function createClient(options) {\n  return new exports.Client(options);\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/azure/database/client/index.js":"/*\n * client.js: Database client for Azure Tables Cloud Databases\n *\n * (C) Microsoft Open Technologies, Inc.\n *\n */\n\nvar util = require('util'),\n    urlJoin = require('url-join'),\n    auth = require('../../../common/auth'),\n    azureApi = require('../../utils/azureApi.js'),\n    xml2JSON = require('../../utils/xml2json.js').xml2JSON,\n    azure = require('../../client'),\n    _ = require('lodash');\n\nvar Client = exports.Client = function (options) {\n  azure.Client.call(this, options);\n\n  this.serversUrl = options.serversUrl || azureApi.TABLES_ENDPOINT;\n\n  // add the auth keys for request authorization\n  this.azureKeys = {};\n  this.azureKeys.storageAccount = this.config.storageAccount;\n  this.azureKeys.storageAccessKey = this.config.storageAccessKey;\n\n  this.before.push(auth.azure.tablesSignature);\n  _.extend(this, require('./databases'));\n};\n\nutil.inherits(Client, azure.Client);\n\n//\n// Gets the version of the Azure Tables API we are running against\n// Parameters: callback\n//\nClient.prototype.getVersion = function getVersion(callback) {\n  return callback(null, azureApi.TABLES_API_VERSION);\n};\n\nClient.prototype._getUrl = function (options) {\n  options = options || {};\n\n  return urlJoin('http://' + this.azureKeys.storageAccount + '.' + this.serversUrl + '/',\n    (typeof options === 'string'\n      ? options\n      : options.path));\n};\n\nClient.prototype._xmlRequest = function query(options, callback) {\n  return this._request(options, function (err, body, res) {\n    if (err) {\n      return callback(err);\n    }\n    xml2JSON(body, function (err, data) {\n      return err\n        ? callback(err)\n        : callback(err, data, res);\n    });\n  });\n};\n\n// Function formatResponse\n// This function parse the response from the provider and return an object\n// with the correct keys and values.\n// ### @response {Object} The body response from the provider api\nClient.prototype.formatResponse = function (response) {\n  var database = {\n    id: response.content['m:properties']['d:TableName'],\n    host: this._getUrl(),\n    uri: response.id,\n    username: '',\n    password: ''\n  };\n  return database;\n};\n\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/digitalocean/index.js":"/*\n * index.js: Top-level include for the DigitalOcean module.\n *\n * (C) 2013 Charlie Robbins, Ken Perkins, Ross Kukulinski & the Contributors.\n *\n */\n\nexports.compute = require('./compute');\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/digitalocean/compute/index.js":"/*\n * index.js: Top-level include for the DigitalOcean compute module\n *\n * (C) 2012 Charlie Robbins, Ken Perkins, Ross Kukulinski & the Contributors.\n *\n */\n\nexports.Client = require('./client').Client;\nexports.Flavor = require('./flavor').Flavor;\nexports.Image  = require('./image').Image;\nexports.Server = require('./server').Server;\n\nexports.createClient = function (options) {\n  return new exports.Client(options);\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/digitalocean/compute/client/index.js":"/*\n * index.js: Compute client for DigitalOcean API\n *\n * (C) 2012 Charlie Robbins, Ken Perkins, Ross Kukulinski & the Contributors.\n *\n */\n\nvar util         = require('util'),\n    urlJoin      = require('url-join'),\n    digitalocean = require('../../client'),\n    _ = require('lodash');\n\nvar Client = exports.Client = function (options) {\n  digitalocean.Client.call(this, options);\n\n  _.extend(this, require('./flavors'));\n  _.extend(this, require('./images'));\n  _.extend(this, require('./servers'));\n  _.extend(this, require('./keys'));\n};\n\nutil.inherits(Client, digitalocean.Client);\n\nClient.prototype._getUrl = function (options) {\n  options = options || {};\n\n  var root = this.serversUrl\n    ? this.protocol + this.serversUrl\n    : this.protocol + 'api.digitalocean.com';\n\n  return urlJoin(root, typeof options === 'string'\n    ? options\n    : options.path);\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/digitalocean/client.js":"/*\n * client.js: Base client from which all Joyent clients inherit from\n *\n * (C) 2012 Charlie Robbins, Ken Perkins, Ross Kukulinski & the Contributors.\n *\n */\n\nvar util = require('util'),\n    base  = require('../core/base');\n\n//\n// ### constructor (options)\n// #### @opts {Object} an object literal with options\n// ####     @clientKey {String} Client key\n// ####     @apiKey    {String} API key\n// #### @throws {TypeError} On bad input\n//\nvar Client = exports.Client = function (opts) {\n  if (!opts || !opts.token) {\n    throw new TypeError('token is required');\n  }\n\n  base.Client.call(this, opts);\n\n  this.provider = 'digitalocean';\n  this.protocol = opts.protocol || 'https://';\n  this.serversUrl = opts.serversUrl;\n\n  if (!this.before) {\n    this.before = [];\n  }\n\n  this.before.push(function setJSON(req) {\n    req.json = true;\n    if (typeof req.body !== 'undefined') {\n      req.json = req.body;\n      delete req.body;\n    }\n  });\n\n  this.before.push(function setAuth(req) {\n    req.headers = req.headers || {};\n    req.headers.authorization = [\n      'Bearer', opts.token\n    ].join(' ');\n  });\n};\n\nutil.inherits(Client, base.Client);\n\nClient.prototype.failCodes = {\n  400: 'Bad Request',\n  401: 'Unauthorized',\n  403: 'Forbidden',\n  404: 'Not Found',\n  405: 'Method Not Allowed',\n  406: 'Not Acceptable',\n  409: 'Conflict',\n  413: 'Request Entity Too Large',\n  415: 'Unsupported Media Type',\n  420: 'Slow Down',\n  449: 'Retry With',\n  500: 'Internal Error',\n  503: 'Service Unavailable'\n};\n\nClient.prototype.successCodes = {\n  200: 'OK',\n  201: 'Created',\n  202: 'Accepted',\n  203: 'Non-authoritative information',\n  204: 'No content'\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/digitalocean/compute/flavor.js":"/*\n * flavor.js: DigitalOcean Server \"Size\"\n *\n * (C) 2012 Charlie Robbins, Ken Perkins, Ross Kukulinski & the Contributors.\n *\n */\n\nvar util = require('util'),\n    base  = require('../../core/compute/flavor');\n\nvar Flavor = exports.Flavor = function Flavor(client, details) {\n  base.Flavor.call(this, client, details);\n};\n\nutil.inherits(Flavor, base.Flavor);\n\nFlavor.prototype._setProperties = function (details) {\n  this.id   = details.slug;\n  this.name = details.slug;\n  this.ram  = details.memory;\n  this.disk = details.disk;\n\n  //\n  // DigitalOcean specific\n  //\n  this.cpu          = details.vcpus;\n  this.costPerHour  = details.price_hourly;\n  this.costPerMonth = details.price_monthly;\n  this.original     = this.digitalocean = details;\n};","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/digitalocean/compute/image.js":"/*\n * image.js: DigitalOcean Image\n *\n * (C) 2012 Charlie Robbins, Ken Perkins, Ross Kukulinski & the Contributors.\n *\n */\n\nvar util = require('util'),\n    base  = require('../../core/compute/image');\n\nvar Image = exports.Image = function Image(client, details) {\n  base.Image.call(this, client, details);\n};\n\nutil.inherits(Image, base.Image);\n\nImage.prototype._setProperties = function (details) {\n  this.id   = details.id;\n  this.name = details.name;\n  this.created = details.created_at;\n\n  //\n  // DigitalOcean specific\n  //\n  this.distribution = details.distribution;\n  this.public = details.public;\n  this.slug = details.slug;\n  this.original     = this.digitalocean = details;\n};","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/digitalocean/compute/server.js":"/*\n * server.js: DigitalOcean Server\n *\n * (C) 2013 Charlie Robbins, Ken Perkins, Ross Kukulinski & the Contributors.\n *\n */\n\nvar util    = require('util'),\n    base    = require('../../core/compute/server');\n\nvar Server = exports.Server = function Server(client, details) {\n  base.Server.call(this, client, details);\n};\n\nutil.inherits(Server, base.Server);\n\nServer.prototype._setProperties = function (details) {\n  var self = this;\n\n  function getAddresses(networks) {\n    networks.forEach(function (network) {\n      self.addresses[network.type].push(network.ip_address);\n    });\n  }\n\n  this.id        = details.id;\n  this.name      = details.name;\n  this.imageId   = details.image.id;\n  this.flavorId  = details.size_slug;\n  this.addresses = {\n    public: [],\n    private: []\n  };\n\n  if (details.networks.v4) {\n    getAddresses(details.networks.v4);\n  }\n\n  if (details.networks.v6) {\n    getAddresses(details.networks.v6);\n  }\n\n  switch (details.status && details.status.toUpperCase()) {\n    case 'ACTIVE':\n      this.status = 'RUNNING';\n      break;\n    case 'OFF':\n      this.status = this.STATUS.stopped;\n      break;\n    case 'NEW':\n    default:\n      this.status = 'PROVISIONING';\n  }\n\n  //\n  // DigitalOcean specific\n  //\n  this.region   = details.region_id;\n  this.created  = details.created_at;\n  this.original = this.digitalocean = details;\n};\n\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/google/index.js":"/*\n * index.js: Top-level include for the Google Cloud Storage module.\n *\n * (C) 2012 Charlie Robbins, Ken Perkins, Ross Kukulinski & the Contributors.\n *\n */\n\nexports.storage = require('./storage');\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/google/storage/index.js":"/*\n * index.js: Top-level include for the Google Cloud Storage module\n *\n * (C) 2012 Charlie Robbins, Ken Perkins, Ross Kukulinski & the Contributors.\n *\n */\n\nexports.Client = require('./client').Client;\nexports.Container = require('./container').Container;\nexports.File  = require('./file').File;\n\nexports.createClient = function (options) {\n  return new exports.Client(options);\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/google/storage/client/index.js":"/*\n * client.js: Storage client for Google Cloud Storage\n *\n * (C) 2011 Charlie Robbins, Ken Perkins, Ross Kukulinski & the Contributors.\n *\n */\n\nvar util = require('util'),\n  google = require('../../client'),\n  _ = require('lodash'),\n  pkgcloud = require('../../../../../lib/pkgcloud');\n\nvar Client = exports.Client = function (options) {\n  google.Client.call(this, options);\n\n  _.extend(this, require('./containers'));\n  _.extend(this, require('./files'));\n\n  this.storage = this.gcloud.storage(options);\n};\n\nutil.inherits(Client, google.Client);\n\n/**\n * Return a gcloud Bucket instance after detecting its name from a variety of\n * parameter types.\n *\n * @param {object|string} container - A descriptor for a gcloud Bucket.\n * @return {gcloud:bucket}\n */\nClient.prototype._getBucket = function (container) {\n  container = container.container || container;\n\n  var storage = pkgcloud.providers.google.storage,\n    containerName = container instanceof storage.Container ? container.name : container;\n\n  return this.storage.bucket(containerName || container);\n};\n\n/**\n * Return a gcloud File instance after detecting its name from a variety of\n * parameter types.\n *\n * @param {gcloud:bucket} bucket - A gcloud Bucket instance, which contains the file.\n * @param {object|string} file - A descriptor for a gcloud File.\n * @return {gcloud:file}\n */\nClient.prototype._getFile = function (bucket, file) {\n  file = file.file || file.remote || file;\n\n  var storage = pkgcloud.providers.google.storage,\n    fileName = file instanceof storage.File ? file.name : file;\n\n  return bucket.file(fileName || file);\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/google/client.js":"/*\n * client.js: Base client from which all Google Cloud Storage clients inherit from\n *\n * (C) 2012 Charlie Robbins, Ken Perkins, Ross Kukulinski & the Contributors.\n *\n */\n\nvar util = require('util'),\n  gcloud = require('gcloud'),\n  base = require('../core/base');\n\nvar Client = exports.Client = function (options) {\n  base.Client.call(this, options);\n\n  options = options || {};\n\n  this.provider = 'google';\n  this.config.keyFilename = this.config.keyFilename || options.keyFilename;\n  this.config.projectId = this.config.projectId || options.projectId;\n\n  this.gcloud = gcloud(this.config);\n};\n\nutil.inherits(Client, base.Client);\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/google/storage/container.js":"/*\n * container.js: Google Cloud Storage Bucket\n *\n * (C) 2012 Charlie Robbins, Ken Perkins, Ross Kukulinski & the Contributors.\n *\n */\n\nvar util = require('util'),\n  base  = require('../../core/storage/container'),\n  _ = require('lodash');\n\nvar Container = exports.Container = function Container(client, details) {\n  base.Container.call(this, client, details);\n};\n\nutil.inherits(Container, base.Container);\n\nContainer.prototype._setProperties = function (bucket) {\n  this.name = bucket.name;\n  this.metadata = bucket.metadata;\n  _.extend(this, bucket.metadata);\n};\n\nContainer.prototype.toJSON = function () {\n  return this.metadata;\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/google/storage/file.js":"/*\n * container.js: Google Cloud Storage File\n *\n * (C) 2012 Charlie Robbins, Ken Perkins, Ross Kukulinski & the Contributors.\n *\n */\n\nvar util  = require('util'),\n  base  = require('../../core/storage/file'),\n  _ = require('lodash');\n\nvar File = exports.File = function File(client, details) {\n  base.File.call(this, client, details);\n};\n\nutil.inherits(File, base.File);\n\nFile.prototype._setProperties = function (file) {\n  this.name = file.name;\n  this.metadata = file.metadata;\n  _.extend(this, file.metadata);\n\n  if (this.size) {\n    this.size = parseInt(this.size, 10);\n  }\n};\n\nFile.prototype.toJSON = function () {\n  return this.metadata;\n};","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/iriscouch/index.js":"/*\n * index.js: Top-level include for the iriscouch module.\n *\n * (C) 2011 Charlie Robbins, Ken Perkins, Ross Kukulinski & the Contributors.\n *\n */\n\nexports.database = require('./database');\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/iriscouch/database/index.js":"/*\n * index.js: Top-level include for the Iriscouch database module\n *\n * (C) 2011 Charlie Robbins, Ken Perkins, Ross Kukulinski & the Contributors.\n *\n */\n\nexports.Client    = require('./client').Client;\n\nexports.createClient = function createClient(options) {\n  return new exports.Client(options);\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/iriscouch/database/client/index.js":"/*\n * client.js: Database client for Iriscouch Cloud Databases\n *\n * (C) 2011 Charlie Robbins, Ken Perkins, Ross Kukulinski & the Contributors.\n *\n */\n\nvar util      = require('util'),\n    request   = require('request'),\n    pkgcloud  = require('../../../../pkgcloud'),\n    errs      = require('errs');\n\nvar Client = exports.Client = function (options) {\n  this.username = options.username;\n  this.password = options.password;\n\n  this.protocol = options.protocol || 'https://';\n  this.databaseUrl = options.databaseUrl || 'hosting.iriscouch.com/hosting_public';\n};\n\nClient.prototype.create = function (attrs, callback) {\n  // Check for options.\n  if (!attrs || typeof attrs === 'function') {\n    return errs.handle(errs.create({\n      message: 'Options required for create a database.'\n    }), Array.prototype.slice.call(arguments).pop());\n  }\n  // Check for obligatory fields\n  if (!attrs['first_name'] || !attrs['last_name']) {\n    return errs.handle(errs.create({\n      message: 'Options.  first_name and last_name are required arguments'\n    }), Array.prototype.slice.call(arguments).pop());\n  }\n\n  if (!attrs['subdomain'] || !attrs['email']) {\n    return errs.handle(errs.create({\n      message: 'Options.  subdomain and email are required arguments'\n    }), Array.prototype.slice.call(arguments).pop());\n  }\n\n  // If is a redis provisioning request so we have to define a password\n  if (attrs['type'] && attrs['type'] === 'redis' && !attrs['password']) {\n    return errs.handle(errs.create({\n      message: 'Options.  password for redis is a required argument'\n    }), Array.prototype.slice.call(arguments).pop());\n  }\n\n  var self = this,\n    couch = {\n      // The ID needs the prefix of the type of database\n      _id: ((attrs['type'] &&\n        attrs['type'] === 'redis') ? 'Redis/' : 'Server/') + attrs.subdomain,\n      partner:  this.username,\n      creation: {\n        first_name: attrs.first_name,\n        last_name: attrs.last_name,\n        email: attrs.email,\n        subdomain: attrs.subdomain\n      }\n  };\n\n  // When redis so we have to add the password\n  if (attrs['type'] && attrs['type'] === 'redis') {\n    couch.creation.password = attrs['password'];\n  }\n\n  var options = {\n    uri    : this._getUrl(),\n    method : 'POST',\n    body   : JSON.stringify(couch),\n    followRedirect: false,\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': 'Basic ' + new Buffer(this.username + ':' + this.password).toString('base64'),\n      'User-Agent': util.format('nodejs-pkgcloud/%s', pkgcloud.version)\n    }\n  };\n\n  request(options, function (err, response, body) {\n    if (err) {\n      return callback(err);\n    }\n\n    if (typeof body === 'string') {\n      try { body = JSON.parse(body) }\n      catch (ex) { }\n    }\n\n    if (response.statusCode === 201) {\n      if (body.ok === true) {\n        //\n        // For Redis we dont have any polling method yet, so just trust on iriscouch for provisioning correctly\n        //\n        if (attrs['type'] && attrs['type'] === 'redis') {\n          var subdomain = body.id.split('/').pop();\n          callback(err, {\n            id: subdomain,\n            port: 6379,\n            host: subdomain + '.redis.irstack.com',\n            uri: 'redis://' + subdomain + '.redis.irstack.com/',\n            username: '',\n            password: subdomain + '.redis.irstack.com:' + attrs['password']\n          });\n        } else {\n          //\n          // Remark: Begin polling iriscouch to determine when the couch database is ready.\n          //\n          self._checkCouch(attrs.subdomain, function (err, response) {\n            response.subdomain = attrs.subdomain;\n            var database = self.formatResponse(response);\n            callback(err, database);\n          });\n        }\n      }\n      else {\n        callback('There was an issue creating the couch', { created: false });\n      }\n    }\n    else if (response.statusCode === 403 || response.statusCode === 401 || response.statusCode === 302) {\n      callback('incorrect partner name or password.', { created: false });\n    }\n    else if (response.statusCode === 409) {\n      callback('subdomain is already taken.', { created: false });\n    }\n    else {\n      callback('unknown error', { created: false });\n    }\n  });\n};\n\nClient.prototype.formatResponse = function (response) {\n  var database = {\n    id: response.subdomain,\n    port: 6984,\n    host: response.subdomain + '.iriscouch.com',\n    uri: 'https://' + response.subdomain + '.iriscouch.com:6984/',\n    username: '',\n    password: ''\n  };\n  return database;\n};\n\nClient.prototype._getUrl = function () {\n  return this.protocol + this.databaseUrl;\n};\n\nClient.prototype._checkCouch = function (couchName, callback) {\n  //\n  // Remark: Poll the couch with a GET every interval to determine if couch is up yet\n  // We perform a poll since there is no real database available notification event from couchone\n  //\n\n  var interval = 4000,\n      maxAttempts = 20,\n      count = 0,\n      options = {\n        uri    : this._getCouchPollingUrl(couchName),\n        method : 'GET',\n        followRedirect: false,\n        headers: {\n          'Content-Type': 'application/json',\n          'User-Agent': util.format('nodejs-pkgcloud/%s', pkgcloud.version)\n        }\n      },\n\n  t = function () {\n    count = count + 1;\n    if (count > maxAttempts) {\n      return callback('Max Attempts hit', { created: false });\n    }\n    request(options, function (err, response) {\n      if (err) {\n        return callback(err, { created: false });\n      }\n      if (response.statusCode === 200) {\n        return callback(null, { created: true });\n      }\n      setTimeout(t, interval);\n    });\n  };\n  t();\n};\n\nClient.prototype.remove = function (id, callback) {\n  callback('Destroy method not available for iriscouch.');\n};\n\n// This function gets overriden in tests to trap the polling request\nClient.prototype._getCouchPollingUrl = function(couchName) {\n  return 'http://' + couchName + '.iriscouch.com/';\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/joyent/index.js":"/*\n * index.js: Top-level include for the Joyent module.\n *\n * (C) 2012 Charlie Robbins, Ken Perkins, Ross Kukulinski & the Contributors.\n *\n */\n\nexports.compute = require('./compute');\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/joyent/compute/index.js":"/*\n * index.js: Top-level include for the Joyent compute module\n *\n * (C) 2012 Charlie Robbins, Ken Perkins, Ross Kukulinski & the Contributors.\n *\n */\n\nexports.Client = require('./client').Client;\nexports.Flavor = require('./flavor').Flavor;\nexports.Image  = require('./image').Image;\nexports.Server = require('./server').Server;\n\nexports.createClient = function (options) {\n  return new exports.Client(options);\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/joyent/compute/client/index.js":"/*\n * index.js: Compute client for Joyent CloudAPI\n *\n * (C) 2012 Charlie Robbins, Ken Perkins, Ross Kukulinski & the Contributors.\n *\n */\n\nvar util      = require('util'),\n    urlJoin   = require('url-join'),\n    joyent    = require('../../client'),\n    _ = require('lodash');\n\nvar Client = exports.Client = function (options) {\n  joyent.Client.call(this, options);\n\n  _.extend(this, require('./flavors'));\n  _.extend(this, require('./images'));\n  _.extend(this, require('./servers'));\n  _.extend(this, require('./keys'));\n};\n\nutil.inherits(Client, joyent.Client);\n\nClient.prototype._getUrl = function (options) {\n  options = options || {};\n\n  var root = this.serversUrl\n    ? this.protocol + this.serversUrl\n    : this.protocol + 'us-sw-1.api.joyentcloud.com';\n\n  return urlJoin(root, typeof options === 'string'\n    ? options\n    : options.path);\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/joyent/client.js":"/*\n * client.js: Base client from which all Joyent clients inherit from\n *\n * (C) 2012 Charlie Robbins, Ken Perkins, Ross Kukulinski & the Contributors.\n *\n */\n\nvar util = require('util'),\n    fs    = require('fs'),\n    auth  = require('../common/auth'),\n    base  = require('../core/base');\n\n//\n// ### constructor (options)\n// #### @opts {Object} an object literal with options\n// ####     @serversUrl {String} **Optional** CloudAPI Endpoint\n// ####     @apiVersion {String} **Optional** CloudAPI API Version\n// ####     @account    {String} **Optional** CloudAPI Account to connect to\n// ####     @username   {String} **Optional** Login name\n// ####     @password   {String} **Optional** Password that goes with username\n// ####     @keyId      {String} **Optional** SSH KeyId to sign in to cloudapi\n// ####     @key        {String} **Optional** SSH key (PEM) that goes\n// ####     @identity   {String} **Optional** File path of the private key\n// with `keyId`.\n// #### @throws {TypeError} On bad input\n//\n// Creates a new Joyent CloudAPI Client. Even though all @opts are optional\n// you must either provide username/password or keyId/key\n//\nvar Client = exports.Client = function (opts) {\n  if (!opts) {\n    throw new TypeError('options required');\n  }\n\n  if (opts.identity) {\n    opts.key = fs.readFileSync(opts.identity, 'ascii');\n  }\n\n  if (!(opts.username && opts.password) &&\n      !(opts.keyId && opts.key)) {\n    throw new TypeError('Either username/password or keyId/key are required');\n  }\n\n  // default values\n  opts.account    = opts.account    || opts.username || 'my';\n  opts.apiVersion = opts.apiVersion || '~6.5';\n\n  // if a person gives a key id by name that doesn't work in joyent\n  // keys are fully qualified. so we check for `/` in the keyId, if it's not\n  // there we need to do something about it\n  if (opts.keyId && opts.keyId.indexOf('/') === -1) {\n    // this will fail if account was also not properly set and account is\n    // set to `my`.\n    opts.keyId = '/' + opts.account + '/keys/' + opts.keyId;\n  }\n\n  base.Client.call(this, opts);\n\n  this.provider   = 'joyent';\n  this.account    = opts.account;\n  this.serversUrl = opts.serversUrl\n    || process.env.SDC_CLI_URL\n    || 'us-sw-1.api.joyentcloud.com';\n  this.protocol   = opts.protocol || 'https://';\n\n  if (!this.before) { this.before = []; }\n\n  if (opts.key && opts.keyId) {\n    this.before.push(auth.httpSignature);\n  } else {\n    this.before.push(auth.basic);\n  }\n\n  this.before.push(function setReqHeaders(req) {\n    req.json = true;\n    if (typeof req.headers['X-Api-Version'] === 'undefined') {\n      req.headers['x-api-version'] = opts.apiVersion;\n      req.headers.Accept = 'application/json';\n      req.headers['content-type'] = 'application/json';\n    }\n  });\n\n  this.before.push(function setContentTypeAndReqJson(req) {\n    if (typeof req.body !== 'undefined') {\n      req.json = req.body;\n      delete req.body;\n    }\n  });\n};\n\nutil.inherits(Client, base.Client);\n\nClient.prototype.failCodes = {\n  400: 'Bad Request',\n  401: 'Unauthorized',\n  403: 'Forbidden',\n  404: 'Not Found',\n  405: 'Method Not Allowed',\n  406: 'Not Acceptable',\n  409: 'Conflict',\n  413: 'Request Entity Too Large',\n  415: 'Unsupported Media Type',\n  420: 'Slow Down',\n  449: 'Retry With',\n  500: 'Internal Error',\n  503: 'Service Unavailable'\n};\n\nClient.prototype.successCodes = {\n  200: 'OK',\n  201: 'Created',\n  202: 'Accepted',\n  203: 'Non-authoritative information',\n  204: 'No content'\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/joyent/compute/flavor.js":"/*\n * flavor.js: Joyent Cloud Package\n *\n * (C) 2012 Charlie Robbins, Ken Perkins, Ross Kukulinski & the Contributors.\n *\n */\n\nvar util = require('util'),\n    base  = require('../../core/compute/flavor');\n\nvar Flavor = exports.Flavor = function Flavor(client, details) {\n  base.Flavor.call(this, client, details);\n};\n\nutil.inherits(Flavor, base.Flavor);\n\nFlavor.prototype._setProperties = function (details) {\n  this.id         = details.name;\n  this.name       = details.name;\n  this.ram        = details.memory;\n  this.disk       = details.disk;\n\n  //\n  // Joyent specific\n  //\n  this.swap       = details.swap;\n  this['default'] = details['default'];\n  this.original   = this.joyent = details;\n};","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/joyent/compute/image.js":"/*\n * image.js: Joyent Cloud DataSet\n *\n * (C) 2012 Charlie Robbins, Ken Perkins, Ross Kukulinski & the Contributors.\n *\n */\n\nvar util = require('util'),\n    base  = require('../../core/compute/image');\n\nvar Image = exports.Image = function Image(client, details) {\n  base.Image.call(this, client, details);\n};\n\nutil.inherits(Image, base.Image);\n\nImage.prototype._setProperties = function (details) {\n  this.id           = details.urn;\n  this.name         = details.name;\n  this.created      = details.created;\n\n  //\n  // Joyent specific\n  //\n  this.urn          = details.urn;\n  this.joyentId     = details.id;\n  this.os           = details.os;\n  this.type         = details.type;\n  this.description  = details.description;\n  this['default']   = details['default'];\n  this.version      = details.version;\n  this.requirements = details.requirements;\n  this.original     = this.rackspace = details;\n};","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/joyent/compute/server.js":"/*\n * server.js: Joyent Cloud Machine\n *\n * (C) 2012 Charlie Robbins, Ken Perkins, Ross Kukulinski & the Contributors.\n *\n */\n\nvar util    = require('util'),\n    compute = require('../../core/compute'),\n    base    = require('../../core/compute/server');\n\nvar Server = exports.Server = function Server(client, details) {\n  base.Server.call(this, client, details);\n};\n\nutil.inherits(Server, base.Server);\n\nServer.prototype._setProperties = function (details) {\n  this.id   = details.id;\n  this.name = details.name;\n\n  if (details.state) {\n    switch (details.state.toUpperCase()) {\n      case 'PROVISIONING':\n        this.status = this.STATUS.provisioning;\n        break;\n      case 'RUNNING':\n        this.status = this.STATUS.running;\n        break;\n      case 'STOPPING':\n      case 'STOPPED':\n        this.status = this.STATUS.stopped;\n        break;\n      default:\n        this.status = this.STATUS.unknown;\n        break;\n    }\n  }\n\n  var addresses = details.ips.reduce(function (all, addr) {\n    if (compute.isPrivate(addr)) {\n      all['private'].push(addr);\n    }\n    else {\n      all['public'].push(addr);\n    }\n\n    return all;\n  }, { 'private': [], 'public': [] });\n\n  //\n  // Joyent specific\n  //\n  this.ips       = details.ips;\n  this.imageId   = details.dataset;\n  this.addresses = details.addresses = addresses;\n  this.created   = details.created;\n  this.updated   = details.updated;\n  this.type      = details.type;\n  this.ram       = details.memory;\n  this.disk      = details.disk;\n  this.metadata  = details.metadata;\n  this.original  = this.joyent = details;\n  this.adminPass = details.metadata && details.metadata.credentials &&\n    details.metadata.credentials.admin;\n\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/mongohq/index.js":"/*\n * index.js: Top-level include for the mongohq module.\n *\n * (C) 2012 Charlie Robbins, Ken Perkins, Ross Kukulinski & the Contributors.\n *\n */\n\nexports.database = require('./database');\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/mongohq/database/index.js":"/*\n * index.js: Top-level include for the MongoHQ database module\n *\n * (C) 2012 Charlie Robbins, Ken Perkins, Ross Kukulinski & the Contributors.\n *\n */\n\nexports.Client    = require('./client').Client;\n\nexports.createClient = function createClient(options) {\n  return new exports.Client(options);\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/mongohq/database/client/index.js":"/*\n * index.js: Database client for MongoHQ Cloud Databases\n *\n * (C) 2012 Charlie Robbins, Ken Perkins, Ross Kukulinski & the Contributors.\n *\n */\n\nvar util      = require('util'),\n    urlJoin   = require('url-join'),\n    base      = require('../../../core/base'),\n    auth      = require('../../../common/auth'),\n    _ = require('lodash');\n\nvar Client = exports.Client = function (options) {\n  base.Client.call(this, options);\n\n  if (!this.before) {\n    this.before = [];\n  }\n\n  this.protocol = options.protocol || 'https://';\n  this.databaseUrl = options.databaseUrl || 'providers.mongohq.com';\n\n  this.before.push(auth.basic);\n\n  _.extend(this, require('./databases'));\n};\n\nutil.inherits(Client, base.Client);\n\nClient.prototype._getUrl = function (options) {\n  options = options || {};\n\n  return urlJoin([this.protocol + this.databaseUrl, 'provider'].join('/'),\n    typeof options === 'string'\n      ? options\n      : options.path);\n};\n\nClient.prototype.failCodes = {\n  400: 'Bad Request',\n  401: 'Unauthorized',\n  403: 'Resize not allowed',\n  404: 'Item or Account not found',\n  409: 'Build in progress',\n  413: 'Over Limit',\n  415: 'Bad Media Type',\n  500: 'Fault',\n  503: 'Service Unavailable'\n};\n\nClient.prototype.successCodes = {\n  200: 'OK',\n  201: 'Created',\n  202: 'Accepted',\n  203: 'Non-authoritative information',\n  204: 'No content'\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/mongolab/index.js":"/*\n * index.js: Top-level include for the MongoLab module.\n *\n * (C) 2012 Charlie Robbins, Ken Perkins, Ross Kukulinski & the Contributors.\n *\n */\n\nexports.database = require('./database');\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/mongolab/database/index.js":"/*\n * index.js: Top-level include for the MongoLab database module\n *\n * (C) 2012 Charlie Robbins, Ken Perkins, Ross Kukulinski & the Contributors.\n *\n */\n\nexports.Client  = require('./client').Client;\n\nexports.createClient = function createClient(options) {\n  return new exports.Client(options);\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/mongolab/database/client/index.js":"/*\n * index.js: Database client for MongoLab databases\n *\n * (C) 2012 Charlie Robbins, Ken Perkins, Ross Kukulinski & the Contributors.\n *\n */\n\nvar util      = require('util'),\n    urlJoin   = require('url-join'),\n    base      = require('../../../core/base'),\n    auth      = require('../../../common/auth'),\n    _ = require('lodash');\n\nvar Client = exports.Client = function (options) {\n  base.Client.call(this, options);\n\n  if (!this.before) {\n    this.before = [];\n  }\n\n  this.protocol = options.protocol || 'https://';\n  this.databaseUrl = options.databaseUrl || 'api.mongolab.com';\n\n  this.before.push(auth.basic);\n\n  this.before.push(function (req) {\n    req.json = true;\n    if (typeof req.body !== 'undefined') {\n      req.headers['Content-Type'] = 'application/json';\n      req.body = JSON.stringify(req.body);\n    }\n  });\n\n  _.extend(this, require('./databases'));\n  _.extend(this, require('./accounts'));\n};\n\nutil.inherits(Client, base.Client);\n\nClient.prototype._getUrl = function (options) {\n  options = options || {};\n\n  var root = [this.protocol + this.databaseUrl,\n    'api', '1', 'partners', (this.config.username)\n      ? this.config.username\n      : ''].join('/');\n\n  return urlJoin(root, typeof options === 'string'\n    ? options\n    : options.path);\n};\n\nClient.prototype.failCodes = {\n  400: 'Bad Request',\n  401: 'Unauthorized',\n  403: 'Resize not allowed',\n  404: 'Item or Account not found',\n  409: 'Build in progress',\n  413: 'Over Limit',\n  415: 'Bad Media Type',\n  500: 'Fault',\n  503: 'Service Unavailable'\n};\n\nClient.prototype.successCodes = {\n  200: 'OK',\n  201: 'Created',\n  202: 'Accepted',\n  203: 'Non-authoritative information',\n  204: 'No content'\n};","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/openstack/index.js":"/*\n * index.js: Top-level include for the OpenStack module.\n *\n * (C) 2013 Charlie Robbins, Ken Perkins, Ross Kukulinski & the Contributors.\n *\n */\n\nexports.blockstorage = require('./blockstorage');\nexports.compute = require('./compute');\nexports.identity = require('./identity');\nexports.orchestration = require('./orchestration');\nexports.network = require('./network');\nexports.storage = require('./storage');\nexports.database = require('./database');\nexports.cdn = require('./cdn');\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/openstack/blockstorage/index.js":"/*\n * index.js: Top-level include for the Openstack Block Storage module\n *\n * (C) 2014 Rackspace\n *      Ken Perkins\n * MIT LICENSE\n *\n */\n\nexports.Client = require('./client').Client;\nexports.Volume = require('./volume').Volume;\nexports.VolumeType = require('./volumetype').VolumeType;\nexports.Snapshot = require('./snapshot').Snapshot;\n\nexports.createClient = function (options) {\n  return new exports.Client(options);\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/openstack/blockstorage/client/index.js":"/*\n * index.js: Openstack cinder (blockstorage) client\n *\n * (C) 2014 Rackspace\n *      Ken Perkins\n * MIT LICENSE\n *\n */\n\nvar util = require('util'),\n    urlJoin = require('url-join'),\n    openstack = require('../../client'),\n    _ = require('lodash');\n\nvar Client = exports.Client = function (options) {\n  openstack.Client.call(this, options);\n\n  _.extend(this, require('./volumetypes'));\n  _.extend(this, require('./snapshots'));\n  _.extend(this, require('./volumes'));\n\n  this.serviceType = 'volume';\n};\n\nutil.inherits(Client, openstack.Client);\n\nClient.prototype._getUrl = function (options) {\n  options = options || {};\n\n  return urlJoin(this._serviceUrl,\n    typeof options === 'string'\n      ? options\n      : options.path);\n\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/openstack/client.js":"/*\n * client.js: Base client from which all OpenStack clients inherit from\n *\n * (C) 2013 Charlie Robbins, Ken Perkins, Ross Kukulinski & the Contributors.\n * (C) 2015 IBM Corp.\n *\n */\n\nvar util = require('util'),\n    through = require('through2'),\n    base = require('../core/base'),\n    errs = require('errs'),\n    context = require('./context');\n\n/**\n * Client\n *\n * @description Base client from which all OpenStack clients inherit from,\n * inherits from core.Client\n *\n * @type {Function}\n */\nvar Client = exports.Client = function (options) {\n\n  var self = this;\n\n  options.earlyTokenTimeout = typeof options.earlyTokenTimeout === 'number'\n    ? options.earlyTokenTimeout\n    : (1000 * 60 * 5);\n\n  base.Client.call(this, options);\n\n  options.identity = options.identity || context.Identity;\n\n  this.authUrl    = options.authUrl || 'auth.api.trystack.org';\n  this.provider   = 'openstack';\n  this.region     = options.region;\n  this.tenantId   = options.tenantId;\n  this.version    = options.version || 'v2.0';\n  this.keystoneAuthVersion = options.keystoneAuthVersion || 'v2.0';\n\n  if (!/^http[s]?\\:\\/\\//.test(this.authUrl)) {\n    this.authUrl = 'http://' + this.authUrl;\n  }\n\n  if (!this.before) {\n    this.before = [];\n  }\n\n  this.before.push(function (req) {\n    req.headers = req.headers || {};\n    req.headers['x-auth-token'] = this._identity ? this._identity.token.id : this.config.authToken;\n  });\n\n  this.before.push(function (req) {\n    if (req.headers['Content-Type'] && req.headers['Content-Type'] !== 'application/json') {\n      req.json = false;\n      return;\n    }\n    req.json = true;\n    if (typeof req.body !== 'undefined') {\n      req.headers['Content-Type'] = 'application/json';\n    }\n  });\n\n  this._identity = new options.identity(this._getIdentityOptions());\n\n  this._identity.on('log::*', function(message, object) {\n    self.emit(this.event, message, object);\n  });\n\n  this._serviceUrl = null;\n};\n\nutil.inherits(Client, base.Client);\n\nClient.prototype._getIdentityOptions = function() {\n  var options = {\n    url: this.authUrl,\n    version: this.version,\n    username: this.config.username,\n    password: this.config.password,\n    keystoneAuthVersion: this.keystoneAuthVersion\n  };\n\n  options.strictSSL = typeof this.config.strictSSL === 'boolean'\n  ? this.config.strictSSL : true;\n\n  if (this.config.domainId) {\n    options.domainId = this.config.domainId;\n  } else if (this.config.domainName) {\n    options.domainName = this.config.domainName;\n  }\n\n  if (this.config.projectDomainName) {\n    options.projectDomainName = this.config.projectDomainName;\n  } else if (this.config.projectDomainId) {\n    options.projectDomainId = this.config.projectDomainId;\n  }\n\n  if (this.config.tenantId) {\n    options.tenantId = this.config.tenantId;\n  }\n  else if (this.config.tenantName) {\n    options.tenantName = this.config.tenantName;\n  }\n\n  if (typeof this.config.useServiceCatalog === 'boolean') {\n    options.useServiceCatalog = this.config.useServiceCatalog;\n  }\n\n  if (this.config.basePath) {\n    options.basePath = this.config.basePath;\n  }\n\n  if (this.config.headers) {\n    options.token = this.config.headers.authorization;\n  }\n\n  return options;\n};\n\nClient.prototype.failCodes = {\n  400: 'Bad Request',\n  401: 'Unauthorized',\n  403: 'Resize not allowed',\n  404: 'Item not found',\n  409: 'Build in progress',\n  413: 'Over Limit',\n  415: 'Bad Media Type',\n  422: 'Unprocessable Entity',\n  500: 'Fault',\n  503: 'Service Unavailable'\n};\n\nClient.prototype.successCodes = {\n  200: 'OK',\n  201: 'Created',\n  202: 'Accepted',\n  203: 'Non-authoritative information',\n  204: 'No content'\n};\n\n/**\n * Client.auth\n *\n * @description This function handles the primary authentication for OpenStack\n * and, if successful, sets an identity object on the client\n *\n * @param callback\n */\nClient.prototype.auth = function (callback) {\n  var self = this;\n\n  if (self._isAuthorized()) {\n    callback();\n    return;\n  }\n\n  self._identity.authorize(function(err) {\n    if (err) {\n      return callback(err);\n    }\n\n    var options = {\n      region: self.region,\n      serviceType: self.serviceType,\n      useInternal: self.config.useInternal,\n      useAdmin: self.config.useAdmin\n    };\n\n    try {\n      self._serviceUrl = self._identity.getServiceEndpointUrl(options);\n\n      self.emit('log::trace', 'Selected service url', {\n        serviceUrl: self._serviceUrl,\n        options: options\n      });\n\n      callback();\n    }\n    catch (e) {\n      self.emit('log::error', 'Unable to select endpoint for service', {\n        error: e.toString(),\n        options: options\n      });\n      callback(e);\n    }\n  });\n};\n\n/**\n * Client._request\n *\n * @description custom request implementation for supporting inline auth for\n * OpenStack. this allows piping while not yet possessing a valid auth token\n *\n * @param {object}          options     options for this client request\n * @param {Function}        callback    the callback for the client request\n * @private\n */\nClient.prototype._request = function (options, callback) {\n\n  var self = this;\n  if (!self._isAuthorized()) {\n    self.emit('log::trace', 'Not-Authenticated, inlining Auth...');\n    var proxyStream = through();\n    proxyStream.pause();\n\n    self.auth(function (err) {\n      if (err) {\n        self.emit('log::error', 'Error with inline authentication', err);\n        if (callback) {\n          return errs.handle(err, callback);\n        }\n\n        return errs.handle(err, function (err) {\n          if (err) {\n            proxyStream.emit('error', err);\n          }\n        });\n      }\n\n      self.emit('log::trace', 'Creating Authenticated Proxy Request');\n      var apiStream = Client.super_.prototype._request.call(self, options, callback);\n\n      proxyStream.on('abort', function () {\n        apiStream.abort();\n      });\n\n      proxyStream.abort = function () {\n        apiStream.abort();\n      };\n\n      if (options.upload) {\n\n        // needed for event propagation during proxied auth for streams\n        apiStream.on('error', function (err) {\n          proxyStream.emit('error', err);\n        });\n\n        apiStream.on('complete', function (response) {\n          proxyStream.emit('complete', response);\n        });\n\n        proxyStream.pipe(apiStream);\n      }\n      else if (options.download) {\n        apiStream.on('error', function (err) {\n          proxyStream.emit('error', err);\n        });\n\n        apiStream.on('response', function (response) {\n          proxyStream.emit('response', response);\n        });\n        apiStream.pipe(proxyStream);\n      }\n\n      proxyStream.resume();\n    });\n\n    return proxyStream;\n  }\n  else {\n    self.emit('log::trace', 'Creating Authenticated Request');\n    return Client.super_.prototype._request.call(self, options, callback);\n  }\n};\n\nClient.prototype._isAuthorized = function () {\n  var self = this,\n      authorized = false;\n\n  if (!self._serviceUrl || !self._identity || !self._identity.token || !self._identity.token.id || !self._identity.token.expires) {\n    authorized = false;\n  }\n  else if (self._identity.token.expires.getTime() - new Date().getTime() > self.config.earlyTokenTimeout) {\n    authorized = true;\n  }\n\n  return authorized;\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/openstack/context/index.js":"/*\n * index.js: Top-level include for the OpenStack identity module\n *\n * (C) 2013 Charlie Robbins, Ken Perkins, Ross Kukulinski & the Contributors.\n *\n */\n\nmodule.exports = require('./identity');\nmodule.exports.serviceCatalog = require('./serviceCatalog');\nmodule.exports.service = require('./service');\nmodule.exports.ServiceCatalog = module.exports.serviceCatalog.ServiceCatalog;\nmodule.exports.Service = module.exports.service.Service;\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/openstack/context/identity.js":"/*\n * identity.js: Identity for openstack authentication\n *\n * (C) 2013 Rackspace, Ken Perkins\n * (C) 2015 IBM Corp.\n * MIT LICENSE\n *\n */\n\nvar _ = require('lodash'),\n    events = require('eventemitter2'),\n    request = require('request'),\n    ServiceCatalog = require('./serviceCatalog').ServiceCatalog,\n    urlJoin = require('url-join'),\n    util = require('util'),\n    pkgcloud = require('../../../pkgcloud');\n\n// TODO refactor failCodes, getError into global handlers\nvar failCodes = {\n  400: 'Bad Request',\n  401: 'Unauthorized',\n  403: 'Resize not allowed',\n  404: 'Item not found',\n  405: 'Bad Method',\n  409: 'Build in progress',\n  413: 'Over Limit',\n  415: 'Bad Media Type',\n  500: 'Fault',\n  503: 'Service Unavailable'\n};\n\nfunction getError(err, res, body) {\n  if (err) {\n    return err;\n  }\n\n  var statusCode = res.statusCode.toString(),\n    err2;\n\n  if (Object.keys(failCodes).indexOf(statusCode) !== -1) {\n    //\n    // TODO: Support more than JSON errors here\n    //\n    err2 = {\n      failCode: failCodes[statusCode],\n      statusCode: res.statusCode,\n      message: 'Error (' +\n        statusCode + '): ' + failCodes[statusCode],\n      href: res.request.uri.href,\n      method: res.request.method,\n      headers: res.headers\n    };\n\n    try {\n      err2.result = typeof body === 'string' ? JSON.parse(body) : body;\n    } catch (e) {\n      err2.result = { err: body };\n    }\n\n    return err2;\n  }\n}\n\n/**\n * Identity object\n *\n * @description Base Identity object for Openstack Keystone\n *\n * @param options\n * @constructor\n */\nvar Identity = exports.Identity = function (options) {\n  var self = this;\n\n  events.EventEmitter2.call(this, { delimiter: '::', wildcard: true });\n\n  self.options = options || {};\n  self.name = 'OpenstackIdentity';\n  self.basePath = options.basePath || (options.keystoneAuthVersion === 'v3' ? '/v3/auth/tokens' : '/v2.0/tokens');\n  self.useServiceCatalog = (typeof options.useServiceCatalog === 'boolean')\n    ? options.useServiceCatalog\n    : true;\n\n  _.each(['url'], function (value) {\n    if (!self.options[value]) {\n      throw new Error('options.' + value + ' is a required option');\n    }\n  });\n};\n\nutil.inherits(Identity, events.EventEmitter2);\n\n/**\n * Identity.authorize\n *\n * @description this function is the guts of authorizing against an openstack\n * identity endpoint.\n * @param {object}  options   the options for authorization\n * @param callback\n */\nIdentity.prototype.authorize = function (options, callback) {\n  var self = this;\n\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n  var authenticationOptions = {\n    uri: urlJoin(options.url || self.options.url, self.basePath),\n    method: 'POST',\n    strictSSL: options.strictSSL || self.options.strictSSL,\n    headers: {\n      'User-Agent': util.format('nodejs-pkgcloud/%s', pkgcloud.version),\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    }\n  };\n  if (self.options.headers) {\n    for (var header in self.options.headers) {\n      if (self.options.headers.hasOwnProperty(header)) {\n          authenticationOptions.headers[header] = self.options.headers[header];\n      }\n    }\n  }\n\n  if (self.options.version === 1 || self.options.version === '/v1.0') {\n    authenticationOptions.uri = urlJoin(options.url || self.options.url, '/auth/v1.0');\n    authenticationOptions.method = 'GET';\n    authenticationOptions.headers['X-Auth-User'] = self.options.username;\n    authenticationOptions.headers['X-Auth-Key'] = self.options.password;\n  }\n  self._buildAuthenticationPayload();\n\n  // we can't be called without a payload\n  if (!self._authenticationPayload) {\n    return process.nextTick(function () {\n      callback(new Error('Unable to authorize; missing required inputs'));\n    });\n  }\n\n  // Are we filtering down by a tenant?\n  if (self.options.tenantId) {\n    self._authenticationPayload.auth.tenantId = self.options.tenantId;\n  }\n  else if (self.options.tenantName) {\n    self._authenticationPayload.auth.tenantName = self.options.tenantName;\n  }\n\n  authenticationOptions.json = self._authenticationPayload;\n\n  self.emit('log::trace', 'Sending client authorization request', authenticationOptions);\n\n  // Don't keep a copy of the credentials in memory\n  delete self._authenticationPayload;\n  request(authenticationOptions, function (err, response, body) {\n    // check for a network error, or a handled error\n    var err2 = getError(err, response, body);\n\n    if (err2) {\n      return callback(err2);\n    }\n\n    self.emit('log::trace', 'Provider Authentication Response', {\n      href: response.request.uri.href,\n      method: response.request.method,\n      headers: response.headers,\n      statusCode: response.statusCode\n    });\n\n    // If we've been asked to do v1 auth, check the response headers\n    // otherwise, check the body\n    try {\n      if (self.options.version === 1 || self.options.version === '/v1.0') {\n        self._storageUrl = response.headers['x-storage-url'];\n        self.token = {\n          id: response.headers['x-auth-token']\n        };\n        callback();\n      }\n      // If we don't have a tenantId in the response (meaning no service catalog)\n      // go ahead and make a 1-off request to get a tenant and then reauthorize\n      else if (self.options.keystoneAuthVersion !== 'v3' && !body.access.token.tenant) {\n        getTenantId(urlJoin(options.url || self.options.url, '/v2.0/tenants'), body.access.token.id);\n      }\n      else {\n        self._parseIdentityResponse(body, response.headers);\n        callback();\n      }\n    }\n    catch (e) {\n      callback(e);\n    }\n  });\n\n  function getTenantId(endpoint, token) {\n    var tenantOptions = {\n      uri: endpoint,\n      json: true,\n      strictSSL: options.strictSSL || self.options.strictSSL,\n      headers: {\n        'X-Auth-Token': token,\n        'Content-Type': 'application/json',\n        'User-Agent': util.format('nodejs-pkgcloud/%s', pkgcloud.version)\n      }\n    };\n\n    request(tenantOptions, function (err, response, body) {\n      if (err || !body.tenants || !body.tenants.length) {\n        return callback(err ? err : new Error('Unable to find tenants'));\n      }\n\n      var firstActiveTenant;\n      body.tenants.forEach(function (tenant) {\n        if (!firstActiveTenant && !!tenant.enabled && tenant.enabled !== 'false') {\n          firstActiveTenant = tenant;\n        }\n      });\n\n      if (!firstActiveTenant) {\n        return callback(new Error('Unable to find an active tenant'));\n      }\n\n      // TODO make this more resiliant (what if multiple active tenants)\n      self.options.tenantId = firstActiveTenant.id;\n      self.authorize(options, callback);\n    });\n  }\n};\n\n/**\n * Identity._buildAuthenticationPayload\n *\n * @description processes the authentication options into a valid payload for\n * authorization\n *\n * @private\n */\nIdentity.prototype._buildAuthenticationPayload = function () {\n  var self = this;\n\n  self.emit('log::trace', 'Building Openstack Identity Auth Payload');\n  if (self.options.keystoneAuthVersion === 'v3') {\n    if (self.options.password) {\n      self._authenticationPayload = {\n        auth: {\n          identity : {\n            methods : ['password'],\n            password : {\n              user: {\n                password: self.options.password\n              }\n            }\n          }\n        }\n      };\n\n      //first add user name or id to user field\n      if (self.options.username) {\n        self._authenticationPayload.auth.identity.password.user.name = self.options.username;\n      } else if (self.options.userid) {\n        self._authenticationPayload.auth.identity.password.user.id = self.options.userid;\n      }\n      //check if authenticating against user domain\n      if (self.options.domainId) {\n        self._authenticationPayload.auth.identity.password.user.domain = {id:self.options.domainId};\n      } else if (self.options.domainName) {\n        self._authenticationPayload.auth.identity.password.user.domain = {name:self.options.domainName};\n      }\n      //check if we're getting a scoped token against a project and/or domain\n      if (self.options.tenantId || self.options.tenantName || self.options.projectDomainName || self.options.projectDomainId) {\n        self._authenticationPayload.auth.scope = {};\n        var scopedProject = true;\n        if (self.options.tenantId) {\n          self._authenticationPayload.auth.scope.project = {id:self.options.tenantId};\n        } else  if (self.options.tenantName) {\n          self._authenticationPayload.auth.scope.project = {name:self.options.tenantName};\n        } else {\n          scopedProject = false;\n        }\n        if (!scopedProject) {\n          if (self.options.projectDomainId) {\n            self._authenticationPayload.auth.scope.domain = {id:self.options.projectDomainId};\n          } else if (self.options.projectDomainName) {\n            self._authenticationPayload.auth.scope.domain = {name:self.options.projectDomainName};\n          }\n        } else {\n          if (self.options.projectDomainId) {\n            self._authenticationPayload.auth.scope.project.domain = {id:self.options.projectDomainId};\n          } else if(self.options.projectDomainName) {\n            self._authenticationPayload.auth.scope.project.domain = {name:self.options.projectDomainName};\n          }\n        }\n      }\n    }\n    // Token and tenant are also valid inputs\n    else if (self.options.token && (self.options.tenantId || self.options.tenantName)) {\n      self._authenticationPayload = {\n        auth: {\n          identity : {\n            methods : ['token'],\n            token: {\n              id: self.options.token\n            }\n          }\n        }\n      };\n    }\n  } else {\n    // setup our inputs for authorization\n    if (self.options.password && self.options.username) {\n      self._authenticationPayload = {\n        auth: {\n          passwordCredentials: {\n            username: self.options.username,\n            password: self.options.password\n          }\n        }\n      };\n    }\n    // Token and tenant are also valid inputs\n    else if (self.options.token && (self.options.tenantId || self.options.tenantName)) {\n      self._authenticationPayload = {\n        auth: {\n          token: {\n            id: self.options.token\n          }\n        }\n      };\n    }\n    // Are we filtering down by a tenant?\n    if (self._authenticationPayload && self.options.tenantId) {\n      self._authenticationPayload.auth.tenantId = self.options.tenantId;\n    }\n    else if (self._authenticationPayload && self.options.tenantName) {\n      self._authenticationPayload.auth.tenantName = self.options.tenantName;\n    }\n  }\n};\n\n/**\n * Identity._parseIdentityResponse\n *\n * @description takes the full identity response and deserializes it into a\n * serviceCatalog object with services.\n *\n * @param {object}    data      the raw response from the identity call\n * @private\n */\nIdentity.prototype._parseIdentityResponse = function (data, headers) {\n  var self = this;\n\n  if (!data) {\n    throw new Error('missing required arguments!');\n  }\n  if (self.options.keystoneAuthVersion === 'v3') {\n    self.token = {\n      id: headers['x-subject-token'],\n      expires: new Date(data.token.expires_at),\n      issued_at: new Date(data.token.issued_at),\n      tenant: {id: data.token.project.id, name: data.token.project.name}\n    };\n    self.user = data.token.user;\n    if (self.useServiceCatalog) {\n      self.serviceCatalog = new ServiceCatalog(data.token.catalog);\n    }\n  } else {\n    if (data.access.token) {\n      self.token = data.access.token;\n      self.token.expires = new Date(self.token.expires);\n    }\n\n    if (self.useServiceCatalog && data.access.serviceCatalog) {\n      self.serviceCatalog = new ServiceCatalog(data.access.serviceCatalog);\n    }\n\n    self.user = data.access.user;\n  }\n  self.raw = data;\n};\n\nIdentity.prototype.getServiceEndpointUrl = function (options) {\n  if (this.useServiceCatalog) {\n    return this.serviceCatalog.getServiceEndpointUrl(options);\n  }\n  // This is a hack to enable support for v1 swift clients\n  // TODO move all auth for v1 swift out of identity, as it's not related to identity at all\n  else if (this.options.version === 1 || this.options.version === '/v1.0') {\n    return this._storageUrl;\n  }\n  else {\n    return this.options.url;\n  }\n};\n\n\n\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/openstack/context/serviceCatalog.js":"/*\n * serviceCatalog.js: ServiceCatalog model\n *\n * (C) 2013 Rackspace, Ken Perkins\n * MIT LICENSE\n *\n */\n\nvar Service = require('./service').Service,\n    _ = require('lodash');\n\n/**\n * ServiceCatalog class\n *\n * @description wrapper for the service catalog response from keystone\n *\n * @param {object}  catalog     the raw data to parse into the catalog\n * @constructor\n */\nvar ServiceCatalog = function (catalog) {\n  var self = this;\n\n  self.services = {};\n\n  _.each(catalog, function (service) {\n    // Special hack for rackspace with two compute types\n    if (service.type === 'compute' && service.name === 'cloudServers') {\n      return;\n    }\n\n    self.services[service.name] = new Service(service);\n  });\n};\n\nServiceCatalog.prototype.getServiceEndpointUrl = function(options) {\n  var self = this;\n\n  var _endpoint = null;\n\n  _.each(self.services, function(service) {\n    if (_endpoint) {\n      return;\n    }\n\n    _endpoint = service.getEndpointUrl(options);\n  });\n\n  if (_endpoint) {\n    return _endpoint;\n  }\n  else {\n    throw new Error('Unable to find matching endpoint for requested service');\n  }\n};\n\n\nexports.ServiceCatalog = ServiceCatalog;\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/openstack/context/service.js":"/*\n * service.js: Service model\n *\n * (C) 2013 Rackspace, Ken Perkins\n * (C) 2015 IBM Corp.\n * MIT LICENSE\n *\n */\n\nvar _ = require('lodash');\n\nfunction matchRegion(a, b) {\n  if (!a && !b) {\n    return true;\n  }\n  else if ((!a && b) || (a && !b)) {\n    return false;\n  }\n\n  return a.toLowerCase() === b.toLowerCase();\n}\n\n/**\n * Service class\n *\n * @description The service class is a thin wrapper on an entry in the openstack\n * service catalog\n *\n * @param {object}  details     the data for the new service\n * @param {object}  details.endpoints       the array of endpoints\n * @param {String}  details.name            the name of the service\n * @param {String}  details.type            the type of the new service\n * @constructor\n */\nvar Service = function (details) {\n  var self = this;\n\n  if (!details || typeof details !== 'object') {\n    throw new Error('details are a required argument');\n  }\n\n  self.endpoints = details.endpoints;\n  self.name = details.name;\n  self.type = details.type;\n};\n\n/**\n * Service.getEndpointUrl\n *\n * @description gets the endpoint URL for a given service, optionally providing\n * the region.\n *\n * @param {object} options              the options for the endpoint call\n * @param {String} [options.region]     a region to use, if provided\n * @param {boolean} [options.useInternal]  prefer an internal endpoint, if available\n * @param {boolean} [options.useAdminUrl]  prefer an admin endpoint, if available\n *\n * @returns {String}            the endpoint uri\n */\nService.prototype.getEndpointUrl = function (options) {\n  var self = this,\n    url = null;\n\n  options = options || {};\n  options.serviceType = options.serviceType || this.type;\n\n  // if the serviceType is wrong, return null\n  if (options.serviceType.toLowerCase() !== this.type.toLowerCase()) {\n    return '';\n  }\n  //since we don't know if this is a v2 or v3 catalog, check if the \"interface\" field is set on an endpoint, if so, we're v3\n  if (self.endpoints && self.endpoints.length > 0 && self.endpoints[0]['interface'] !== undefined) {\n      self.v3 = true;\n  }\n\n  if (options.region) {\n    _.each(self.endpoints, function (endpoint) {\n      if (!endpoint.region || !matchRegion(endpoint.region, options.region)) {\n        return;\n      }\n      if (self.v3 === true) {\n        if (endpointMatchDesiredInterface(endpoint)) {\n          url = endpoint.url;\n        }\n      } else {\n        url = getUrl(endpoint);\n      }\n    });\n  }\n  else {\n    _.each(self.endpoints, function(endpoint) {\n\n      if (url) {\n        return;\n      }\n\n      // return the first region-less endpoint\n      if (!endpoint.region) {\n        url = getUrl(endpoint);\n      }\n    });\n  }\n\n  /**\n   * getUrl\n   *\n   * @description utility function for getEndpointUrl\n   * @param {object} endpoint     the endpoint to use\n   * @param {string} [endpoint.internalURL]     the internal URL of the endpoint\n   * @param {string} [endpoint.publicURL]       the public URL of the endpoint\n   *\n   * @returns {String} the uri of the endpoint\n   */\n  function getUrl(endpoint) {\n    var useInternal = typeof options.useInternal === 'boolean' ?\n      options.useInternal : false;\n\n    return useInternal && endpoint.internalURL\n      ? endpoint.internalURL\n      : ((typeof options.useAdmin === 'boolean' && options.useAdmin && endpoint.adminURL) ?\n        endpoint.adminURL : endpoint.publicURL);\n  }\n\n  /**\n   * endpointMatchDesiredInterface\n   *\n   * @description determine if the endpoint interface matches the desired interface\n   * @param {object} endpoint\n   * @returns {Boolean}\n   */\n  function endpointMatchDesiredInterface(endpoint) {\n    var interfaceToUse = 'public';\n    if (options.useInternal === true) {\n      interfaceToUse = 'internal';\n    } else if (options.useAdmin === true) {\n      interfaceToUse = 'admin';\n    }\n    return endpoint['interface'] === interfaceToUse;\n  }\n\n  if (!url) {\n    throw new Error('Unable to identify endpoint url');\n  }\n\n  return url;\n};\n\nexports.Service = Service;","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/openstack/blockstorage/volume.js":"/*\n * volume.js: OpenStack Block Storage volume\n *\n * (C) 2014 Rackspace\n *      Ken Perkins\n * MIT LICENSE\n *\n */\n\nvar util = require('util'),\n    base = require('../../core/base'),\n    _ = require('lodash');\n\nvar Volume = exports.Volume = function Volume(client, details) {\n  base.Model.call(this, client, details);\n};\n\nutil.inherits(Volume, base.Model);\n\nVolume.prototype._setProperties = function (details) {\n  this.id = details.id;\n  this.status = details.status;\n  this.name = details.name || details['display_name'];\n  this.description = details.description || details['display_description'];\n  this.createdAt = details['created_at'];\n  this.size = details.size;\n  this.volumeType = details.volumeType || details['volume_type'];\n  this.attachments = details.attachments;\n  this.snapshotId = details.snapshotId || details['snapshot_id'];\n};\n\nVolume.prototype.toJSON = function () {\n  return _.pick(this, ['id', 'status', 'name', 'description', 'createdAt',\n    'size', 'volumeType', 'attachments', 'snapshotId']);\n};\n\n\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/openstack/blockstorage/volumetype.js":"/*\n * volumetype.js: OpenStack Block Storage volume type\n *\n * (C) 2014 Rackspace\n *      Ken Perkins\n * MIT LICENSE\n *\n */\n\nvar util = require('util'),\n    base = require('../../core/base'),\n    _ = require('lodash');\n\nvar VolumeType = exports.VolumeType = function VolumeType(client, details) {\n  base.Model.call(this, client, details);\n};\n\nutil.inherits(VolumeType, base.Model);\n\nVolumeType.prototype._setProperties = function (details) {\n  this.id = details.id;\n  this.name = details.name;\n  this.extra_specs = details.extra_specs;\n};\n\nVolumeType.prototype.toJSON = function() {\n  return _.pick(this, ['id', 'name', 'extra_specs']);\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/openstack/blockstorage/snapshot.js":"/*\n * volume.js: OpenStack Block Storage snapshot\n *\n * (C) 2014 Rackspace\n *      Ken Perkins\n * MIT LICENSE\n *\n */\n\nvar util = require('util'),\n    base = require('../../core/base'),\n    _ = require('lodash');\n\nvar Snapshot = exports.Snapshot = function Snapshot(client, details) {\n  base.Model.call(this, client, details);\n};\n\nutil.inherits(Snapshot, base.Model);\n\nSnapshot.prototype._setProperties = function (details) {\n  this.id = details.id;\n  this.status = details.status;\n  this.name = details.name || details['display_name'];\n  this.description = details.description || details['display_description'];\n  this.createdAt = details['created_at'];\n  this.volumeId = details['volume_id'];\n  this.size = details.size;\n  this.metadata = details.metadata;\n};\n\nSnapshot.prototype.toJSON = function () {\n  return _.pick(this, ['id', 'status', 'name', 'description', 'createdAt', 'size', 'volumeId', 'metadata']);\n};\n\n\n\n\n\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/openstack/compute/index.js":"/*\n * index.js: Top-level include for the OpenStack compute module\n *\n * (C) 2013 Charlie Robbins, Ken Perkins, Ross Kukulinski & the Contributors.\n *\n */\n\nexports.Client = require('./client').Client;\nexports.Flavor = require('./flavor').Flavor;\nexports.Image  = require('./image').Image;\nexports.Server = require('./server').Server;\n\nexports.createClient = function (options) {\n  return new exports.Client(options);\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/openstack/compute/client/index.js":"/*\n * index.js: Compute client for OpenStack\n *\n * (C) 2013 Charlie Robbins, Ken Perkins, Ross Kukulinski & the Contributors.\n *\n */\n\nvar util = require('util'),\n    openstack = require('../../client'),\n    ComputeClient = require('../computeClient').ComputeClient,\n    _ = require('lodash');\n\nvar Client = exports.Client = function (options) {\n  openstack.Client.call(this, options);\n\n  _.extend(this, require('./flavors'));\n  _.extend(this, require('./images'));\n  _.extend(this, require('./servers'));\n  _.extend(this, require('./extensions'));\n\n  this.serviceType = 'compute';\n};\n\nutil.inherits(Client, openstack.Client);\n_.extend(Client.prototype, ComputeClient.prototype);\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/openstack/compute/computeClient.js":"/*\n * computeClient.js: A base ComputeClient for Openstack &\n * Rackspace compute clients\n *\n * (C) 2013 Rackspace\n *      Ken Perkins\n * MIT LICENSE\n *\n */\n\nvar urlJoin = require('url-join');\n\nvar Client = exports.ComputeClient = function () {\n  this.serviceType = 'compute';\n};\n\n/**\n * client._getUrl\n *\n * @description get the url for the current compute service\n * \n * @param options\n * @returns {exports|*}\n * @private\n */\nClient.prototype._getUrl = function (options) {\n  options = options || {};\n\n  if (!this._serviceUrl) {\n    throw new Error('Service url not found');\n  }\n\n  return urlJoin(this._serviceUrl,\n    typeof options === 'string'\n      ? options\n      : options.path);\n};\n\n/**\n * client.getVersion\n *\n * @description get the version of the current openstack compute API\n * @param callback\n */\nClient.prototype.getVersion = function getVersion(callback) {\n  var self = this,\n    verbose;\n\n  this.auth(function (err) {\n    if (err) {\n      return callback(err);\n    }\n\n    self._request({\n      uri: self._getUrl('/').replace(self._identity.token.tenant.id + '/', '')\n    }, function (err, body) {\n      if (err) {\n        return callback(err);\n      }\n      verbose = ((typeof body === 'object') ? body.version : JSON.parse(body).version);\n      return callback(null, verbose.id, verbose);\n    });\n  });\n};\n\n/**\n * client.getLimits\n *\n * @description Get the API limits for the current account\n * @param callback\n * @returns {*}\n */\nClient.prototype.getLimits = function (callback) {\n  return this._request({\n    path: 'limits'\n  }, function (err, body, res) {\n    return err\n      ? callback(err)\n      : callback(null, body.limits, res);\n  });\n};\n\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/openstack/compute/flavor.js":"/*\n * flavor.js: OpenStack Cloud flavor\n *\n * (C) 2013 Charlie Robbins, Ken Perkins, Ross Kukulinski & the Contributors.\n *\n */\n\nvar util  = require('util'),\n    base  = require('../../core/compute/flavor'),\n    _     = require('lodash');\n\nvar Flavor = exports.Flavor = function Flavor(client, details) {\n  base.Flavor.call(this, client, details);\n};\n\nutil.inherits(Flavor, base.Flavor);\n\nFlavor.prototype._setProperties = function (details) {\n  this.id   = details.id;\n  this.name = details.name;\n  this.ram  = details.ram;\n  this.disk = details.disk;\n  this.vcpus = details.vcpus;\n  this.swap = details.swap;\n};\n\nFlavor.prototype.toJSON = function () {\n  return _.pick(this, ['id', 'name', 'ram', 'disk', 'vcpus', 'swap' ]);\n};","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/openstack/compute/image.js":"/*\n * image.js: OpenStack Cloud image\n *\n * (C) 2013 Charlie Robbins, Ken Perkins, Ross Kukulinski & the Contributors.\n *\n */\n\nvar util  = require('util'),\n    base  = require('../../core/compute/image'),\n    _     = require('lodash');\n\nvar Image = exports.Image = function Image(client, details) {\n  base.Image.call(this, client, details);\n};\n\nutil.inherits(Image, base.Image);\n\nImage.prototype._setProperties = function (details) {\n  this.id      = details.id;\n  this.name    = details.name;\n  this.created = details.created;\n\n  //\n  // OpenStack specific\n  //\n  this.updated  = details.updated;\n  this.status   = details.status;\n  this.progress = details.progress;\n};\n\nImage.prototype.toJSON = function () {\n  return _.pick(this, ['id', 'name', 'status', 'progress', 'created', 'updated']);\n};","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/openstack/compute/server.js":"/*\n * server.js: OpenStack Cloud server\n *\n * (C) 2013 Charlie Robbins, Ken Perkins, Ross Kukulinski & the Contributors.\n *\n */\n\nvar util    = require('util'),\n    compute = require('../../core/compute'),\n    base    = require('../../core/compute/server'),\n    _       = require('lodash');\n\nvar Server = exports.Server = function Server(client, details) {\n  base.Server.call(this, client, details);\n};\n\nutil.inherits(Server, base.Server);\n\nServer.prototype._setProperties = function (details) {\n  var self = this;\n  // Set core properties\n  this.id   = details.id;\n  this.name = details.name;\n\n  if (details.status) {\n    switch (details.status.toUpperCase()) {\n      case 'BUILD':\n      case 'REBUILD':\n        this.status = this.STATUS.provisioning;\n        break;\n      case 'ACTIVE':\n        this.status = this.STATUS.running;\n        break;\n      case 'SUSPENDED':\n      case 'SHUTOFF':\n        this.status = this.STATUS.stopped;\n        break;\n      case 'REBOOT':\n      case 'HARD_REBOOT':\n        this.status = this.STATUS.reboot;\n        break;\n      case 'QUEUE_RESIZE':\n      case 'PREP_RESIZE':\n      case 'RESIZE':\n      case 'VERIFY_RESIZE':\n      case 'SHARE_IP':\n      case 'SHARE_IP_NO_CONFIG':\n      case 'DELETE_IP':\n      case 'PASSWORD':\n        this.status = this.STATUS.updating;\n        break;\n      case 'RESCUE':\n      case 'ERROR':\n        this.status = this.STATUS.error;\n        break;\n      default:\n        this.status = this.STATUS.unknown;\n        break;\n    }\n  }\n\n  //\n  // Set extra properties\n  //\n  this.progress  = details.progress;\n  this.imageId   = details.imageId   || this.imageId;\n  this.adminPass = details.adminPass || this.adminPass;\n  this.addresses = details.addresses || {};\n  this.metadata  = details.metadata  || {};\n  this.flavorId  = details.flavorId  || this.flavorId;\n  this.hostId    = details.hostId    || this.hostId;\n  this.created   = details.created   || this.created;\n  this.updated   = details.updated   || this.updated;\n  this.original  = this.openstack = details;\n\n  if (Object.keys(this.addresses).length && !this.addresses.public\n    && !this.addresses.private) {\n    this.addresses = Object.keys(this.addresses)\n      .map(function (network) {\n        return self.addresses[network];\n      })\n      .reduce(function (all, interfaces) {\n        Object.keys(interfaces).map(function (interface) {\n          return interfaces[interface].addr;\n        })\n        .forEach(function (addr) {\n          return compute.isPrivate(addr)\n            ? all['private'].push(addr)\n            : all['public'].push(addr);\n        });\n\n        return all;\n      }, { public: [], private: [] });\n  }\n\n  // Try to set the flavorId using a flavor object\n  if (typeof this.flavorId === 'undefined' &&\n      details.flavor && details.flavor.id) {\n    this.flavorId = details.flavor.id;\n  }\n\n  // Try to set the imageId using an image object\n  if (typeof this.imageId === 'undefined' &&\n      details.image && details.image.id) {\n    this.imageId = details.image.id;\n  }\n};\n\n//\n// Updates the addresses for this instance\n// Parameters: type['public' || 'private]? callback\n//\nServer.prototype.getAddresses = function (type, callback) {\n  if (!callback && typeof type === 'function') {\n    callback = type;\n    type = '';\n  }\n\n  var self = this;\n  this.client.getServerAddresses(this, type, function (err, addresses) {\n    if (err) {\n      return callback(err);\n    }\n\n    if (type === '') {\n      self.addresses = addresses;\n    }\n    else {\n      self.addresses = addresses || {};\n      self.addresses[type] = addresses[type];\n    }\n\n    callback(null, addresses);\n  });\n};\n\nServer.prototype.toJSON = function() {\n  return _.pick(this, ['id', 'name', 'status', 'hostId', 'adminPass', 'addresses',\n    'links', 'key_name', 'imageId', 'flavorId', 'user_id', 'tenant_id', 'progress',\n    'OS-EXT-STS:task_state', 'OS-EXT-STS:vm_state', 'OS-EXT-STS:power_state',\n    'OS-DCF:diskConfig', 'accessIPv4', 'accessIPv6', 'config_drive', 'metadata',\n    'created', 'updated']);\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/openstack/identity/index.js":"/*\n * index.js: Top-level include for the OpenStack identity module\n *\n * (C) 2013 Charlie Robbins, Ken Perkins, Ross Kukulinski & the Contributors.\n *\n */\n\nexports.Client = require('./client').Client;\n\nexports.createClient = function (options) {\n  return new exports.Client(options);\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/openstack/identity/client/index.js":"/*\n * index.js: Identity client for Openstack\n *\n * (C) 2014 Rackspace, Ken Perkins\n * MIT LICENSE\n *\n */\n\nvar util = require('util'),\n    urlJoin = require('url-join'),\n    openstack = require('../../client');\n\nvar Client = exports.Client = function (options) {\n  openstack.Client.call(this, options);\n\n  this.serviceType = null;\n};\n\nutil.inherits(Client, openstack.Client);\n\n/**\n * Client._getUrl\n *\n * @description a helper function for determining the ultimate URL for this service\n * @param options\n * @returns {exports|*}\n * @private\n */\nClient.prototype._getUrl = function (options) {\n  options = options || {};\n\n  return urlJoin(this._serviceUrl,\n    typeof options === 'string'\n      ? options\n      : options.path);\n\n};\n\n/**\n * Client.validateToken\n *\n * This is an administrative API that allows a admin user to validate the token of\n * another authenticated user.\n *\n * @param {String}  token   the token to validate\n * @param {String|Function}  [belongsTo]  The tenantId of the user to match with the token\n * @param callback\n */\nClient.prototype.validateToken = function (token, belongsTo, callback) {\n  if (!token || typeof token === 'function') {\n    throw new Error('Token is a required argument');\n  }\n\n  if (typeof belongsTo === 'function' && !callback) {\n    callback = belongsTo;\n    belongsTo = null;\n  }\n\n  var options = {\n    path: urlJoin('/v2.0/tokens', token)\n  };\n\n  if (belongsTo) {\n    options.qs = {\n      belongsTo: belongsTo\n    };\n  }\n\n  this._request(options, function (err, body) {\n    return err\n      ? callback(err)\n      : callback(err, body);\n  });\n};\n\n/**\n *  Client.getTenantInfo\n *\n *  This is an administrative API that allows a admin to get detailed information about the specified tenant by ID\n *\n *  @param {String|Function}  [tenantId]  The tenantId for which we are seeking info\n *  @param callback\n *\n */\nClient.prototype.getTenantInfo = function (tenantId, callback) {\n\n  if (typeof tenantId === 'function' && !callback) {\n    callback = tenantId;\n    tenantId = null;\n  }\n\n  var options = {\n    path: urlJoin('/v2.0/tenants', tenantId ? tenantId : '')\n  };\n\n  this._request(options, function (err, body) {\n    return err\n      ? callback(err)\n      : callback(err, body);\n  });\n\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/openstack/orchestration/index.js":"/*\n * index.js: Top-level include for the OpenStack orchestration module\n *\n * (C) 2014 Rackspace\n *      Ken Perkins\n * MIT LICENSE\n */\n\nexports.Client = require('./client').Client;\nexports.Stack = require('./stack').Stack;\nexports.Resource = require('./resource').Resource;\n\nexports.createClient = function (options) {\n  return new exports.Client(options);\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/openstack/orchestration/client/index.js":"/*\n * index.js: Orchestration client for OpenStack\n *\n * (C) 2014 Rackspace\n *      Ken Perkins\n * MIT LICENSE\n */\n\nvar util = require('util'),\n    openstack = require('../../client'),\n    urlJoin = require('url-join'),\n    _ = require('lodash');\n\nvar Client = exports.Client = function (options) {\n  openstack.Client.call(this, options);\n\n  _.extend(this, require('./stacks'));\n  _.extend(this, require('./templates'));\n  _.extend(this, require('./events'));\n  _.extend(this, require('./resources'));\n\n  this.serviceType = 'orchestration';\n\n};\n\nutil.inherits(Client, openstack.Client);\n\n/**\n * client._getUrl\n *\n * @description get the url for the current compute service\n *\n * @param options\n * @returns {exports|*}\n * @private\n */\nClient.prototype._getUrl = function (options) {\n  options = options || {};\n\n  if (!this._serviceUrl) {\n    throw new Error('Service url not found');\n  }\n\n  return urlJoin(this._serviceUrl,\n      typeof options === 'string'\n      ? options\n      : options.path);\n};\n\n/**\n * client.buildInfo\n *\n * @description gets the build information for the orchestration service\n *\n * @param callback\n * @returns {*}\n */\nClient.prototype.buildInfo = function(callback) {\n  return this._request({\n    path: '/build_info'\n  }, function (err, body) {\n    if (err) {\n      return callback(err);\n    }\n\n    callback(null, body);\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/openstack/orchestration/stack.js":"/*\n * volume.js: OpenStack Orchestration Stack\n *\n * (C) 2014 Rackspace\n *      Ken Perkins\n * MIT LICENSE\n *\n */\n\nvar util  = require('util'),\n    base  = require('../../core/base'),\n    _     = require('lodash');\n\nvar Stack = exports.Stack = function Stack(client, details) {\n  base.Model.call(this, client, details);\n};\n\nutil.inherits(Stack, base.Model);\n\nStack.prototype.refresh = function (callback) {\n  var self = this;\n  return self.client.getStack(this, function (err, stack) {\n    if (!err) {\n      self._setProperties(stack.original);\n    }\n\n    return callback.apply(this, arguments);\n  });\n};\n\nStack.prototype._setProperties = function (details) {\n  this.id = details.id;\n  this.name = details.name || details['stack_name'];\n  this.status = details.status || details['stack_status'];\n  this.description = details.description;\n  this.templateDescription = details.templateDescription || details['template_description'];\n  this.statusReason = details.statusReason || details['stack_status_reason'];\n  this.owner = details.owner || details['stack_owner'];\n  this.disableRollback = details.disableRollback || details['disable_rollback'];\n  this.parameters = details.parameters;\n  this.capabilities = details.capabilities;\n  this.notificationTopics = details.notificationTopics || details['notification_topics'];\n  this.timeout = details.timeout || details['timeout_mins'];\n\n  this.createdAt = details['creation_time'];\n  this.updatedAt = details['updated_time'];\n\n  this.outputs = details['outputs'];\n\n  this.original = this.openstack = details;\n};\n\nStack.prototype.toJSON = function () {\n  return _.pick(this, ['id', 'name', 'status', 'description', 'templateDescription', 'statusReason', 'owner',\n    'disableRollback', 'parameters', 'capabilities', 'notificationTopics', 'timeout', 'updatedAt', 'createdAt', 'outputs' ]);\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/openstack/orchestration/resource.js":"/*\n * volume.js: OpenStack Orchestration Stack\n *\n * (C) 2014 Rackspace\n *      Ken Perkins\n * MIT LICENSE\n *\n */\n\nvar util  = require('util'),\n    base  = require('../../core/base'),\n    Stack = require('./stack').Stack,\n    _     = require('lodash');\n\nvar Resource = exports.Resource = function Stack(client, details) {\n  base.Model.call(this, client, details);\n};\n\nutil.inherits(Resource, base.Model);\n\nResource.prototype._setProperties = function (details) {\n  this.name = details.name || details['resource_name'];\n  this.status = details.status || details['resource_status'];\n  this.stack = details.stack;\n  this.statusReason = details.statusReason || details['resource_status_reason'];\n  this.type = details.type || details['resource_type'];\n  this.logicalResourceId = details.logicalResourceId || details['logical_resource_id'];\n  this.physicalResourceId = details.physicalResourceId || details['physical_resource_id'];\n  this.requiredBy = details.requiredBy || details['required_by'];\n  this.updatedAt = details.updatedAt || details['updated_time'];\n  this.links = details.links;\n};\n\nResource.prototype.toJSON = function () {\n\n  var data = _.pick(this, ['name', 'status', 'statusReason', 'type', 'logicalResourceId', 'physicalResourceId',\n    'requiredBy', 'updatedAt', 'links']);\n\n  this.stack instanceof Stack ? data.stack = this.stack.toJSON() : {};\n\n  return data;\n\n};\n\n\n\n\n\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/openstack/network/index.js":"/*\n * index.js: Top-level include for the Openstack networking client.\n *\n * (C) 2014 Hewlett-Packard Development Company, L.P.\n *\n */\n\nexports.Client  = require('./client').Client;\nexports.Network = require('./network').Network;\nexports.Subnet = require('./subnet').Subnet;\nexports.Port = require('./port').Port;\nexports.SecurityGroup = require('./securityGroup').SecurityGroup;\nexports.SecurityGroupRule = require('./securityGroup').SecurityGroupRule;\n\nexports.createClient = function (options) {\n  return new exports.Client(options);\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/openstack/network/client/index.js":"/*\n * client.js: Client for Openstack networking\n *\n * (C) 2014 Hewlett-Packard Development Company, L.P.\n *\n */\n\nvar util = require('util'),\n    urlJoin = require('url-join'),\n    openstack = require('../../client'),\n    NetworkClient = require('../networkClient').NetworkClient,\n    _ = require('lodash');\n\nvar Client = exports.Client = function (options) {\n  openstack.Client.call(this, options);\n\n  this.models = {\n    Network: require('../network').Network,\n    Subnet: require('../subnet').Subnet,\n    Port: require('../port').Port,\n    SecurityGroup: require('../securityGroup').SecurityGroup,\n    SecurityGroupRule: require('../securityGroupRule').SecurityGroupRule\n  };\n\n  _.extend(this, require('./networks'));\n  _.extend(this, require('./subnets'));\n  _.extend(this, require('./ports'));\n  _.extend(this, require('./securityGroups'));\n  _.extend(this, require('./securityGroupRules'));\n\n  this.serviceType = 'network';\n};\n\nutil.inherits(Client, openstack.Client);\n_.extend(Client.prototype, NetworkClient.prototype);\n\n/**\n * client._getUrl\n *\n * @description get the url for the current networking service\n *\n * @param options\n * @returns {exports|*}\n * @private\n */\nClient.prototype._getUrl = function(options) {\n  if (options.path) {\n    options.path = urlJoin('v2.0', options.path);\n  }\n  return NetworkClient.prototype._getUrl.call(this, options);\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/openstack/network/networkClient.js":"/*\n * networkingClient.js: A base NetworkClient for Openstack networking clients\n *\n * (C) 2014 Hewlett-Packard Development Company, L.P.\n *\n */\n\nvar urlJoin = require('url-join');\n\nvar Client = exports.NetworkClient = function () {\n  this.serviceType = 'network';\n};\n\n/**\n * client._getUrl\n *\n * @description get the url for the current network service\n *\n * @param options\n * @returns {exports|*}\n * @private\n */\nClient.prototype._getUrl = function (options) {\n  options = options || {};\n  var fragment = '';\n\n  if (options.network) {\n    if (options.method === 'GET') {\n      fragment = encodeURIComponent(options.network);\n    }\n  }\n\n  if (options.path) {\n    fragment = urlJoin(fragment, options.path.split('/').map(encodeURIComponent).join('/'));\n  }\n\n  var serviceUrl = options.serviceType ? this._identity.getServiceEndpointUrl({\n    serviceType: options.serviceType,\n    region: this.region\n  }) : this._serviceUrl;\n\n  if (fragment === '' || fragment === '/') {\n    return serviceUrl;\n  }\n\n  return urlJoin(serviceUrl, fragment);\n\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/openstack/network/network.js":"/*\n * network.js: Openstack Network object.\n *\n * (C) 2014 Hewlett-Packard Development Company, L.P.\n *\n */\n\nvar util = require('util'),\n    base = require('../../core/network/network'),\n    _ = require('lodash');\n\nvar Network = exports.Network = function Network(client, details) {\n  base.Network.call(this, client, details);\n};\n\nutil.inherits(Network, base.Network);\n\nNetwork.prototype._setProperties = function (details) {\n  this.name = details.name || this.name;\n  this.status = details.status || this.status;\n  this.adminStateUp = details.admin_state_up || this.adminStateUp;\n  this.id = details.id || this.id;\n  this.shared = details.shared || this.shared || 0;\n  this.tenantId = details.tenant_id || this.tenantId;\n  this.subnets = details.subnets || this.subnets;\n};\n\nNetwork.prototype.toJSON = function () {\n  return _.pick(this, ['name', 'id', 'adminStateUp', 'status', 'shared',\n  'tenantId', 'subnets']);\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/core/network/network.js":"/*\n * network.js: Base network from which all pkgcloud networks inherit.\n *\n * (C) 2014 Hewlett-Packard Development Company, L.P.\n *\n */\n\nvar util = require('util'),\n    model = require('../base/model');\n\nvar Network = exports.Network = function (client, details) {\n  model.Model.call(this, client, details);\n};\n\nutil.inherits(Network, model.Model);\n\nNetwork.prototype.create = function (callback) {\n  this.client.createNetwork(this.name, callback);\n};\n\nNetwork.prototype.refresh = function (callback) {\n  this.client.getNetwork(this.id, callback);\n};\n\nNetwork.prototype.update = function (callback) {\n  this.client.updateNetwork(this, callback);\n};\n\nNetwork.prototype.destroy = function (callback) {\n  this.client.destroyNetwork(this.id, callback);\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/openstack/network/subnet.js":"/*\n * network.js: Openstack Subnet object.\n *\n * (C) 2014 Hewlett-Packard Development Company, L.P.\n *\n */\n\nvar util = require('util'),\n    base = require('../../core/network/subnet'),\n    _ = require('lodash');\n\nvar Subnet = exports.Subnet = function Subnet(client, details) {\n  base.Subnet.call(this, client, details);\n};\n\nutil.inherits(Subnet, base.Subnet);\n\nSubnet.prototype._setProperties = function (details) {\n  this.name = details.name || this.name;\n  this.enableDhcp = details.enable_dhcp || this.enableDhcp;\n  this.networkId = details.network_id || this.networkId;\n  this.id = details.id || this.id;\n  this.ipVersion = details.ip_version || this.ipVersion;\n  this.tenantId = details.tenant_id || this.tenantId;\n  this.gatewayIp = details.gateway_ip || this.gatewayIp;\n  this.cidr = details.cidr || this.cidr;\n  this.dnsNameServers = details.dns_nameservers || this.dnsNameServers;\n  this.hostRoutes = details.host_routes  || this.hostRoutes;\n  this.allocationPools = details.allocation_pools  || this.allocationPools;\n};\n\nSubnet.prototype.toJSON = function () {\n  return _.pick(this, ['name', 'id', 'networkId', 'ipVersion',\n  'tenantId', 'gatewayIp', 'dnsNameServers', 'allocationPools', 'hostRoutes']);\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/core/network/subnet.js":"/*\n * subnet.js: Base subnet from which all pkgcloud subnet inherit.\n *\n * (C) 2014 Hewlett-Packard Development Company, L.P.\n *\n */\n\nvar util = require('util'),\n    model = require('../base/model');\n\nvar Subnet = exports.Subnet = function (client, details) {\n  model.Model.call(this, client, details);\n};\n\nutil.inherits(Subnet, model.Model);\n\nSubnet.prototype.create = function (callback) {\n  this.client.createSubnet(this.name, callback);\n};\n\nSubnet.prototype.refresh = function (callback) {\n  this.client.getSubnet(this.id, callback);\n};\n\nSubnet.prototype.update = function (callback) {\n  this.client.updateSubnet(this, callback);\n};\n\nSubnet.prototype.destroy = function (callback) {\n  this.client.destroySubnet(this.id, callback);\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/openstack/network/port.js":"/*\n * network.js: Openstack Port object.\n *\n * (C) 2014 Hewlett-Packard Development Company, L.P.\n *\n */\n\nvar util = require('util'),\n    base = require('../../core/network/port'),\n    _ = require('lodash');\n\nvar Port = exports.Port = function Port(client, details) {\n  base.Port.call(this, client, details);\n};\n\nutil.inherits(Port, base.Port);\n\nPort.prototype._setProperties = function (details) {\n\n  this.status = details.status || this.status;\n  this.name = details.name || this.name;\n  this.allowedAddressPairs = details.allowed_address_pairs\t || this.allowedAddressPairs;\n  this.adminStateUp = details.admin_state_up || this.adminStateUp;\n  this.networkId = details.network_id || this.networkId;\n  this.tenantId = details.tenant_id || this.tenantId;\n  this.extraDhcpOpts = details.extra_dhcp_opts || this.extraDhcpOpts;\n  this.deviceOwner = details.device_owner || this.deviceOwner;\n  this.macAddress = details.mac_address || this.macAddress;\n  this.fixedIps = details.fixed_ips || this.fixedIps;\n  this.id = details.id || this.id;\n  this.securityGroups = details.security_groups || this.securityGroups;\n  this.deviceId = details.device_id || this.deviceId;\n};\n\nPort.prototype.toJSON = function () {\n  return _.pick(this, ['status', 'name', 'allowedAddressPairs', 'adminStateUp',\n  'networkId', 'tenantId', 'extraDhcpOpts', 'deviceOwner',\n  'macAddress', 'fixedIps', 'id', 'securityGroups', 'deviceId']);\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/core/network/port.js":"/*\n * port.js: Base network from which all pkgcloud ports inherit.\n *\n * (C) 2014 Hewlett-Packard Development Company, L.P.\n *\n */\n\nvar util = require('util'),\n    model = require('../base/model');\n\nvar Port = exports.Port = function (client, details) {\n  model.Model.call(this, client, details);\n};\n\nutil.inherits(Port, model.Model);\n\nPort.prototype.create = function (callback) {\n  this.client.createPort(this.name, callback);\n};\n\nPort.prototype.refresh = function (callback) {\n  this.client.getPort(this.id, callback);\n};\n\nPort.prototype.update = function (callback) {\n  this.client.updatePort(this, callback);\n};\n\nPort.prototype.destroy = function (callback) {\n  this.client.destroyPort(this.id, callback);\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/openstack/network/securityGroup.js":"/*\n * network.js: Openstack Security Group object.\n *\n * (C) 2015 Rackspace\n *      Shaunak Kashyap\n * MIT LICENSE\n */\n\nvar util = require('util'),\n    base = require('../../core/network/securityGroup'),\n    _ = require('lodash');\n\nvar SecurityGroup = exports.SecurityGroup = function SecurityGroup(client, details) {\n  base.SecurityGroup.call(this, client, details);\n};\n\nutil.inherits(SecurityGroup, base.SecurityGroup);\n\nSecurityGroup.prototype._setProperties = function (details) {\n\n  this.id = details.id || this.id;\n  this.name = details.name || this.name;\n  this.description = details.description || this.id;\n  this.tenantId = details.tenant_id || this.tenantId;\n  this.securityGroupRules = details.security_group_rules || this.securityGroupRules;\n};\n\nSecurityGroup.prototype.toJSON = function () {\n  return _.pick(this, ['id', 'name', 'description', 'securityGroupRules', 'tenantId']);\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/core/network/securityGroup.js":"/*\n * securityGroup.js: Base securityGroup from which all pkgcloud securityGroup inherit.\n *\n * (C) 2015 Rackspace\n *      Shaunak Kashyap\n * MIT LICENSE\n */\n\nvar util = require('util'),\n    Model = require('../base/model').Model;\n\nvar SecurityGroup = exports.SecurityGroup = function (client, details) {\n  Model.call(this, client, details);\n};\n\nutil.inherits(SecurityGroup, Model);\n\nSecurityGroup.prototype.create = function (callback) {\n  this.client.createSecurityGroup(this, callback);\n};\n\nSecurityGroup.prototype.refresh = function (callback) {\n  this.client.getSecurityGroup(this.id, callback);\n};\n\nSecurityGroup.prototype.destroy = function (callback) {\n  this.client.destroySecurityGroup(this.id, callback);\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/openstack/storage/index.js":"/*\n * index.js: Top-level include for the Openstack Object Storage\n *\n * (C) 2013 Rackspace, Ken Perkins\n * MIT LICENSE\n *\n */\n\nexports.Client    = require('./client').Client;\nexports.Container = require('./container').Container;\nexports.File      = require('./file').File;\n\nexports.createClient = function (options) {\n  return new exports.Client(options);\n};","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/openstack/storage/client/index.js":"/*\n * client.js: Storage client for Openstack Object Storage\n *\n * (C) 2013 Rackspace, Ken Perkins\n * MIT LICENSE\n *\n */\n\nvar util = require('util'),\n    openstack = require('../../client'),\n    StorageClient = require('../storageClient').StorageClient,\n    _ = require('lodash');\n\nvar Client = exports.Client = function (options) {\n  // explicitly prevent service catalog usage if using version 1.0 for swift\n  // this must happen before we call into the base openstack client.\n  if (options.version === 1 || options.version === '/v1.0') {\n    options.useServiceCatalog = false;\n  }\n\n  openstack.Client.call(this, options);\n\n  this.models = {\n    Container: require('../container').Container,\n    File: require('../file').File\n  };\n\n  _.extend(this, require('./containers'));\n  _.extend(this, require('./files'));\n\n  this.serviceType = 'object-store';\n};\n\nutil.inherits(Client, openstack.Client);\n_.extend(Client.prototype, StorageClient.prototype);\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/openstack/storage/storageClient.js":"/*\n * storageClient.js: A base StorageClient for Openstack &\n * Rackspace storage clients\n *\n * (C) 2013 Rackspace\n *      Ken Perkins\n * MIT LICENSE\n *\n */\n\nvar urlJoin = require('url-join'),\n    _ = require('lodash');\n\nconst CONTAINER_META_PREFIX = 'x-container-meta-';\nconst CONTAINER_REMOVE_META_PREFIX = 'x-remove-container-meta-';\nconst OBJECT_META_PREFIX = 'x-object-meta-';\nconst OBJECT_REMOVE_META_PREFIX = 'x-object-remove-meta-';\n\nvar Client = exports.StorageClient = function () {\n  this.serviceType = 'object-store';\n};\n\n/**\n * client._getUrl\n *\n * @description get the url for the current storage service\n *\n * @param options\n * @returns {exports|*}\n * @private\n */\nClient.prototype._getUrl = function (options) {\n  options = options || {};\n\n  var fragment = '';\n\n  if (options.container) {\n    fragment = encodeURIComponent(options.container);\n  }\n\n  if (options.path) {\n    fragment = urlJoin(fragment, options.path.split('/').map(encodeURIComponent).join('/'));\n  }\n\n  var serviceUrl = options.serviceType ? this._identity.getServiceEndpointUrl({\n    serviceType: options.serviceType,\n    region: this.region\n  }) : this._serviceUrl;\n\n  if (fragment === '' || fragment === '/') {\n    return serviceUrl;\n  }\n\n  return urlJoin(serviceUrl, fragment);\n\n};\n\nClient.prototype.serializeMetadata = function (prefix, metadata) {\n\n  if (!metadata) {\n    return {};\n  }\n\n  var serializedMetadata = {};\n\n  _.keys(metadata).forEach(function (key) {\n    serializedMetadata[prefix + key] = metadata[key];\n  });\n\n  return serializedMetadata;\n};\n\nClient.prototype.deserializeMetadata = function (prefix, metadata) {\n\n  if (!metadata) {\n    return {};\n  }\n\n  var deserializedMetadata = {};\n\n  _.keys(metadata).forEach(function (key) {\n    if (key.indexOf(prefix) !== -1) {\n      deserializedMetadata[key.split(prefix)[1]] = metadata[key];\n    }\n  });\n\n  return deserializedMetadata;\n};\n\nClient.prototype.CONTAINER_META_PREFIX = CONTAINER_META_PREFIX;\nClient.prototype.CONTAINER_REMOVE_META_PREFIX = CONTAINER_REMOVE_META_PREFIX;\nClient.prototype.OBJECT_META_PREFIX = OBJECT_META_PREFIX;\nClient.prototype.OBJECT_REMOVE_META_PREFIX = OBJECT_REMOVE_META_PREFIX;\n\n\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/openstack/storage/container.js":"/*\n * container.js: Openstack Object Storage Container\n *\n * (C) 2013 Rackspace, Ken Perkins\n * MIT LICENSE\n *\n */\n\nvar util = require('util'),\n    base = require('../../core/storage/container'),\n    _ = require('lodash');\n\nvar Container = exports.Container = function Container(client, details) {\n  base.Container.call(this, client, details);\n};\n\nutil.inherits(Container, base.Container);\n\nContainer.prototype.updateMetadata = function (callback) {\n  this.client.updateContainerMetadata(this.container, callback);\n};\n\nContainer.prototype.removeMetadata = function (metadataToRemove, callback) {\n  this.client.removeContainerMetadata(this, metadataToRemove, callback);\n};\n\nContainer.prototype._setProperties = function (details) {\n  this.name = details.name || this.name;\n  this.ttl = details.ttl || this.ttl;\n  this.logRetention = details.logRetention || this.logRetention;\n  this.count = details.count || this.count || 0;\n  this.bytes = details.bytes || this.bytes || 0;\n  this.metadata = details.metadata || this.metadata || {};\n};\n\nContainer.prototype.toJSON = function () {\n  return _.pick(this, ['name', 'ttl', 'logRetention', 'count',\n    'bytes', 'metadata']);\n};\n\n\n\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/openstack/storage/file.js":"/*\n * file.js: Openstack Object Storage File (i.e. StorageObject)\n *\n * (C) 2013 Rackspace, Ken Perkins\n * MIT LICENSE\n *\n */\n\nvar util = require('util'),\n    _ = require('lodash'),\n    base = require('../../core/storage/file');\n\nvar File = exports.File = function File(client, details) {\n  base.File.call(this, client, details);\n};\n\nutil.inherits(File, base.File);\n\nFile.prototype.updateMetadata = function (callback) {\n  this.client.updateFileMetadata(this.container, this, callback);\n};\n\nFile.prototype.copy = function (options, callback) {\n  this.client.copy(options, callback);\n};\n\nFile.prototype._setProperties = function (details) {\n  var self = this;\n\n  this.metadata = {};\n  this.container = details.container || null;\n  this.name = details.name || details.subdir || null;\n  this.etag = details.etag || details.hash || null;\n\n  if (details.subdir) {\n    this.contentType = 'application/directory';\n  } else {\n    this.contentType = details['content-type'] || details['content_type'] || null;\n  }\n\n  this.lastModified = details['last-modified']\n    ? new Date(details['last-modified'])\n    : details['last_modified']\n    ? new Date(details['last_modified'])\n    : null;\n\n  this.size = this.bytes = details['content-length']\n    ? parseInt(details['content-length'], 10)\n    : details['bytes']\n    ? parseInt(details['bytes'], 10)\n    : null;\n\n  Object.keys(details).forEach(function (header) {\n    var match;\n    if (match = header.match(/x-object-meta-(\\w+)/i)) {\n      self.metadata[match[1]] = details[header];\n    }\n  });\n};\n\nFile.prototype.toJSON = function () {\n  return _.pick(this, ['name', 'etag', 'size', 'storageClass', 'lastModified', 'container', 'location' ]);\n};\n\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/openstack/database/index.js":"/*\n * index.js: Top-level include for the Openstack Trove module\n *\n * (C) 2014 Hewlett-Packard Development Company, L.P.\n *\n */\n\nexports.Client    = require('./client').Client;\nexports.Flavor    = require('./flavor').Flavor;\nexports.Instance  = require('./instance').Instance;\nexports.Database  = require('./database').Database;\nexports.User      = require('./user').User;\n\nexports.createClient = function createClient(options) {\n  return new exports.Client(options);\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/openstack/database/client/index.js":"/*\n * client.js: Database client for Openstack Trove Databases\n *\n * (C) 2014 Hewlett-Packard Development Company, L.P.\n *\n */\n\nvar util      = require('util'),\n    urlJoin   = require('url-join'),\n    rackspace = require('../../client'),\n    auth      = require('../../../common/auth.js'),\n    _         = require('lodash');\n\nvar Client = exports.Client = function (options) {\n  rackspace.Client.call(this, options);\n\n  this.before.push(auth.accountId);\n\n  _.extend(this, require('./flavors'));\n  _.extend(this, require('./instances'));\n  _.extend(this, require('./databases'));\n  _.extend(this, require('./users'));\n\n  this.serviceType = 'database';\n};\n\nutil.inherits(Client, rackspace.Client);\n\nClient.prototype._getUrl = function (options) {\n  options = options || {};\n\n  return urlJoin(this._serviceUrl,\n    typeof options === 'string'\n      ? options\n      : options.path);\n\n};\n\n//\n// Gets the version of the OpenStack Compute API we are running against\n// Parameters: callback\n//\nClient.prototype.getVersion = function getVersion(callback) {\n  var self = this;\n\n  this.auth(function (err) {\n    if (err) {\n      return callback(err);\n    }\n\n    self._request({\n      uri: self._getUrl('/').replace('/v1.0/' + self._identity.token.tenant.id + '/', '')\n    }, function (err, body) {\n      if (err) {\n        return callback(err);\n      }\n      return callback(null,\n        ((typeof body === 'object') ? body.versions : JSON.parse(body).versions));\n    });\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/openstack/database/flavor.js":"/*\n * flavor.js: Openstack Trove Databases flavor\n *\n * (C) 2014 Hewlett-Packard Development Company, L.P.\n *\n */\n\nvar util = require('util'),\n    base = require('../../openstack/compute/flavor');\n\nvar Flavor = exports.Flavor = function Flavor(client, details) {\n  base.Flavor.call(this, client, details);\n};\n\nutil.inherits(Flavor, base.Flavor);\n\nFlavor.prototype._setProperties = function (details) {\n  var selfLink = details.links.filter(function (link) {\n    return (link.rel === 'self');\n  });\n  this.href = selfLink.pop().href;\n  this.id = details.id;\n  this.name = details.name;\n  this.ram = details.ram;\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/openstack/database/instance.js":"/*\n * instances.js: Openstack Trove Database Instance\n *\n * (C) 2014 Hewlett-Packard Development Company, L.P.\n *\n */\n\nvar util = require('util'),\n    model = require('../../core/base/model'),\n    computeStatus = require('../../common/status').compute;\n\nvar Instance = exports.Instance = function Instance(client, details) {\n  model.Model.call(this, client, details);\n};\n\nutil.inherits(Instance, model.Model);\n\nInstance.prototype.refresh = function (callback) {\n  this.client.getInstance(this, callback);\n};\n\nInstance.prototype.STATUS = computeStatus;\n\nInstance.prototype._setProperties = function (details) {\n  this.id = details.id;\n  this.name = details.name;\n  this.links = details.links;\n\n  // Fix for name in rackspace\n  details.state = (details.status) ? details.status : details.state;\n\n  if (details.state) {\n    switch (details.state.toUpperCase()) {\n      case 'PROVISIONING':\n      case 'BUILD':\n      case 'REBOOT':\n      case 'RESIZE':\n        this.status = this.STATUS.provisioning;\n        break;\n      case 'RUNNING':\n      case 'ACTIVE': // Change for keep consistency\n        this.status = this.STATUS.running;\n        break;\n      case 'STOPPING':\n      case 'STOPPED':\n      case 'SHUTDOWN':\n        this.status = this.STATUS.stopped;\n        break;\n      case 'FAILED':\n        this.status = this.STATUS.error;\n        break;\n      default:\n        this.status = this.STATUS.unknown;\n        break;\n    }\n  }\n\n  // Seems Rackspace not will provide this fields so I comment it.\n  //this.created  = details.created  || this.created;\n  //this.updated  = details.updated  || this.updated;\n  this.flavor   = details.flavor   || {};\n  this.hostname = details.hostname || this.hostname;\n  this.volume   = details.volume   || this.volume;\n  this.original = this.rackspace = details;\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/openstack/database/database.js":"/*\n * databases.js: Openstack Trove Database within a Instance\n *\n * (C) 2014 Hewlett-Packard Development Company, L.P.\n *\n */\n\nvar util = require('util'),\n    model = require('../../core/base/model');\n\nvar Database = exports.Database = function Database(client, details) {\n  model.Model.call(this, client, details);\n};\n\nutil.inherits(Database, model.Model);\n\nDatabase.prototype.refresh = function (callback) {\n  this.client.getDatabase(this, callback);\n};\n\nDatabase.prototype._setProperties = function (details) {\n  // @todo Check for characters that CANNOT be used in the Database Name\n  // @todo There is a length restrictions for database name. 64\n  this.name = details.name;\n  if (details.characterSet) {\n    this.characterSet = details.characterSet;\n  }\n\n  if (details.collation) {\n    this.collation = details.collation;\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/openstack/database/user.js":"/*\n * user.js: Openstack Trove Database User\n *\n * (C) 2014 Hewlett-Packard Development Company, L.P.\n *\n */\n\nvar util = require('util'),\n    model = require('../../core/base/model');\n\nvar User = exports.User = function User(client, details) {\n  model.Model.call(this, client, details);\n};\n\nutil.inherits(User, model.Model);\n\nUser.prototype.refresh = function (callback) {\n  this.client.getUser(this, callback);\n};\n\nUser.prototype._setProperties = function (details) {\n  this.name = details.name;\n  this.password = details.password;\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/openstack/cdn/index.js":"/*\n * index.js: Top-level include for the OpenStack CDN module\n *\n * (C) 2014 Rackspace\n *      Shaunak Kashyap\n * MIT LICENSE\n */\n\nexports.Client = require('./client').Client;\nexports.Service = require('./service').Service;\nexports.Flavor = require('./flavor').Flavor;\n\nexports.createClient = function (options) {\n  return new exports.Client(options);\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/openstack/cdn/client/index.js":"/*\n * index.js: CDN client for OpenStack\n *\n * (C) 2014 Rackspace\n *      Shaunak Kashyap\n * MIT LICENSE\n */\n\nvar util = require('util'),\n    openstack = require('../../client'),\n    urlJoin = require('url-join'),\n    _ = require('lodash');\n\nvar Client = exports.Client = function (options) {\n  openstack.Client.call(this, options);\n\n  _.extend(this, require('./base'));\n  _.extend(this, require('./services'));\n  _.extend(this, require('./flavors'));\n\n  this.serviceType = 'cdn';\n\n};\n\nutil.inherits(Client, openstack.Client);\n\n/**\n * client._getUrl\n *\n * @description get the url for the current CDN service\n *\n * @param options\n * @returns {exports|*}\n * @private\n */\nClient.prototype._getUrl = function (options) {\n  options = options || {};\n\n  if (!this._serviceUrl) {\n    throw new Error('Service url not found');\n  }\n\n  return urlJoin(this._serviceUrl,\n      typeof options === 'string'\n      ? options\n      : options.path);\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/openstack/cdn/service.js":"/*\n * service.js: OpenStack CDN Service\n *\n * (C) 2014 Rackspace\n *      Shaunak Kashyap\n * MIT LICENSE\n *\n */\n\nvar util  = require('util'),\n    base  = require('../../core/base'),\n    _     = require('lodash');\n\nvar Service = exports.Service = function Service(client, details) {\n  base.Model.call(this, client, details);\n};\n\nutil.inherits(Service, base.Model);\n\nService.prototype._setProperties = function (details) {\n  this.id = details.id || details['id'];\n  this.name = details.name || details['name'];\n  this.domains = details.domains || details['domains'];\n  this.origins = details.origins || details['origins'];\n  this.caching = details.caching || details['caching'];\n  this.restrictions = details.restrictions || details['restrictions'];\n  this.flavorId = details.flavorId || details['flavor_id'];\n  this.status = details.status || details['status'];\n  this.links = details.links;\n  this.errors = details.errors;\n};\n\nService.prototype.toJSON = function () {\n  return _.pick(this, ['id', 'name', 'domains', 'origins', 'caching', \n    'restrictions', 'flavorId', 'status', 'links', 'errors']);\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/openstack/cdn/flavor.js":"/*\n * flavor.js: OpenStack CDN Flavor\n *\n * (C) 2014 Rackspace\n *      Shaunak Kashyap\n * MIT LICENSE\n *\n */\n\nvar util  = require('util'),\n    base  = require('../../core/base'),\n    _     = require('lodash');\n\nvar Flavor = exports.Flavor = function Flavor(client, details) {\n  base.Model.call(this, client, details);\n};\n\nutil.inherits(Flavor, base.Model);\n\nFlavor.prototype._setProperties = function (details) {\n  this.id = details.id || details['id'];\n  this.providers = details.providers || details['providers'];\n};\n\nFlavor.prototype.toJSON = function () {\n  return _.pick(this, ['id', 'providers']);\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/rackspace/index.js":"/*\n * index.js: Top-level include for the Rackspace module.\n *\n * (C) 2011 Charlie Robbins, Ken Perkins, Ross Kukulinski & the Contributors.\n *\n */\n\nexports.blockstorage = require('./blockstorage');\nexports.compute = require('./compute');\nexports.database = require('./database');\nexports.dns = require('./dns');\nexports.loadbalancer = require('./loadbalancer');\nexports.orchestration = require('./orchestration');\nexports.storage = require('./storage');\nexports.network = require('./network');\nexports.cdn = require('./cdn');\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/rackspace/blockstorage/index.js":"/*\n * index.js: Top-level include for the Rackspace Cloud BlockStorage module\n *\n * (C) 2013 Rackspace\n *      Ken Perkins\n * MIT LICENSE\n *\n */\n\nexports.Client = require('./client').Client;\nexports.Volume = require('../../openstack/blockstorage/volume').Volume;\nexports.VolumeType = require('../../openstack/blockstorage/volumetype').VolumeType;\nexports.Snapshot = require('../../openstack/blockstorage/snapshot').Snapshot;\n\nexports.createClient = function (options) {\n  return new exports.Client(options);\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/rackspace/blockstorage/client/index.js":"/*\n * index.js: Cloud BlockStorage client for Rackspace\n *\n * (C) 2013 Rackspace\n *      Ken Perkins\n * MIT LICENSE\n *\n */\n\nvar util = require('util'),\n    urlJoin = require('url-join'),\n    rackspace = require('../../client'),\n    _ = require('lodash');\n\nvar Client = exports.Client = function (options) {\n  rackspace.Client.call(this, options);\n\n  _.extend(this, require('../../../openstack/blockstorage/client/volumetypes'));\n  _.extend(this, require('../../../openstack/blockstorage/client/snapshots'));\n  _.extend(this, require('../../../openstack/blockstorage/client/volumes'));\n\n  this.serviceType = 'volume';\n};\n\nutil.inherits(Client, rackspace.Client);\n\nClient.prototype._getUrl = function (options) {\n  options = options || {};\n\n  return urlJoin(this._serviceUrl,\n    typeof options === 'string'\n      ? options\n      : options.path);\n\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/rackspace/client.js":"/*\n * client.js: Base client from which all Rackspace clients inherit from\n *\n * (C) 2011 Charlie Robbins, Ken Perkins, Ross Kukulinski & the Contributors.\n *\n */\n\nvar util = require('util'),\n    identity = require('./identity'),\n    base = require('../openstack/client'),\n    _ = require('lodash');\n\nvar Client = exports.Client = function (options) {\n  options = options || {};\n  options.authUrl = options.authUrl || 'https://identity.api.rackspacecloud.com';\n\n  options.identity = identity.Identity;\n\n  if (typeof options.useServiceCatalog === 'undefined') {\n    options.useServiceCatalog = true;\n  }\n\n  base.Client.call(this, options);\n\n  this.provider = 'rackspace';\n};\n\nutil.inherits(Client, base.Client);\n\nClient.prototype._getIdentityOptions = function() {\n  return _.extend({\n    apiKey: this.config.apiKey\n  }, Client.super_.prototype._getIdentityOptions.call(this));\n};\n\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/rackspace/identity/index.js":"/*\n * index.js: Identity models\n *\n * (C) 2013 Rackspace\n *      Ken Perkins\n * MIT LICENSE\n *\n */\n\nmodule.exports = require('./rackspaceIdentity');\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/rackspace/identity/rackspaceIdentity.js":"/*\n * rackspaceIdentity.js: rackspaceIdentity model\n *\n * (C) 2013 Rackspace\n *      Ken Perkins\n * MIT LICENSE\n *\n */\n\nvar identity = require('../../openstack/context'),\n  events = require('eventemitter2'),\n  Identity = identity.Identity,\n  util = require('util');\n\nvar RackspaceIdentity = exports.Identity = function (options) {\n  this.options = options;\n  this.name = 'RackspaceIdentity';\n\n  this.basePath = options.basePath || '/v2.0/tokens';\n  this.useServiceCatalog = (typeof options.useServiceCatalog === 'boolean')\n    ? options.useServiceCatalog\n    : true;\n\n  events.EventEmitter2.call(this, { delimiter: '::', wildcard: true });\n};\n\nutil.inherits(RackspaceIdentity, events.EventEmitter2);\nutil.inherits(RackspaceIdentity, Identity);\n\nRackspaceIdentity.prototype._buildAuthenticationPayload = function () {\n  var self = this;\n\n  RackspaceIdentity.super_.prototype._buildAuthenticationPayload.call(this);\n\n  this.emit('log::trace', 'Building Rackspace Identity Auth Payload');\n\n  if (!self._authenticationPayload) {\n    // setup our inputs for authorization\n    // key & username\n    if (self.options.apiKey && self.options.username) {\n      self._authenticationPayload = {\n        auth: {\n          'RAX-KSKEY:apiKeyCredentials': {\n            username: self.options.username,\n            apiKey: self.options.apiKey\n          }\n        }\n      };\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/rackspace/compute/index.js":"  /*\n * index.js: Top-level include for the Rackspace compute module\n *\n * (C) 2011 Charlie Robbins, Ken Perkins, Ross Kukulinski & the Contributors.\n *\n */\n\nexports.Client = require('./client').Client;\nexports.Flavor = require('../../openstack/compute/flavor').Flavor;\nexports.Image = require('../../openstack/compute/image').Image;\nexports.Server = require('./server').Server;\n\nexports.createClient = function (options) {\n  return new exports.Client(options);\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/rackspace/compute/client/index.js":"/*\n * client.js: Compute client for Rackspace Cloudservers\n *\n * (C) 2011 Charlie Robbins, Ken Perkins, Ross Kukulinski & the Contributors.\n *\n */\n\nvar util = require('util'),\n    rackspace = require('../../client'),\n    ComputeClient = require('../../../openstack/compute/computeClient').ComputeClient,\n    _ = require('lodash');\n\nvar Client = exports.Client = function (options) {\n  rackspace.Client.call(this, options);\n\n  _.extend(this, require('../../../openstack/compute/client/flavors'));\n  _.extend(this, require('../../../openstack/compute/client/images'));\n  _.extend(this, require('../../../openstack/compute/client/servers'));\n  _.extend(this, require('../../../openstack/compute/client/extensions'));\n\n  // rackspace specific extensions\n  _.extend(this, require('./extensions/networksv2'));\n  _.extend(this, require('./extensions/virtual-interfacesv2'));\n\n  this.serviceType = 'compute';\n};\n\nutil.inherits(Client, rackspace.Client);\n_.extend(Client.prototype, ComputeClient.prototype);\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/rackspace/compute/server.js":"/*\n * server.js: Rackspace Cloud server\n *\n * (C) 2013 Rackspace\n *      Ken Perkins\n * MIT LICENSE\n *\n */\n\nvar util = require('util'),\n    base = require('../../openstack/compute/server');\n\nvar Server = exports.Server = function Server(client, details) {\n  base.Server.call(this, client, details);\n};\n\nutil.inherits(Server, base.Server);\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/rackspace/database/index.js":"/*\n * index.js: Top-level include for the Rackspace database module\n *\n * (C) 2011 Charlie Robbins, Ken Perkins, Ross Kukulinski & the Contributors.\n *\n */\n\nexports.Client    = require('./client').Client;\nexports.Flavor    = require('../../openstack/database/flavor').Flavor;\nexports.Instance  = require('../../openstack/database/instance').Instance;\nexports.Database  = require('../../openstack/database/database').Database;\nexports.User      = require('../../openstack/database/user').User;\n\nexports.createClient = function createClient(options) {\n  return new exports.Client(options);\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/rackspace/database/client/index.js":"/*\n * client.js: Database client for Rackspace Cloud Databases\n *\n * (C) 2011 Charlie Robbins, Ken Perkins, Ross Kukulinski & the Contributors.\n *\n */\n\nvar util      = require('util'),\n    urlJoin   = require('url-join'),\n    rackspace = require('../../client'),\n    auth      = require('../../../common/auth.js'),\n    _         = require('lodash');\n\nvar Client = exports.Client = function (options) {\n  rackspace.Client.call(this, options);\n\n  this.before.push(auth.accountId);\n\n  _.extend(this, require('../../../openstack/database/client/flavors'));\n  _.extend(this, require('../../../openstack/database/client/instances'));\n  _.extend(this, require('../../../openstack/database/client/databases'));\n  _.extend(this, require('../../../openstack/database/client/users'));\n\n  this.serviceType = 'rax:database';\n};\n\nutil.inherits(Client, rackspace.Client);\n\nClient.prototype._getUrl = function (options) {\n  options = options || {};\n\n  return urlJoin(this._serviceUrl,\n    typeof options === 'string'\n      ? options\n      : options.path);\n\n};\n\n//\n// Gets the version of the OpenStack Compute API we are running against\n// Parameters: callback\n//\nClient.prototype.getVersion = function getVersion(callback) {\n  var self = this;\n\n  this.auth(function (err) {\n    if (err) {\n      return callback(err);\n    }\n\n    self._request({\n      uri: self._getUrl('/').replace('/v1.0/' + self._identity.token.tenant.id + '/', '')\n    }, function (err, body) {\n      if (err) {\n        return callback(err);\n      }\n      return callback(null,\n        ((typeof body === 'object') ? body.versions : JSON.parse(body).versions));\n    });\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/rackspace/dns/index.js":"/*\n * index.js: Top-level include for the Rackspace dns service\n *\n * (C) 2013 Rackspace\n *      Ken Perkins\n * MIT LICENSE\n *\n */\n\nexports.Client = require('./client').Client;\nexports.Record = require('./record').Record;\nexports.Status = require('./status').Status;\nexports.Zone = require('./zone').Zone;\n\nexports.createClient = function (options) {\n  return new exports.Client(options);\n};","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/rackspace/dns/client/index.js":"/*\n * index.js: Rackspace DNS client\n *\n * (C) 2013 Rackspace\n *      Ken Perkins\n * MIT LICENSE\n *\n */\n\nvar util = require('util'),\n    rackspace = require('../../client'),\n    urlJoin = require('url-join'),\n    Status = require('../status').Status,\n    _ = require('lodash');\n\nvar Client = exports.Client = function (options) {\n  rackspace.Client.call(this, options);\n\n  _.extend(this, require('./records.js'));\n  _.extend(this, require('./zones.js'));\n\n  this.serviceType = 'rax:dns';\n};\n\nutil.inherits(Client, rackspace.Client);\n\nClient.prototype._getUrl = function (options) {\n  options = options || {};\n\n  var fragment = '';\n\n  if (options.path) {\n    fragment = urlJoin(fragment, options.path);\n  }\n\n  if (fragment === '' || fragment === '/') {\n    return this._serviceUrl;\n  }\n\n  return urlJoin(this._serviceUrl, fragment);\n};\n\nClient.prototype._asyncRequest = function(options, callback) {\n  var self = this;\n\n  self._request(options, function (err, body) {\n    if (err) {\n      return callback(err);\n    }\n\n    var status = new Status(self, body);\n\n    status.setWait(function (details) {\n      return (details.status !== 'RUNNING' && details.status !== 'INITIALIZED');\n    }, 1000, 30000, function (err, results) {\n\n      return err\n        ? callback(err)\n        : results.error\n        ? callback(results.error)\n        : callback(err, results);\n    });\n  });\n};","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/rackspace/dns/status.js":"/*\n * status.js: Rackspace Cloud DNS Status\n *\n * (C) 2013 Rackspace\n *      Ken Perkins\n * MIT LICENSE\n *\n */\n\nvar util = require('util'),\n    base = require('../../core/base/model');\n\nvar Status = exports.Status = function Status(client, details) {\n  base.Model.call(this, client, details);\n};\n\nutil.inherits(Status, base.Model);\n\n/**\n * @name Status.getDetails\n *\n * @description Update the Status details for this instance\n *\n * @param {Function}    callback    handles the callback of your api call\n */\nStatus.prototype.getDetails = function (callback) {\n  var self = this;\n\n  var requestOptions = {\n    path: '/status/' + self.id,\n    qs: { showDetails: true }\n  };\n\n  self.client._request(requestOptions, function (err, body) {\n    if (err) {\n      return callback(err);\n    }\n    else if (!body) {\n      return callback(new Error('Unexpected empty response'));\n    }\n\n    self._setProperties(body);\n    return callback(err, self);\n  });\n};\n\nStatus.prototype.refresh = Status.prototype.getDetails;\n\n/**\n * @name Status._setProperties\n *\n * @description Loads the properties of an object into this instance\n *\n * @param {Object}      details     the details to load\n */\nStatus.prototype._setProperties = function (details) {\n\n  if (!details) {\n    throw new Error('Details is a required argument');\n  }\n\n  this.id = details.jobId;\n  this.status = details.status;\n  this.response = details.response;\n  this.error = details.error;\n};\n\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/rackspace/dns/record.js":"/*\n * record.js: Rackspace Cloud DNS Record\n *\n * (C) 2013 Rackspace\n *      Ken Perkins\n * MIT LICENSE\n *\n */\n\nvar util = require('util'),\n    base = require('../../core/dns/record'),\n    _ = require('lodash');\n\nvar Record = exports.Record = function Record(zone, details) {\n  base.Record.call(this, zone, details);\n};\n\nutil.inherits(Record, base.Record);\n\nRecord.prototype._setProperties = function (details) {\n  var self = this;\n  self.id = details.id;\n  self.name = details.name;\n  self.type = details.type;\n  self.data = details.data;\n  self.ttl = details.ttl;\n  self.updated = new Date(details.updated);\n  self.created = new Date(details.created);\n};\n\nRecord.prototype.toJSON = function () {\n  return _.pick(this, ['id', 'name', 'type', 'ttl', 'data',\n    'created', 'updated']);\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/core/dns/record.js":"/*\n * record.js: Base record from which all pkgcloud dns record inherit from\n *\n * (C) 2013 Rackspace\n *      Ken Perkins\n * MIT LICENSE\n *\n */\n\nvar util = require('util'),\n    model = require('../base/model');\n\nvar Record = exports.Record = function (zone, details) {\n  model.Model.call(this, zone.client, details);\n};\n\nutil.inherits(Record, model.Model);\n\nRecord.prototype.create = function(callback) {\n  return this.zone.createRecord(this, callback);\n};\n\nRecord.prototype.get = function(callback) {\n  return this.zone.getRecord(this, callback);\n};\n\nRecord.prototype.update = function(callback) {\n  return this.zone.updateRecord(this, callback);\n};\n\nRecord.prototype.destroy = function(callback) {\n  return this.zone.deleteRecord(this, callback);\n};","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/rackspace/dns/zone.js":"/*\n * zone.js: Rackspace Cloud DNS Zone\n *\n * (C) 2013 Rackspace\n *      Ken Perkins\n * MIT LICENSE\n *\n */\n\nvar util = require('util'),\n    base = require('../../core/dns/zone'),\n    _ = require('lodash');\n\nvar Zone = exports.Zone = function Zone(client, details) {\n  base.Zone.call(this, client, details);\n};\n\nutil.inherits(Zone, base.Zone);\n\nZone.prototype._setProperties = function (details) {\n  var self = this;\n\n  self.id = details.id;\n  self.name = details.name;\n  self.accountId = details.accountId;\n  self.ttl = details.ttl;\n  self.emailAddress = details.emailAddress;\n  self.updated = new Date(details.updated);\n  self.created = new Date(details.created);\n  self.nameservers = details.nameservers || [];\n\n};\n\nZone.prototype.toJSON = function () {\n  return _.pick(this, ['id', 'name', 'description', 'ttl', 'accountId',\n    'nameservers', 'emailAddress', 'created', 'updated']);\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/core/dns/zone.js":"/*\n * zone.js: Base zone from which all pkgcloud dns zone inherit from\n *\n * (C) 2013 Rackspace\n *      Ken Perkins\n * MIT LICENSE\n *\n */\n\nvar util = require('util'),\n    model = require('../base/model');\n\nvar Zone = exports.Zone = function (client, details) {\n  model.Model.call(this, client, details);\n};\n\nutil.inherits(Zone, model.Model);\n\nZone.prototype.create = function (callback) {\n  return this.client.createZone(this, callback);\n};\n\nZone.prototype.get = function (callback) {\n  return this.client.getZone(this, callback);\n};\n\nZone.prototype.update = function (callback) {\n  return this.client.updateZone(this, callback);\n};\n\nZone.prototype.destroy = function (callback) {\n  return this.client.deleteZone(this, callback);\n};","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/rackspace/loadbalancer/index.js":"/*\n * index.js: Top-level include for the Rackspace Cloud LoadBalancers module\n *\n * (C) 2013 Rackspace\n *      Ken Perkins\n * MIT LICENSE\n *\n */\n\nexports.Client = require('./client').Client;\nexports.LoadBalancer = require('./loadbalancer').LoadBalancer;\nexports.Node = require('./node').Node;\nexports.Protocols = require('./protocols').Protocols;\nexports.VirtualIp = require('./virtualip').VirtualIp;\nexports.VirtualIpTypes = require('./virtualip').VirtualIpTypes;\n\nexports.createClient = function (options) {\n  return new exports.Client(options);\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/rackspace/loadbalancer/client/index.js":"/*\n * index.js: Rackspace loadbalancer client\n *\n * (C) 2013 Rackspace\n *      Ken Perkins\n * MIT LICENSE\n *\n */\n\nvar util = require('util'),\n    rackspace = require('../../client'),\n    urlJoin = require('url-join'),\n    _ = require('lodash');\n\nvar Client = exports.Client = function (options) {\n  rackspace.Client.call(this, options);\n\n  _.extend(this, require('./nodes.js'));\n  _.extend(this, require('./loadbalancers.js'));\n\n  this.serviceType = 'rax:load-balancer';\n};\n\nutil.inherits(Client, rackspace.Client);\n\nClient.prototype._getUrl = function (options) {\n  options = options || {};\n\n  var fragment = '';\n\n  if (options.path) {\n    fragment = urlJoin(fragment, options.path);\n  }\n\n  if (fragment === '' || fragment === '/') {\n    return this._serviceUrl;\n  }\n\n  return urlJoin(this._serviceUrl, fragment);\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/rackspace/loadbalancer/loadbalancer.js":"/*\n * loadbalancer.js: Rackspace Cloud LoadBalancer LoadBalancer\n *\n * (C) 2013 Rackspace\n *      Ken Perkins\n * MIT LICENSE\n *\n */\n\nvar util = require('util'),\n    base = require('../../core/loadbalancer/loadbalancer'),\n    _ = require('lodash');\n\nvar LoadBalancer = exports.LoadBalancer = function LoadBalancer(client, details) {\n  base.LoadBalancer.call(this, client, details);\n};\n\nutil.inherits(LoadBalancer, base.LoadBalancer);\n\nLoadBalancer.prototype._setProperties = function (details) {\n  var self = this;\n\n  self.id = details.id;\n  self.name = details.name;\n  self.protocol = details.protocol;\n  self.port = details.port;\n  self.algorithm = details.algorithm;\n  self.cluster = details.cluster;\n  self.status = details.status;\n  self.timeout = details.timeout;\n  self.halfClosed = details.halfClosed;\n  self.nodes = details.nodes || [];\n  self.virtualIps = details.virtualIps || [];\n  self.sourceAddresses = details.sourceAddresses;\n  self.httpsRedirect = details.httpsRedirect;\n  self.connectionLogging = details.connectionLogging;\n  self.contentCaching = details.contentCaching;\n  self.nodeCount = details.nodeCount || (details.nodes ? details.nodes.length : 0);\n  self.created = details.created;\n  self.updated = details.updated;\n};\n\n/// Nodes\n\nLoadBalancer.prototype.refresh = function(callback) {\n  var self = this;\n  return self.client.getLoadBalancer(this, function (err, server) {\n    if (err) {\n      callback(err);\n      return;\n    }\n\n    self._setProperties(server);\n    callback(err, self);\n  });\n};\n\nLoadBalancer.prototype.getNodes = function(callback) {\n  this.client.getNodes(this, callback);\n};\n\nLoadBalancer.prototype.addNode = function(node, callback) {\n  this.client.addNodes(this, [ node ], callback);\n};\n\nLoadBalancer.prototype.addNodes = function(nodes, callback) {\n  this.client.addNodes(this, nodes, callback);\n};\n\nLoadBalancer.prototype.updateNode = function(node, callback) {\n  this.client.updateNode(this, node, callback);\n};\n\nLoadBalancer.prototype.removeNode = function (node, callback) {\n  this.client.removeNode(this, node, callback);\n};\n\nLoadBalancer.prototype.removeNodes = function(nodes, callback) {\n  this.client.removeNodes(this, nodes, callback);\n};\n\nLoadBalancer.prototype.getNodeServiceEvents = function (callback) {\n  this.client.getNodeServiceEvents(this, callback);\n};\n\n/// Virtual IPs\n\nLoadBalancer.prototype.getVirtualIps = function (callback) {\n  this.client.getVirtualIps(this, callback);\n};\n\nLoadBalancer.prototype.addIPV6VirtualIp = function (callback) {\n  this.client.addIPV6VirtualIp(this, callback);\n};\n\nLoadBalancer.prototype.removeVirtualIp = function (virtualIp, callback) {\n  this.client.removeVirtualIp(this, virtualIp, callback);\n};\n\n/// SSL Config\n\nLoadBalancer.prototype.getSSLConfig = function (callback) {\n  this.client.getSSLConfig(this, callback);\n};\n\nLoadBalancer.prototype.updateSSLConfig = function (details, callback) {\n  this.client.updateSSLConfig(this, details, callback);\n};\n\nLoadBalancer.prototype.removeSSLConfig = function (callback) {\n  this.client.removeSSLConfig(this, callback);\n};\n\n/// Access List\n\nLoadBalancer.prototype.getAccessList = function (callback) {\n  this.client.getAccessList(this, callback);\n};\n\nLoadBalancer.prototype.addAccessList = function (accessList, callback) {\n  this.client.addAccessList(this, accessList, callback);\n};\n\nLoadBalancer.prototype.deleteAccessListItem = function (accessListItem, callback) {\n  this.client.deleteAccessListItem(this, accessListItem, callback);\n};\n\nLoadBalancer.prototype.deleteAccessList = function (accessList, callback) {\n  this.client.deleteAccessList(this, accessList, callback);\n};\n\nLoadBalancer.prototype.resetAccessList = function (callback) {\n  this.client.resetAccessList(this, callback);\n};\n\n/// Health Monitor\n\nLoadBalancer.prototype.getHealthMonitor = function (callback) {\n  this.client.getHealthMonitor(this, callback);\n};\n\nLoadBalancer.prototype.updateHealthMonitor = function (details, callback) {\n  this.client.updateHealthMonitor(this, details, callback);\n};\n\nLoadBalancer.prototype.removeHealthMonitor = function (callback) {\n  this.client.removeHealthMonitor(this, callback);\n};\n\n/// Session Persistence\n\nLoadBalancer.prototype.getSessionPersistence = function (callback) {\n  this.client.getSessionPersistence(this, callback);\n};\n\nLoadBalancer.prototype.enableSessionPersistence = function (type, callback) {\n  this.client.enableSessionPersistence(this, type, callback);\n};\n\nLoadBalancer.prototype.disableSessionPersistence = function (callback) {\n  this.client.disableSessionPersistence(this, callback);\n};\n\n/// Connection Logging\n\nLoadBalancer.prototype.getConnectionLoggingConfig = function (callback) {\n  this.client.getConnectionLoggingConfig(this, callback);\n};\n\nLoadBalancer.prototype.enableConnectionLogging = function (callback) {\n  this.client.updateConnectionLogging(this, true, callback);\n};\n\nLoadBalancer.prototype.disableConnectionLogging = function (callback) {\n  this.client.updateConnectionLogging(this, false, callback);\n};\n\n/// Connection Throttle\n\nLoadBalancer.prototype.getConnectionThrottleConfig = function (callback) {\n  this.client.getConnectionThrottleConfig(this, callback);\n};\n\nLoadBalancer.prototype.updateConnectionThrottle = function (details, callback) {\n  this.client.updateConnectionThrottle(this, details, callback);\n};\n\nLoadBalancer.prototype.disableConnectionThrottle = function (callback) {\n  this.client.disableConnectionThrottle(this, callback);\n};\n\n/// Content Caching\n\nLoadBalancer.prototype.getContentCachingConfig = function (callback) {\n  this.client.getContentCachingConfig(this, callback);\n};\n\nLoadBalancer.prototype.enableContentCaching = function (callback) {\n  this.client.updateContentCaching(this, true, callback);\n};\n\nLoadBalancer.prototype.disableContentCaching = function (callback) {\n  this.client.updateContentCaching(this, false, callback);\n};\n\n/// Error Page\n\nLoadBalancer.prototype.getErrorPage = function (callback) {\n  this.client.getErrorPage(this, callback);\n};\n\nLoadBalancer.prototype.setErrorPage = function (content, callback) {\n  this.client.setErrorPage(this, content, callback);\n};\n\nLoadBalancer.prototype.deleteErrorPage = function (callback) {\n  this.client.deleteErrorPage(this, callback);\n};\n\n/// Stats & Usage\n\nLoadBalancer.prototype.getStats = function (callback) {\n  this.client.getStats(this, callback);\n};\n\nLoadBalancer.prototype.getCurrentUsage = function (callback) {\n  this.client.getCurrentUsage(this, callback);\n};\n\nLoadBalancer.prototype.getHistoricalUsage = function (startTime, endTime, callback) {\n  this.client.getHistoricalUsage(this, startTime, endTime, callback);\n};\n\nLoadBalancer.prototype.toJSON = function () {\n  return _.pick(this, ['id', 'name', 'protocol', 'port', 'algorithm', 'halfClosed',\n    'cluster', 'sourceAddresses', 'httpsRedirect', 'connectionLogging', 'contentCaching',\n    'status', 'timeout', 'nodes', 'virtualIps', 'nodeCount', 'created', 'updated']);\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/core/loadbalancer/loadbalancer.js":"/*\n * loadbalancer.js: Base record from which all pkgcloud loadbalancers inherit from\n *\n * (C) 2013 Rackspace\n *      Ken Perkins\n * MIT LICENSE\n *\n */\n\nvar util = require('util'),\n    model = require('../base/model');\n\nvar LoadBalancer = exports.LoadBalancer = function (client, details) {\n  model.Model.call(this, client, details);\n};\n\nutil.inherits(LoadBalancer, model.Model);\n\nLoadBalancer.prototype.create = function (callback) {\n  return this.client.createLoadBalancer(this, callback);\n};\n\nLoadBalancer.prototype.get = function (callback) {\n  return this.client.getLoadBalancer(this, callback);\n};\n\nLoadBalancer.prototype.update = function (callback) {\n  return this.client.updateLoadBalancer(this, callback);\n};\n\nLoadBalancer.prototype.destroy = function (callback) {\n  return this.client.deleteLoadBalancer(this, callback);\n};","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/rackspace/loadbalancer/node.js":"/*\n * node.js: Rackspace Cloud LoadBalancer Node\n *\n * (C) 2013 Rackspace\n *      Ken Perkins\n * MIT LICENSE\n *\n */\n\nvar util = require('util'),\n    base = require('../../core/loadbalancer/node'),\n    _ = require('lodash');\n\nvar Node = exports.Node = function Node(client, details) {\n  base.Node.call(this, client, details);\n};\n\nutil.inherits(Node, base.Node);\n\nNode.prototype._setProperties = function (details) {\n  var self = this;\n\n  self.id = details.id;\n  self.loadBalancerId = (typeof details.loadBalancerId === 'string')\n    ? parseInt(details.loadBalancerId) : details.loadBalancerId;\n  self.type = details.type;\n  self.port = details.port;\n  self.weight = details.weight;\n  self.status = details.status;\n  self.condition = details.condition;\n  self.address = details.address;\n};\n\nNode.prototype.toJSON = function () {\n  return _.pick(this, ['id', 'loadBalancerId', 'type', 'port', 'weight', 'status',\n    'condition', 'address']);\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/core/loadbalancer/node.js":"/*\n * node.js: Base record from which all pkgcloud loadbalancer node models inherit from\n *\n * (C) 2013 Rackspace\n *      Ken Perkins\n * MIT LICENSE\n *\n */\n\nvar util = require('util'),\n    model = require('../base/model');\n\nvar Node = exports.Node = function (client, details) {\n  model.Model.call(this, client, details);\n};\n\nutil.inherits(Node, model.Model);\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/rackspace/loadbalancer/protocols.js":"/*\n * protocols.js: Convenience object for LB protocols\n *\n * // TODO Move this into generalized helper section\n *\n * (C) 2013 Ken Perkins\n *\n * MIT LICENSE\n *\n */\n\nexports.Protocols = {\n  DNS_TCP: {\n    name: 'DNS_TCP',\n    port: 53\n\n  }, DNS_UDP: {\n    name: 'DNS_UDP',\n    port: 53\n  },\n  FTP: {\n    name: 'FTP',\n    port: 21\n  },\n  HTTP: {\n    name: 'HTTP',\n    port: 80\n  },\n  HTTPS: {\n    name: 'HTTPS',\n    port: 443\n  },\n  IMAPS: {\n    name: 'IMAPS',\n    port: 993\n  },\n  IMAPv4: {\n    name: 'IMAPv4',\n    port: 143\n  },\n  LDAP: {\n    name: 'LDAP',\n    port: 389\n  },\n  LDAPS: {\n    name: 'LDAPS',\n    port: 636\n  },\n  MYSQL: {\n    name: 'MYSQL',\n    port: 3306\n  },\n  POP3: {\n    name: 'POP3',\n    port: 110\n  },\n  POP3S: {\n    name: 'POP3S',\n    port: 995\n  },\n  SMTP: {\n    name: 'SMTP',\n    port: 25\n  },\n  TCP: {\n    name: 'TCP',\n    port: 0\n  },\n  TCP_CLIENT_FIRST: {\n    name: 'TCP_CLIENT_FIRST',\n    port: 0\n  },\n  UDP: {\n    name: 'UDP',\n    port: 0\n  },\n  UDP_STREAM: {\n    name: 'UDP_STREAM',\n    port: 0\n  },\n  SFTP: {\n    name: 'SFTP',\n    port: 22\n  }\n};","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/rackspace/loadbalancer/virtualip.js":"/*\n * virtualip.js: Instance of a rackspace cloud loadbalancer virtual IP\n *\n * (C) 2013 Ken Perkins\n *\n * MIT LICENSE\n *\n */\n\nvar VirtualIp = function (details) {\n  if (!details) {\n    throw new Error('VirtualIp must be constructed with at-least basic details.');\n  }\n\n  this._setProperties(details);\n};\n\nVirtualIp.prototype = {\n\n  /**\n   * @name VirtualIp._setProperties\n   *\n   * @description Loads the properties of an object into this instance\n   *\n   * @param {Object}      details     the details to load\n   */\n  _setProperties: function (details) {\n    this.id = details.id;\n    this.address = details.address;\n    this.type = details.type;\n    this.ipVersion = details.ipVersion;\n  }\n};\n\nexports.VirtualIp = VirtualIp;\n\nexports.VirtualIpTypes = {\n  PUBLIC: 'PUBLIC',\n  SERVICENET: 'SERVICENET'\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/rackspace/orchestration/index.js":"  /*\n * index.js: Top-level include for the Rackspace orchestration module\n *\n * (C) 2014 Rackspace\n *      Ken Perkins\n * MIT LICENSE\n *\n */\n\nexports.Client = require('./client').Client;\nexports.Stack = require('../../openstack/orchestration/stack').Stack;\nexports.Resource = require('../../openstack/orchestration/resource').Resource;\n\nexports.createClient = function (options) {\n  return new exports.Client(options);\n};","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/rackspace/orchestration/client/index.js":"/*\n * client.js: client for Rackspace Orchestration\n *\n * (C) 2014 Rackspace\n *      Ken Perkins\n * MIT LICENSE\n */\n\nvar util = require('util'),\n  rackspace = require('../../client'),\n  urlJoin = require('url-join'),\n  _ = require('lodash');\n\nvar Client = exports.Client = function (options) {\n  rackspace.Client.call(this, options);\n\n  _.extend(this, require('../../../openstack/orchestration/client/events'));\n  _.extend(this, require('../../../openstack/orchestration/client/resources'));\n  _.extend(this, require('../../../openstack/orchestration/client/stacks'));\n  _.extend(this, require('../../../openstack/orchestration/client/templates'));\n\n  this.serviceType = 'orchestration';\n};\n\nutil.inherits(Client, rackspace.Client);\n\n/**\n * client._getUrl\n *\n * @description get the url for the current compute service\n *\n * @param options\n * @returns {exports|*}\n * @private\n */\nClient.prototype._getUrl = function (options) {\n  options = options || {};\n\n  if (!this._serviceUrl) {\n    throw new Error('Service url not found');\n  }\n\n  return urlJoin(this._serviceUrl,\n      typeof options === 'string'\n      ? options\n      : options.path);\n};\n\n/**\n * client.buildInfo\n *\n * @description gets the build information for the orchestration service\n *\n * @param callback\n * @returns {*}\n */\nClient.prototype.buildInfo = function (callback) {\n  return this._request({\n    path: '/build_info'\n  }, function (err, body) {\n    if (err) {\n      return callback(err);\n    }\n\n    callback(null, body);\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/rackspace/storage/index.js":"  /*\n * index.js: Top-level include for the Rackspace storage module\n *\n * (C) 2013 Rackspace\n *      Ken Perkins\n * MIT LICENSE\n *\n */\n\nexports.Client = require('./client').Client;\nexports.Container = require('./container').Container;\nexports.File = require('./file').File;\n\nexports.createClient = function (options) {\n  return new exports.Client(options);\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/rackspace/storage/client/index.js":"/*\n * client.js: Compute client for Rackspace Cloudservers\n *\n * (C) 2011 Charlie Robbins, Ken Perkins, Ross Kukulinski & the Contributors.\n *\n */\n\nvar util = require('util'),\n    rackspace = require('../../client'),\n    StorageClient = require('../../../openstack/storage/storageClient').StorageClient,\n    _ = require('lodash');\n\nvar Client = exports.Client = function (options) {\n  rackspace.Client.call(this, options);\n\n  this.models = {\n    Container: require('../container').Container,\n    File: require('../file').File\n  };\n\n  _.extend(this, require('../../../openstack/storage/client/containers'));\n  _.extend(this, require('../../../openstack/storage/client/files'));\n  _.extend(this, require('./archive'));\n  _.extend(this, require('./cdn-containers'));\n  _.extend(this, require('./files'));\n\n  this.serviceType = 'object-store';\n  this.cdnServiceType = 'rax:object-cdn';\n};\n\nutil.inherits(Client, rackspace.Client);\n_.extend(Client.prototype, StorageClient.prototype);\n\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/rackspace/storage/container.js":"/*\n * container.js: Rackspace Object Storage Container\n *\n * (C) 2013 Rackspace, Ken Perkins\n * MIT LICENSE\n *\n */\n\nvar util = require('util'),\n    base = require('../../openstack/storage/container'),\n    _ = require('lodash');\n\nvar Container = exports.Container = function Container(client, details) {\n  base.Container.call(this, client, details);\n};\n\nutil.inherits(Container, base.Container);\n\nContainer.prototype.refreshCdnDetails = function (callback) {\n  var self = this;\n\n  this.client._getCdnContainerDetails(this, function (err, details) {\n    if (err) {\n      return callback(err);\n    }\n\n    self._setProperties(details);\n\n    return callback(err, self);\n  });\n};\n\nContainer.prototype.enableCdn = function (callback) {\n  this.client.setCdnEnabled(this, callback);\n};\n\nContainer.prototype.disableCdn = function (callback) {\n  this.client.setCdnEnabled(this, false, callback);\n};\n\nContainer.prototype.updateCdn = function (options, callback) {\n  this.client.updateCdnContainer(this, options, callback);\n};\n\nContainer.prototype.setStaticWebsite = function (options, callback) {\n  this.client.setStaticWebsite(this, options, callback);\n};\n\nContainer.prototype.removeStaticWebsite = function (callback) {\n  this.client.removeStaticWebsite(this, callback);\n};\n\nContainer.prototype._setProperties = function (details) {\n  this.cdnEnabled = details.cdnEnabled || this.cdnEnabled || false;\n  this.cdnUri = details.cdnUri || this.cdnUri;\n  this.cdnSslUri = details.cdnSslUri || this.cdnSslUri;\n  this.cdnStreamingUri = details.cdnStreamingUri || this.cdnStreamingUri;\n  this.cdniOSUri = details.cdniOSUri || this.cdniOSUri;\n  Container.super_.prototype._setProperties.call(this, details);\n};\n\nContainer.prototype.toJSON = function () {\n  return _.pick(this, ['name', 'ttl', 'logRetention', 'count',\n    'bytes', 'cdnEnabled', 'cdnUri', 'cdnSslUri', 'cdnStreamingUri',\n    'cdniOSUri', 'metadata']);\n};\n\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/rackspace/storage/file.js":"/*\n * server.js: Rackspace Cloud Files file\n *\n * (C) 2013 Rackspace\n *      Ken Perkins\n * MIT LICENSE\n *\n */\n\nvar util = require('util'),\n  base = require('../../openstack/storage/file'),\n  _ = require('lodash');\n\nvar File = exports.File = function File(client, details) {\n  base.File.call(this, client, details);\n};\n\nutil.inherits(File, base.File);\n\nFile.prototype.purgeFromCdn = function (emails, callback) {\n  this.client.purgeFileFromCdn(this.container, this, emails, callback);\n};\n\nFile.prototype.toJSON = function () {\n  return _.pick(this, ['name', 'size', 'contentType', 'lastModified',\n    'container', 'etag', 'metadata']);\n};","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/rackspace/network/index.js":"/*\n * index.js: Top-level include for the Rackspace Networking module.\n *\n * (C) 2014 Rackspace\n *      Shaunak Kashyap\n * MIT LICENSE\n */\n\nexports.Client = require('./client').Client;\nexports.Network = require('../../openstack/network/network').Network;\nexports.Subnet = require('../../openstack/network/subnet').Subnet;\nexports.Port = require('../../openstack/network/port').Port;\nexports.SecurityGroup = require('../../openstack/network/securityGroup').SecurityGroup;\n\nexports.createClient = function(options) {\n  return new exports.Client(options);\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/rackspace/network/client/index.js":"/*\n * client.js: client for Rackspace Networking\n *\n * (C) 2014 Rackspace\n *      Shaunak Kashyap\n * MIT License\n */\n\nvar util = require('util'),\n  rackspace = require('../../client'),\n  NetworkClient = require('../../../openstack/network/networkClient').NetworkClient,\n  _ = require('lodash');\n\nvar Client = exports.Client = function (options) {\n  rackspace.Client.call(this, options);\n\n  this.models = {\n    Network: require('../../../openstack/network/network').Network,\n    Subnet: require('../../../openstack/network/subnet').Subnet,\n    Port: require('../../../openstack/network/port').Port,\n    SecurityGroup: require('../../../openstack/network/securityGroup').SecurityGroup,\n    SecurityGroupRule: require('../../../openstack/network/securityGroupRule').SecurityGroupRule\n  };\n\n  _.extend(this, require('../../../openstack/network/client/networks'));\n  _.extend(this, require('../../../openstack/network/client/subnets'));\n  _.extend(this, require('../../../openstack/network/client/ports'));\n  _.extend(this, require('../../../openstack/network/client/securityGroups'));\n  _.extend(this, require('../../../openstack/network/client/securityGroupRules'));\n\n  this.serviceType = 'network';\n};\n\nutil.inherits(Client, rackspace.Client);\n_.extend(Client.prototype, NetworkClient.prototype);\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/rackspace/cdn/index.js":"/*\n * index.js: Top-level include for the Rackspace CDN module.\n *\n * (C) 2014 Rackspace\n *      Shaunak Kashyap\n * MIT LICENSE\n */\n\nexports.Client = require('./client').Client;\nexports.Service = require('../../openstack/cdn/service').Service;\nexports.Flavor = require('../../openstack/cdn/flavor').Flavor;\n\nexports.createClient = function(options) {\n  return new exports.Client(options);\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/rackspace/cdn/client/index.js":"/*\n * client.js: client for Rackspace CDN\n *\n * (C) 2014 Rackspace\n *      Shaunak Kashyap\n * MIT License\n */\n\nvar util = require('util'),\n  rackspace = require('../../client'),\n  urlJoin = require('url-join'),\n  _ = require('lodash');\n\nvar Client = exports.Client = function (options) {\n  rackspace.Client.call(this, options);\n\n  this.models = {\n    Service: require('../../../openstack/cdn/service').Service,\n    Flavor: require('../../../openstack/cdn/flavor').Flavor\n  };\n\n  _.extend(this, require('../../../openstack/cdn/client/base'));\n  _.extend(this, require('../../../openstack/cdn/client/services'));\n  _.extend(this, require('../../../openstack/cdn/client/flavors'));\n\n  this.serviceType = 'rax:cdn';\n};\n\nutil.inherits(Client, rackspace.Client);\n\n/**\n * client._getUrl\n *\n * @description get the url for the current compute service\n *\n * @param options\n * @returns {exports|*}\n * @private\n */\nClient.prototype._getUrl = function (options) {\n  options = options || {};\n\n  if (!this._serviceUrl) {\n    throw new Error('Service url not found');\n  }\n\n  return urlJoin(this._serviceUrl,\n      typeof options === 'string'\n      ? options\n      : options.path);\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/redistogo/index.js":"/*\n * index.js: Top-level include for the RedisToGo module.\n *\n * (C) 2011 Charlie Robbins, Ken Perkins, Ross Kukulinski & the Contributors.\n *\n */\n\nexports.database = require('./database');\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/redistogo/database/index.js":"/*\n * index.js: Top-level include for the RedisToGo database module\n *\n * (C) 2011 Charlie Robbins, Ken Perkins, Ross Kukulinski & the Contributors.\n *\n */\n\nexports.Client    = require('./client').Client;\n\nexports.createClient = function createClient(options) {\n  return new exports.Client(options);\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/redistogo/database/client/index.js":"/*\n * client.js: Database client for RedisToGo Cloud Databases\n *\n * (C) 2011 Charlie Robbins, Ken Perkins, Ross Kukulinski & the Contributors.\n *\n */\n\nvar util      = require('util'),\n    request   = require('request'),\n    pkgcloud  = require('../../../../pkgcloud'),\n    errs      = require('errs');\n\nvar Client = exports.Client = function (options) {\n  this.username = options.username;\n  this.password = options.password;\n  this._url = options.url || 'https://redistogo.com';\n};\n\nClient.prototype._getUrl = function () {\n  return this._url;\n};\n\n//\n// Wrapper for all http requests with RedisToGo\n//\n\nClient.prototype._request = function (options, callback) {\n  var self = this;\n\n  options.headers['User-Agent'] = util.format('nodejs-pkgcloud/%s', pkgcloud.version);\n\n  request(options, function (err, response, body) {\n    if (err) {\n      return callback(err);\n    }\n    if (response.statusCode == 401 || response.statusCode == 403) {\n      return callback('Unauthorized');\n    }\n    if (options.method !== 'DELETE') {\n      var database;\n      if (typeof body !== 'object') {\n        try {\n          database = JSON.parse(body);\n        } catch (e) {\n          return callback('Bad response from server.', body);\n        }\n      } else { database = body; }\n      database = self.formatResponse(database);\n      return callback(null, database);\n    } else {\n      return callback(null, 'deleted');\n    }\n  });\n};\n\n//  Create a new database at redistogo\n//  Need a correct plan\n//  ### @attrs {Object} Map of options\n//  ##### @attrs['plan'] Plan for the database.(required)\nClient.prototype.create = function (attrs, callback) {\n  // Check for options.\n  if (!attrs || typeof attrs === 'function') {\n    return errs.handle(errs.create({\n      message: 'Options required for create a database.'\n    }), Array.prototype.slice.call(arguments).pop());\n  }\n  // Check for plan.\n  if (!attrs['plan']) {\n    attrs['plan'] = 'nano';\n  }\n  //\n  // TODO: Add validation for options.plan types\n  //\n  var options = {\n    uri    : this._getUrl() + '/instances.json',\n    method : 'POST',\n    body   : 'instance%5Bplan%5D=' + attrs.plan,\n    headers: {\n      'Authorization': 'Basic ' + new Buffer(this.username + ':' + this.password).toString('base64')\n    }\n  };\n  this._request(options, callback);\n};\n\n//  Get information about specific database\n//  Need the database ID\n//  ### @id {String} ID of the database.(required)\nClient.prototype.get = function (id, callback) {\n  // Check for id\n  if (!id || typeof id === 'function') {\n    return errs.handle(errs.create({\n      message: 'ID is a required argument'\n    }), Array.prototype.slice.call(arguments).pop());\n  }\n  var options,\n      path = '/instances';\n  if (id !== null) {\n    path = path + '/' + id;\n  }\n  options = {\n    uri    : this._getUrl() + path + '.json',\n    method : 'GET',\n    headers: {\n      'Authorization': 'Basic ' + new Buffer(this.username + ':' + this.password).toString('base64')\n    }\n  };\n  this._request(options, callback);\n};\n\n//  Removes one Redis instance by id\n//  Need the database ID\n//  ### @id {String} ID of the database.(required)\nClient.prototype.remove = function (id, callback) {\n  // Check for id\n  if (!id || typeof id === 'function') {\n    return errs.handle(errs.create({\n      message: 'ID is a required argument'\n    }), Array.prototype.slice.call(arguments).pop());\n  }\n  var options,\n      path = '/instances/' + id;\n  options = {\n    uri    : this._getUrl() + path + '.json',\n    method : 'DELETE',\n    headers: {\n      'Authorization': 'Basic ' + new Buffer(this.username + ':' + this.password).toString('base64'),\n      'Content-Length': 0\n    }\n  };\n  this._request(options, callback);\n};\n\nClient.prototype.formatResponse = function (response) {\n  var database = {\n    id: response.id,\n    port: response.port,\n    host: response.label.split('-')[0] + '.redistogo.com',\n    uri: 'redis://nodejitsu:' +  response.password + '@' + response.label.split('-')[0] + '.redistogo.com:' + response.port,\n    username: 'nodejitsu',\n    password: response.password,\n    metadata: response\n  };\n  return database;\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/telefonica/index.js":"/*\n * index.js: Top-level include for the Telefonica module.\n *\n * (C) 2012 Charlie Robbins, Ken Perkins, Ross Kukulinski & the Contributors.\n *\n */\n\nexports.compute = require('./compute');\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/telefonica/compute/index.js":"/*\n * index.js: Top-level include for the Telefonica compute module\n *\n * (C) 2012 Charlie Robbins, Ken Perkins, Ross Kukulinski & the Contributors.\n *\n */\n\nexports.Client = require('./client').Client;\nexports.Flavor = require('../../joyent/compute/flavor').Flavor;\nexports.Image  = require('../../joyent/compute/image').Image;\nexports.Server = require('../../joyent/compute/server').Server;\n\nexports.createClient = function (options) {\n  return new exports.Client(options);\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/telefonica/compute/client.js":"/*\n * index.js: Compute client for Telefonica InstantServers CloudAPI\n *\n * (C) 2012 Charlie Robbins, Ken Perkins, Ross Kukulinski & the Contributors.\n *\n */\n\nvar util      = require('util'),\n    urlJoin   = require('url-join'),\n    joyent    = require('../../joyent/compute');\n\nvar Client = exports.Client = function (options) {\n  joyent.Client.call(this, options);\n\n  this.serversUrl = options.serversUrl\n    || process.env.SDC_CLI_URL\n    || 'api-eu-lon-1.instantservers.telefonica.com';\n};\n\nutil.inherits(Client, joyent.Client);\n\nClient.prototype._getUrl = function (options) {\n  options = options || {};\n\n  return urlJoin(this.serversUrl\n      ? 'https://' + this.serversUrl\n      : 'https://api-eu-lon-1.instantservers.telefonica.com',\n    (typeof options === 'string' ?\n    options : options.path));\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/hp/index.js":"/*\n * index.js: Top-level include for the HP module.\n *\n * (C) 2014 Hewlett-Packard Development Company, L.P.\n * Phani Raj\n *\n */\n\nexports.storage = require('./storage');\nexports.compute = require('./compute');\nexports.network = require('./network');\nexports.database = require('./database');\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/hp/storage/index.js":"  /*\n * index.js: Top-level include for the HP storage module\n *\n * (C) 2014 Hewlett-Packard Development Company, L.P.\n * Phani Raj\n *\n */\n\nexports.Client = require('./client').Client;\nexports.Container = require('../../openstack/storage/container').Container;\nexports.File = require('../../openstack/storage/file').File;\n\nexports.createClient = function (options) {\n  return new exports.Client(options);\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/hp/storage/client/index.js":"/*\n * index.js: Storage client for HP Cloudservers\n *\n * (C) 2014 Hewlett-Packard Development Company, L.P.\n * Phani Raj\n *\n */\n\nvar util = require('util'),\n    hp = require('../../client'),\n    StorageClient = require('../../../openstack/storage/storageClient').StorageClient,\n    _ = require('lodash');\n\nvar Client = exports.Client = function (options) {\n  hp.Client.call(this, options);\n\n  this.models = {\n    Container: require('../../../openstack/storage/container').Container,\n    File: require('../../../openstack/storage/file').File\n  };\n\n  _.extend(this, require('../../../openstack/storage/client/containers'));\n  _.extend(this, require('../../../openstack/storage/client/files'));\n\n  this.serviceType = 'object-store';\n};\n\nutil.inherits(Client, hp.Client);\n_.extend(Client.prototype, StorageClient.prototype);\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/hp/client.js":"/*\n * client.js: Base client from which all HP clients inherit from\n *\n * (C) 2014 Hewlett-Packard Development Company, L.P.\n *\n */\n\nvar util = require('util'),\n    identity = require('./identity'),\n    base = require('../openstack/client'),\n    _ = require('lodash');\n\nvar Client = exports.Client = function (options) {\n  options = options || {};\n\n  if (!options.authUrl){\n      throw new Error('authUrl is invalid');\n  }\n\n  options.identity = identity.Identity;\n\n  if (typeof options.useServiceCatalog === 'undefined') {\n    options.useServiceCatalog = true;\n  }\n\n  base.Client.call(this, options);\n\n  this.provider = 'hp';\n};\n\nutil.inherits(Client, base.Client);\n\nClient.prototype._getIdentityOptions = function() {\n  return _.extend({\n    apiKey: this.config.apiKey\n  }, Client.super_.prototype._getIdentityOptions.call(this));\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/hp/identity/index.js":"/*\n * index.js: Identity models\n *\n * (C) 2014 Hewlett-Packard Development Company, L.P.\n * Phani Raj\n *\n */\n\nmodule.exports = require('./hpIdentity');\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/hp/identity/hpIdentity.js":"/*\n * hpIdentity.js: hpIdentity model\n *\n * (C) 2014 Hewlett-Packard Development Company, L.P.\n * Phani Raj\n *\n */\n\nvar identity = require('../../openstack/context'),\n  events = require('eventemitter2'),\n  Identity = identity.Identity,\n  util = require('util');\n\nvar HPIdentity = exports.Identity = function (options) {\n  this.options = options;\n  this.name = 'HPIdentity';\n\n  this.basePath = options.basePath || '/v2.0/tokens';\n  this.useServiceCatalog = (typeof options.useServiceCatalog === 'boolean')\n    ? options.useServiceCatalog\n    : true;\n\n  events.EventEmitter2.call(this, { delimiter: '::', wildcard: true });\n};\n\nutil.inherits(HPIdentity, events.EventEmitter2);\nutil.inherits(HPIdentity, Identity);\n\nHPIdentity.prototype._buildAuthenticationPayload = function () {\n  var self = this;\n\n  HPIdentity.super_.prototype._buildAuthenticationPayload.call(this);\n\n  this.emit('log::trace', 'Building HP Identity Auth Payload');\n\n  if (!self._authenticationPayload) {\n    // setup our inputs for authorization\n    // access key & secret key\n    if (self.options.apiKey && self.options.username) {\n      self._authenticationPayload = {\n        auth: {\n          'apiAccessKeyCredentials': {\n            'accessKey': self.options.username,\n            'secretKey': self.options.apiKey\n          }\n        }\n      };\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/hp/compute/index.js":"  /*\n * index.js: Top-level include for the Rackspace storage module\n *\n * (C) 2014 Hewlett-Packard Development Company, L.P.\n * Phani Raj\n *\n */\n\nexports.Client = require('./client').Client;\nexports.Flavor = require('../../openstack/compute/flavor').Flavor;\nexports.Image = require('../../openstack/compute/image').Image;\nexports.Server = require('../../openstack/compute/server').Server;\n\nexports.createClient = function (options) {\n  return new exports.Client(options);\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/hp/compute/client/index.js":"/*\n * client.js: Compute client for HP Cloudservers\n *\n * (C) 2014 Hewlett-Packard Development Company, L.P.\n * Phani Raj\n *\n */\n\nvar util = require('util'),\n    hp = require('../../client'),\n    ComputeClient = require('../../../openstack/compute/computeClient').ComputeClient,\n    _ = require('lodash');\n\nvar Client = exports.Client = function (options) {\n  hp.Client.call(this, options);\n  _.extend(this, require('../../../openstack/compute/client/flavors'));\n  _.extend(this, require('../../../openstack/compute/client/images'));\n  _.extend(this, require('../../../openstack/compute/client/servers'));\n  _.extend(this, require('../../../openstack/compute/client/extensions/keys'));\n  _.extend(this, require('../../../openstack/compute/client/extensions/floating-ips'));\n  _.extend(this, require('../../../openstack/compute/client/extensions/keys'));\n  _.extend(this, require('../../../openstack/compute/client/extensions/security-groups'));\n  _.extend(this, require('../../../openstack/compute/client/extensions/servers'));\n\n  this.serviceType = 'compute';\n};\n\nutil.inherits(Client, hp.Client);\n_.extend(Client.prototype, ComputeClient.prototype);\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/hp/network/index.js":"/*\n * index.js: Top-level include for the HP networking client.\n *\n * (C) 2014 Hewlett-Packard Development Company, L.P.\n *\n */\n\nexports.Client = require('./client').Client;\nexports.Network = require('../../openstack/network/network').Network;\nexports.Subnet = require('../../openstack/network/subnet').Subnet;\nexports.Port = require('../../openstack/network/port').Port;\nexports.SecurityGroup = require('../../openstack/network/securityGroup').SecurityGroup;\nexports.SecurityGroupRule = require('../../openstack/network/securityGroupRule').SecurityGroupRule;\n\nexports.createClient = function (options) {\n  return new exports.Client(options);\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/hp/network/client/index.js":"/*\n * client.js: Client for HP networking\n *\n * (C) 2014 Hewlett-Packard Development Company, L.P.\n *\n */\n\nvar util = require('util'),\n    urlJoin = require('url-join'),\n    hp = require('../../client'),\n    NetworkClient = require('../../../openstack/network/networkClient').NetworkClient,\n    _ = require('lodash');\n\nvar Client = exports.Client = function (options) {\n  hp.Client.call(this, options);\n\n  this.models = {\n    Network: require('../../../openstack/network/network').Network,\n    Subnet: require('../../../openstack/network/subnet').Subnet,\n    Port: require('../../../openstack/network/port').Port,\n    SecurityGroup: require('../../../openstack/network/securityGroup').SecurityGroup,\n    SecurityGroupRule: require('../../../openstack/network/securityGroupRule').SecurityGroupRule\n  };\n\n  _.extend(this, require('../../../openstack/network/client/networks'));\n  _.extend(this, require('../../../openstack/network/client/subnets'));\n  _.extend(this, require('../../../openstack/network/client/ports'));\n  _.extend(this, require('../../../openstack/network/client/securityGroups'));\n  _.extend(this, require('../../../openstack/network/client/securityGroupRules'));\n\n  this.serviceType = 'network';\n};\n\nutil.inherits(Client, hp.Client);\n_.extend(Client.prototype, NetworkClient.prototype);\n\n/**\n * client._getUrl\n *\n * @description get the url for the current networking service\n *\n * @param options\n * @returns {exports|*}\n * @private\n */\nClient.prototype._getUrl = function(options) {\n  if (options.path) {\n    options.path = urlJoin('v2.0', options.path);\n  }\n  return NetworkClient.prototype._getUrl.call(this, options);\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/openstack/network/securityGroupRule.js":"/*\n * network.js: Openstack Security Group Rule object.\n *\n * (C) 2015 Rackspace\n *      Shaunak Kashyap\n * MIT LICENSE\n */\n\nvar util = require('util'),\n    base = require('../../core/network/securityGroupRule'),\n    _ = require('lodash');\n\nvar SecurityGroupRule = exports.SecurityGroupRule = function SecurityGroupRule(client, details) {\n  base.SecurityGroupRule.call(this, client, details);\n};\n\nutil.inherits(SecurityGroupRule, base.SecurityGroupRule);\n\nSecurityGroupRule.prototype._setProperties = function (details) {\n  this.id = details.id || this.id;\n  this.direction = details.direction || this.direction;\n  this.ethertype = details.ethertype || this.id;\n  this.securityGroupId = details.security_group_id || this.securityGroupId;\n  this.portRangeMin = details.port_range_min || this.portRangeMin;\n  this.portRangeMax = details.port_range_max || this.portRangeMax;\n  this.protocol = details.protocol || this.protocol;\n  this.remoteGroupId = details.remote_group_id || this.remoteGroupId;\n  this.remoteIpPrefix = details.remote_ip_prefix || this.remoteIpPrefix;\n  this.tenantId = details.tenant_id || this.tenantId;\n};\n\nSecurityGroupRule.prototype.toJSON = function () {\n  return _.pick(this, ['id', 'direction', 'ethertype', 'securityGroupId',\n                       'portRangeMin', 'portRangeMax', 'protocol',\n                       'remoteGroupId', 'remoteIpPrefix', 'tenantId']);\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/core/network/securityGroupRule.js":"/*\n * securityGroupRule.js: Base securityGroupRule from which all pkgcloud securityGroupRule inherit.\n *\n * (C) 2015 Rackspace\n *      Shaunak Kashyap\n * MIT LICENSE\n */\n\nvar util = require('util'),\n    Model = require('../base/model').Model;\n\nvar SecurityGroupRule = exports.SecurityGroupRule = function (client, details) {\n  Model.call(this, client, details);\n};\n\nutil.inherits(SecurityGroupRule, Model);\n\nSecurityGroupRule.prototype.create = function (callback) {\n  this.client.createSecurityGroupRule(this, callback);\n};\n\nSecurityGroupRule.prototype.refresh = function (callback) {\n  this.client.getSecurityGroupRule(this.id, callback);\n};\n\nSecurityGroupRule.prototype.destroy = function (callback) {\n  this.client.destroySecurityGroupRule(this.id, callback);\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/hp/database/index.js":"/*\n * index.js: Top-level include for the HP database module\n *\n * (C) 2014 Hewlett-Packard Development Company, L.P.\n *\n */\n\nexports.Client    = require('./client').Client;\nexports.Flavor    = require('../../openstack/database/flavor').Flavor;\nexports.Instance  = require('../../openstack/database/instance').Instance;\nexports.Database  = require('../../openstack/database/database').Database;\nexports.User      = require('../../openstack/database/user').User;\n\nexports.createClient = function createClient(options) {\n  return new exports.Client(options);\n};\n","/home/travis/build/npmtest/node-npmtest-pkgcloud/node_modules/pkgcloud/lib/pkgcloud/hp/database/client/index.js":"/*\n * client.js: Database client for HP Trove Databases\n *\n * (C) 2014 Hewlett-Packard Development Company, L.P.\n *\n */\n\nvar util      = require('util'),\n    urlJoin   = require('url-join'),\n    hp = require('../../client'),\n    auth      = require('../../../common/auth.js'),\n    _         = require('lodash');\n\nvar Client = exports.Client = function (options) {\n  hp.Client.call(this, options);\n\n  this.before.push(auth.accountId);\n\n  _.extend(this, require('../../../openstack/database/client/flavors'));\n  _.extend(this, require('../../../openstack/database/client/instances'));\n  _.extend(this, require('../../../openstack/database/client/databases'));\n  _.extend(this, require('../../../openstack/database/client/users'));\n\n  this.serviceType = 'database';\n};\n\nutil.inherits(Client, hp.Client);\n\nClient.prototype._getUrl = function (options) {\n  options = options || {};\n\n  return urlJoin(this._serviceUrl,\n    typeof options === 'string'\n      ? options\n      : options.path);\n\n};\n\n//\n// Gets the version of the OpenStack Compute API we are running against\n// Parameters: callback\n//\nClient.prototype.getVersion = function getVersion(callback) {\n  var self = this;\n\n  this.auth(function (err) {\n    if (err) {\n      return callback(err);\n    }\n\n    self._request({\n      uri: self._getUrl('/').replace('/v1.0/' + self._identity.token.tenant.id + '/', '')\n    }, function (err, body) {\n      if (err) {\n        return callback(err);\n      }\n      return callback(null,\n        ((typeof body === 'object') ? body.versions : JSON.parse(body).versions));\n    });\n  });\n};\n"}